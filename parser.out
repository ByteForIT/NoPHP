Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statement
Rule 3     program -> program statement
Rule 4     statement -> ? expression ;
Rule 5     statement -> expression
Rule 6     statement -> sandbox
Rule 7     statement -> import_statement
Rule 8     statement -> variable_operation
Rule 9     statement -> return_statement
Rule 10    statement -> delete_statement
Rule 11    statement -> for_loop
Rule 12    statement -> break_statement
Rule 13    statement -> variable_assignment
Rule 14    statement -> python_code_statement
Rule 15    statement -> while_loop
Rule 16    statement -> conditional
Rule 17    statement -> function_call_statement
Rule 18    statement -> class_declaration
Rule 19    statement -> function_declaration
Rule 20    sandbox -> PHPSTART program PHPEND
Rule 21    sandbox -> LIMPORT expression ;
Rule 22    expression -> assoc_array
Rule 23    expression -> _numpy
Rule 24    expression -> _list
Rule 25    expression -> _tuple
Rule 26    expression -> class_attribute
Rule 27    expression -> id
Rule 28    expression -> string
Rule 29    expression -> bool
Rule 30    expression -> float
Rule 31    expression -> int
Rule 32    expression -> null
Rule 33    expression -> get_index
Rule 34    expression -> function_call
Rule 35    expression -> python_code
Rule 36    expression -> ( expression )
Rule 37    expression -> expression > expression  [precedence=left, level=7]
Rule 38    expression -> expression < expression  [precedence=left, level=7]
Rule 39    expression -> ! expression  [precedence=right, level=11]
Rule 40    expression -> + expression  [precedence=right, level=10]
Rule 41    expression -> - expression  [precedence=right, level=10]
Rule 42    expression -> expression & expression  [precedence=left, level=5]
Rule 43    expression -> expression | expression  [precedence=left, level=4]
Rule 44    expression -> expression EQ_GREATER expression  [precedence=left, level=7]
Rule 45    expression -> expression EQ_LESS expression  [precedence=left, level=7]
Rule 46    expression -> expression NOT_EQEQ expression  [precedence=left, level=6]
Rule 47    expression -> expression EQEQ expression  [precedence=left, level=6]
Rule 48    expression -> expression % expression  [precedence=left, level=9]
Rule 49    expression -> expression * expression  [precedence=left, level=9]
Rule 50    expression -> expression / expression  [precedence=left, level=9]
Rule 51    expression -> expression - expression  [precedence=left, level=8]
Rule 52    expression -> expression + expression  [precedence=left, level=8]
Rule 53    expression -> * ID
Rule 54    expression -> & ID
Rule 55    expression -> ID OF ID
Rule 56    expression -> $ expression
Rule 57    expression -> expression . expression
Rule 58    expression -> ? HTMLEND
Rule 59    expression -> HTMLSTART
Rule 60    expression -> html_full
Rule 61    html_full -> HTMLSTART empty HTMLEND
Rule 62    html_full -> HTMLSTART expression HTMLEND
Rule 63    irregular_html_args -> html_full expression
Rule 64    function_call_statement -> function_call ;
Rule 65    python_code_statement -> python_code ;
Rule 66    break_statement -> DEBUG ;
Rule 67    break_statement -> SKIP ;
Rule 68    break_statement -> BREAK ;
Rule 69    return_statement -> RETURN expression ;
Rule 70    function_call -> . ENV FROM ID { program }
Rule 71    function_call -> . ENV { program }
Rule 72    function_call -> expression ( empty ) FARROW { program }
Rule 73    function_call -> ID TARROW ID ( function_arguments )
Rule 74    function_call -> ID \ ID
Rule 75    function_call -> ID / ID
Rule 76    function_call -> ID TARROW ID
Rule 77    function_call -> # DEPENDS expression
Rule 78    function_call -> # DEFINE expression ? ID
Rule 79    function_call -> expression ( empty )
Rule 80    function_call -> NEW expression ( empty )
Rule 81    function_call -> NEW expression ( function_arguments )
Rule 82    function_call -> ID COLON_COLON ID ( empty )
Rule 83    function_call -> ID COLON_COLON ID ( function_arguments )
Rule 84    function_call -> $ ID TARROW ID ( empty )
Rule 85    function_call -> $ ID TARROW ID ( function_arguments )
Rule 86    function_call -> expression ( function_arguments ) FARROW { program }
Rule 87    function_call -> expression $ ID = expression ;
Rule 88    function_call -> expression function_arguments
Rule 89    function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
Rule 90    function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
Rule 91    function_declaration -> INIT ( function_arguments ) { program } ;
Rule 92    function_declaration -> ID FUNC ID ( empty ) { program }
Rule 93    function_declaration -> ID FUNC ID ( function_arguments ) { program }
Rule 94    function_declaration -> ID FUNC ID ( empty ) : expression { program }
Rule 95    function_declaration -> ID FUNC ID ( function_arguments ) : expression { program }
Rule 96    function_declaration -> FUNC ID ( empty ) { program }
Rule 97    function_declaration -> FUNC ID ( empty ) : expression { program }
Rule 98    function_declaration -> FUNC ID ( function_arguments ) { program }
Rule 99    function_declaration -> FUNC ID ( function_arguments ) : expression { program }
Rule 100   function_arguments -> kwargs
Rule 101   function_arguments -> positional_args , kwargs  [precedence=left, level=2]
Rule 102   function_arguments -> positional_args
Rule 103   class_declaration -> NAMESPACE ID ;
Rule 104   class_declaration -> NAMESPACE ID { program }
Rule 105   class_declaration -> CLASS ID EXTENDS ID { program }
Rule 106   class_declaration -> CLASS ID { program }
Rule 107   for_loop -> FOREACH ( expression AS expression ) { program }
Rule 108   for_loop -> FOR ( expression ) { program }
Rule 109   while_loop -> WHILE ( expression ) { program }
Rule 110   positional_args -> expression
Rule 111   positional_args -> positional_args , expression  [precedence=left, level=2]
Rule 112   kwargs -> ID = expression  [precedence=right, level=3]
Rule 113   kwargs -> kwargs , id = expression  [precedence=right, level=3]
Rule 114   variable_assignment -> LET get_index = expression ;
Rule 115   variable_assignment -> LET ID : ID = expression ;
Rule 116   variable_assignment -> $ ID TARROW ID = expression ;
Rule 117   variable_assignment -> $ ID = expression ;
Rule 118   variable_operation -> get_index EQ_DIV expression ;
Rule 119   variable_operation -> ID EQ_DIV expression ;
Rule 120   variable_operation -> get_index EQ_MOD expression ;
Rule 121   variable_operation -> ID EQ_MOD expression ;
Rule 122   variable_operation -> get_index EQ_MUL expression ;
Rule 123   variable_operation -> ID EQ_MUL expression ;
Rule 124   variable_operation -> get_index EQ_SUB expression ;
Rule 125   variable_operation -> ID EQ_SUB expression ;
Rule 126   variable_operation -> get_index EQ_ADD expression ;
Rule 127   variable_operation -> ID EQ_ADD expression ;
Rule 128   conditional -> if_statement else_statement
Rule 129   conditional -> if_statement else_if_loop else_statement
Rule 130   conditional -> if_statement else_if_loop
Rule 131   conditional -> if_statement
Rule 132   if_statement -> IF ( expression ) { program }
Rule 133   else_if_loop -> else_if_statement
Rule 134   else_if_loop -> else_if_loop else_if_statement
Rule 135   else_if_statement -> ELSE IF ( expression ) { program }
Rule 136   else_statement -> ELSE { program }
Rule 137   delete_statement -> DEL ID ;
Rule 138   import_statement -> . SELFISH ;
Rule 139   import_statement -> . GLOBAL ;
Rule 140   import_statement -> IMPORT expression ;
Rule 141   null -> NULL
Rule 142   assoc_array -> [ assoc_array_items ]
Rule 143   assoc_array -> [ empty ]
Rule 144   assoc_array_items -> expression SARROW expression
Rule 145   assoc_array_items -> assoc_array_items , expression SARROW expression
Rule 146   get_index -> expression ^ expression
Rule 147   get_index -> expression [ expression ]
Rule 148   _tuple -> { positional_args , }
Rule 149   _tuple -> { positional_args }
Rule 150   _list -> [ positional_args , ]
Rule 151   _list -> [ positional_args ]
Rule 152   _numpy -> ( , )
Rule 153   _numpy -> ( )
Rule 154   _numpy -> ( expression , )
Rule 155   _numpy -> ( items , )
Rule 156   _numpy -> ( items )
Rule 157   items -> expression , expression  [precedence=left, level=2]
Rule 158   items -> items , expression  [precedence=left, level=2]
Rule 159   int -> INT
Rule 160   string -> STRING
Rule 161   string -> CHAR
Rule 162   float -> FLOAT
Rule 163   bool -> FALSE
Rule 164   bool -> TRUE
Rule 165   class_attribute -> expression COLON_COLON ID
Rule 166   id -> ID
Rule 167   python_code -> PYTHON_CODE_EXEC
Rule 168   python_code -> PYTHON_CODE
Rule 169   empty -> <empty>  [precedence=left, level=1]

Unused terminals:

    SANDBOX
    TELSE
    ATTR_LEVEL
    IN

Terminals, with rules where they appear:

!                    : 39
#                    : 77 78
$                    : 56 84 85 87 116 117
%                    : 48
&                    : 42 54
(                    : 36 72 73 79 80 81 82 83 84 85 86 89 90 91 92 93 94 95 96 97 98 99 107 108 109 132 135 152 153 154 155 156
)                    : 36 72 73 79 80 81 82 83 84 85 86 89 90 91 92 93 94 95 96 97 98 99 107 108 109 132 135 152 153 154 155 156
*                    : 49 53
+                    : 40 52
,                    : 101 111 113 145 148 150 152 154 155 157 158
-                    : 41 51
.                    : 57 70 71 138 139
/                    : 50 75
:                    : 94 95 97 99 115
;                    : 4 21 64 65 66 67 68 69 87 91 103 114 115 116 117 118 119 120 121 122 123 124 125 126 127 137 138 139 140
<                    : 38
=                    : 87 112 113 114 115 116 117
>                    : 37
?                    : 4 58 78
AS                   : 107
ATTR_LEVEL           : 
BREAK                : 68
CHAR                 : 161
CLASS                : 105 106
COLON_COLON          : 82 83 89 90 165
DEBUG                : 66
DEFINE               : 78
DEL                  : 137
DEPENDS              : 77
ELSE                 : 135 136
ENV                  : 70 71
EQEQ                 : 47
EQ_ADD               : 126 127
EQ_DIV               : 118 119
EQ_GREATER           : 44
EQ_LESS              : 45
EQ_MOD               : 120 121
EQ_MUL               : 122 123
EQ_SUB               : 124 125
EXTENDS              : 105
FALSE                : 163
FARROW               : 72 86
FLOAT                : 162
FOR                  : 108
FOREACH              : 107
FROM                 : 70
FUNC                 : 89 90 92 93 94 95 96 97 98 99
GLOBAL               : 139
HTMLEND              : 58 61 62
HTMLSTART            : 59 61 62
ID                   : 53 54 55 55 70 73 73 74 74 75 75 76 76 78 82 82 83 83 84 84 85 85 87 89 89 90 90 92 92 93 93 94 94 95 95 96 97 98 99 103 104 105 105 106 112 115 115 116 116 117 119 121 123 125 127 137 165 166
IF                   : 132 135
IMPORT               : 140
IN                   : 
INIT                 : 91
INT                  : 159
LET                  : 114 115
LIMPORT              : 21
NAMESPACE            : 103 104
NEW                  : 80 81
NOT_EQEQ             : 46
NULL                 : 141
OF                   : 55
PHPEND               : 20
PHPSTART             : 20
PYTHON_CODE          : 168
PYTHON_CODE_EXEC     : 167
RETURN               : 69
SANDBOX              : 
SARROW               : 144 145
SELFISH              : 138
SKIP                 : 67
STRING               : 160
TARROW               : 73 76 84 85 89 90 116
TELSE                : 
TRUE                 : 164
WHILE                : 109
[                    : 142 143 147 150 151
\                    : 74
]                    : 142 143 147 150 151
^                    : 146
error                : 
{                    : 70 71 72 86 89 90 91 92 93 94 95 96 97 98 99 104 105 106 107 108 109 132 135 136 148 149
|                    : 43
}                    : 70 71 72 86 89 90 91 92 93 94 95 96 97 98 99 104 105 106 107 108 109 132 135 136 148 149

Nonterminals, with rules where they appear:

_list                : 24
_numpy               : 23
_tuple               : 25
assoc_array          : 22
assoc_array_items    : 142 145
bool                 : 29
break_statement      : 12
class_attribute      : 26
class_declaration    : 18
conditional          : 16
delete_statement     : 10
else_if_loop         : 129 130 134
else_if_statement    : 133 134
else_statement       : 128 129
empty                : 1 61 72 79 80 82 84 89 92 94 96 97 143
expression           : 4 5 21 36 37 37 38 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 56 57 57 62 63 69 72 77 78 79 80 81 86 87 87 88 89 90 94 95 97 99 107 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 132 135 140 144 144 145 145 146 146 147 147 154 157 157 158 165
float                : 30
for_loop             : 11
function_arguments   : 73 81 83 85 86 88 90 91 93 95 98 99
function_call        : 34 64
function_call_statement : 17
function_declaration : 19
get_index            : 33 114 118 120 122 124 126
html_full            : 60 63
id                   : 27 113
if_statement         : 128 129 130 131
import_statement     : 7
int                  : 31
irregular_html_args  : 
items                : 155 156 158
kwargs               : 100 101 113
null                 : 32
positional_args      : 101 102 111 148 149 150 151
program              : 3 20 70 71 72 86 89 90 91 92 93 94 95 96 97 98 99 104 105 106 107 108 109 132 135 136 0
python_code          : 35 65
python_code_statement : 14
return_statement     : 9
sandbox              : 6
statement            : 2 3
string               : 28
variable_assignment  : 13
variable_operation   : 8
while_loop           : 15


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    $end            reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 1

    (0) S' -> program .
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 2

    (1) program -> empty .
    ?               reduce using rule 1 (program -> empty .)
    (               reduce using rule 1 (program -> empty .)
    !               reduce using rule 1 (program -> empty .)
    +               reduce using rule 1 (program -> empty .)
    -               reduce using rule 1 (program -> empty .)
    *               reduce using rule 1 (program -> empty .)
    &               reduce using rule 1 (program -> empty .)
    ID              reduce using rule 1 (program -> empty .)
    $               reduce using rule 1 (program -> empty .)
    HTMLSTART       reduce using rule 1 (program -> empty .)
    PHPSTART        reduce using rule 1 (program -> empty .)
    LIMPORT         reduce using rule 1 (program -> empty .)
    .               reduce using rule 1 (program -> empty .)
    IMPORT          reduce using rule 1 (program -> empty .)
    RETURN          reduce using rule 1 (program -> empty .)
    DEL             reduce using rule 1 (program -> empty .)
    FOREACH         reduce using rule 1 (program -> empty .)
    FOR             reduce using rule 1 (program -> empty .)
    DEBUG           reduce using rule 1 (program -> empty .)
    SKIP            reduce using rule 1 (program -> empty .)
    BREAK           reduce using rule 1 (program -> empty .)
    LET             reduce using rule 1 (program -> empty .)
    WHILE           reduce using rule 1 (program -> empty .)
    NAMESPACE       reduce using rule 1 (program -> empty .)
    CLASS           reduce using rule 1 (program -> empty .)
    FUNC            reduce using rule 1 (program -> empty .)
    INIT            reduce using rule 1 (program -> empty .)
    [               reduce using rule 1 (program -> empty .)
    {               reduce using rule 1 (program -> empty .)
    STRING          reduce using rule 1 (program -> empty .)
    CHAR            reduce using rule 1 (program -> empty .)
    FALSE           reduce using rule 1 (program -> empty .)
    TRUE            reduce using rule 1 (program -> empty .)
    FLOAT           reduce using rule 1 (program -> empty .)
    INT             reduce using rule 1 (program -> empty .)
    NULL            reduce using rule 1 (program -> empty .)
    #               reduce using rule 1 (program -> empty .)
    NEW             reduce using rule 1 (program -> empty .)
    PYTHON_CODE_EXEC reduce using rule 1 (program -> empty .)
    PYTHON_CODE     reduce using rule 1 (program -> empty .)
    IF              reduce using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    PHPEND          reduce using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)


state 3

    (2) program -> statement .
    ?               reduce using rule 2 (program -> statement .)
    (               reduce using rule 2 (program -> statement .)
    !               reduce using rule 2 (program -> statement .)
    +               reduce using rule 2 (program -> statement .)
    -               reduce using rule 2 (program -> statement .)
    *               reduce using rule 2 (program -> statement .)
    &               reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    $               reduce using rule 2 (program -> statement .)
    HTMLSTART       reduce using rule 2 (program -> statement .)
    PHPSTART        reduce using rule 2 (program -> statement .)
    LIMPORT         reduce using rule 2 (program -> statement .)
    .               reduce using rule 2 (program -> statement .)
    IMPORT          reduce using rule 2 (program -> statement .)
    RETURN          reduce using rule 2 (program -> statement .)
    DEL             reduce using rule 2 (program -> statement .)
    FOREACH         reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    DEBUG           reduce using rule 2 (program -> statement .)
    SKIP            reduce using rule 2 (program -> statement .)
    BREAK           reduce using rule 2 (program -> statement .)
    LET             reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    NAMESPACE       reduce using rule 2 (program -> statement .)
    CLASS           reduce using rule 2 (program -> statement .)
    FUNC            reduce using rule 2 (program -> statement .)
    INIT            reduce using rule 2 (program -> statement .)
    [               reduce using rule 2 (program -> statement .)
    {               reduce using rule 2 (program -> statement .)
    STRING          reduce using rule 2 (program -> statement .)
    CHAR            reduce using rule 2 (program -> statement .)
    FALSE           reduce using rule 2 (program -> statement .)
    TRUE            reduce using rule 2 (program -> statement .)
    FLOAT           reduce using rule 2 (program -> statement .)
    INT             reduce using rule 2 (program -> statement .)
    NULL            reduce using rule 2 (program -> statement .)
    #               reduce using rule 2 (program -> statement .)
    NEW             reduce using rule 2 (program -> statement .)
    PYTHON_CODE_EXEC reduce using rule 2 (program -> statement .)
    PYTHON_CODE     reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    PHPEND          reduce using rule 2 (program -> statement .)
    }               reduce using rule 2 (program -> statement .)


state 4

    (4) statement -> ? . expression ;
    (58) expression -> ? . HTMLEND
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    HTMLEND         shift and go to state 79
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 78
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 5

    (5) statement -> expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    PHPSTART        reduce using rule 5 (statement -> expression .)
    LIMPORT         reduce using rule 5 (statement -> expression .)
    IMPORT          reduce using rule 5 (statement -> expression .)
    RETURN          reduce using rule 5 (statement -> expression .)
    DEL             reduce using rule 5 (statement -> expression .)
    FOREACH         reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    DEBUG           reduce using rule 5 (statement -> expression .)
    SKIP            reduce using rule 5 (statement -> expression .)
    BREAK           reduce using rule 5 (statement -> expression .)
    LET             reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    NAMESPACE       reduce using rule 5 (statement -> expression .)
    CLASS           reduce using rule 5 (statement -> expression .)
    FUNC            reduce using rule 5 (statement -> expression .)
    INIT            reduce using rule 5 (statement -> expression .)
    IF              reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    PHPEND          reduce using rule 5 (statement -> expression .)
    }               reduce using rule 5 (statement -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 6

    (6) statement -> sandbox .
    ?               reduce using rule 6 (statement -> sandbox .)
    (               reduce using rule 6 (statement -> sandbox .)
    !               reduce using rule 6 (statement -> sandbox .)
    +               reduce using rule 6 (statement -> sandbox .)
    -               reduce using rule 6 (statement -> sandbox .)
    *               reduce using rule 6 (statement -> sandbox .)
    &               reduce using rule 6 (statement -> sandbox .)
    ID              reduce using rule 6 (statement -> sandbox .)
    $               reduce using rule 6 (statement -> sandbox .)
    HTMLSTART       reduce using rule 6 (statement -> sandbox .)
    PHPSTART        reduce using rule 6 (statement -> sandbox .)
    LIMPORT         reduce using rule 6 (statement -> sandbox .)
    .               reduce using rule 6 (statement -> sandbox .)
    IMPORT          reduce using rule 6 (statement -> sandbox .)
    RETURN          reduce using rule 6 (statement -> sandbox .)
    DEL             reduce using rule 6 (statement -> sandbox .)
    FOREACH         reduce using rule 6 (statement -> sandbox .)
    FOR             reduce using rule 6 (statement -> sandbox .)
    DEBUG           reduce using rule 6 (statement -> sandbox .)
    SKIP            reduce using rule 6 (statement -> sandbox .)
    BREAK           reduce using rule 6 (statement -> sandbox .)
    LET             reduce using rule 6 (statement -> sandbox .)
    WHILE           reduce using rule 6 (statement -> sandbox .)
    NAMESPACE       reduce using rule 6 (statement -> sandbox .)
    CLASS           reduce using rule 6 (statement -> sandbox .)
    FUNC            reduce using rule 6 (statement -> sandbox .)
    INIT            reduce using rule 6 (statement -> sandbox .)
    [               reduce using rule 6 (statement -> sandbox .)
    {               reduce using rule 6 (statement -> sandbox .)
    STRING          reduce using rule 6 (statement -> sandbox .)
    CHAR            reduce using rule 6 (statement -> sandbox .)
    FALSE           reduce using rule 6 (statement -> sandbox .)
    TRUE            reduce using rule 6 (statement -> sandbox .)
    FLOAT           reduce using rule 6 (statement -> sandbox .)
    INT             reduce using rule 6 (statement -> sandbox .)
    NULL            reduce using rule 6 (statement -> sandbox .)
    #               reduce using rule 6 (statement -> sandbox .)
    NEW             reduce using rule 6 (statement -> sandbox .)
    PYTHON_CODE_EXEC reduce using rule 6 (statement -> sandbox .)
    PYTHON_CODE     reduce using rule 6 (statement -> sandbox .)
    IF              reduce using rule 6 (statement -> sandbox .)
    $end            reduce using rule 6 (statement -> sandbox .)
    PHPEND          reduce using rule 6 (statement -> sandbox .)
    }               reduce using rule 6 (statement -> sandbox .)


state 7

    (7) statement -> import_statement .
    ?               reduce using rule 7 (statement -> import_statement .)
    (               reduce using rule 7 (statement -> import_statement .)
    !               reduce using rule 7 (statement -> import_statement .)
    +               reduce using rule 7 (statement -> import_statement .)
    -               reduce using rule 7 (statement -> import_statement .)
    *               reduce using rule 7 (statement -> import_statement .)
    &               reduce using rule 7 (statement -> import_statement .)
    ID              reduce using rule 7 (statement -> import_statement .)
    $               reduce using rule 7 (statement -> import_statement .)
    HTMLSTART       reduce using rule 7 (statement -> import_statement .)
    PHPSTART        reduce using rule 7 (statement -> import_statement .)
    LIMPORT         reduce using rule 7 (statement -> import_statement .)
    .               reduce using rule 7 (statement -> import_statement .)
    IMPORT          reduce using rule 7 (statement -> import_statement .)
    RETURN          reduce using rule 7 (statement -> import_statement .)
    DEL             reduce using rule 7 (statement -> import_statement .)
    FOREACH         reduce using rule 7 (statement -> import_statement .)
    FOR             reduce using rule 7 (statement -> import_statement .)
    DEBUG           reduce using rule 7 (statement -> import_statement .)
    SKIP            reduce using rule 7 (statement -> import_statement .)
    BREAK           reduce using rule 7 (statement -> import_statement .)
    LET             reduce using rule 7 (statement -> import_statement .)
    WHILE           reduce using rule 7 (statement -> import_statement .)
    NAMESPACE       reduce using rule 7 (statement -> import_statement .)
    CLASS           reduce using rule 7 (statement -> import_statement .)
    FUNC            reduce using rule 7 (statement -> import_statement .)
    INIT            reduce using rule 7 (statement -> import_statement .)
    [               reduce using rule 7 (statement -> import_statement .)
    {               reduce using rule 7 (statement -> import_statement .)
    STRING          reduce using rule 7 (statement -> import_statement .)
    CHAR            reduce using rule 7 (statement -> import_statement .)
    FALSE           reduce using rule 7 (statement -> import_statement .)
    TRUE            reduce using rule 7 (statement -> import_statement .)
    FLOAT           reduce using rule 7 (statement -> import_statement .)
    INT             reduce using rule 7 (statement -> import_statement .)
    NULL            reduce using rule 7 (statement -> import_statement .)
    #               reduce using rule 7 (statement -> import_statement .)
    NEW             reduce using rule 7 (statement -> import_statement .)
    PYTHON_CODE_EXEC reduce using rule 7 (statement -> import_statement .)
    PYTHON_CODE     reduce using rule 7 (statement -> import_statement .)
    IF              reduce using rule 7 (statement -> import_statement .)
    $end            reduce using rule 7 (statement -> import_statement .)
    PHPEND          reduce using rule 7 (statement -> import_statement .)
    }               reduce using rule 7 (statement -> import_statement .)


state 8

    (8) statement -> variable_operation .
    ?               reduce using rule 8 (statement -> variable_operation .)
    (               reduce using rule 8 (statement -> variable_operation .)
    !               reduce using rule 8 (statement -> variable_operation .)
    +               reduce using rule 8 (statement -> variable_operation .)
    -               reduce using rule 8 (statement -> variable_operation .)
    *               reduce using rule 8 (statement -> variable_operation .)
    &               reduce using rule 8 (statement -> variable_operation .)
    ID              reduce using rule 8 (statement -> variable_operation .)
    $               reduce using rule 8 (statement -> variable_operation .)
    HTMLSTART       reduce using rule 8 (statement -> variable_operation .)
    PHPSTART        reduce using rule 8 (statement -> variable_operation .)
    LIMPORT         reduce using rule 8 (statement -> variable_operation .)
    .               reduce using rule 8 (statement -> variable_operation .)
    IMPORT          reduce using rule 8 (statement -> variable_operation .)
    RETURN          reduce using rule 8 (statement -> variable_operation .)
    DEL             reduce using rule 8 (statement -> variable_operation .)
    FOREACH         reduce using rule 8 (statement -> variable_operation .)
    FOR             reduce using rule 8 (statement -> variable_operation .)
    DEBUG           reduce using rule 8 (statement -> variable_operation .)
    SKIP            reduce using rule 8 (statement -> variable_operation .)
    BREAK           reduce using rule 8 (statement -> variable_operation .)
    LET             reduce using rule 8 (statement -> variable_operation .)
    WHILE           reduce using rule 8 (statement -> variable_operation .)
    NAMESPACE       reduce using rule 8 (statement -> variable_operation .)
    CLASS           reduce using rule 8 (statement -> variable_operation .)
    FUNC            reduce using rule 8 (statement -> variable_operation .)
    INIT            reduce using rule 8 (statement -> variable_operation .)
    [               reduce using rule 8 (statement -> variable_operation .)
    {               reduce using rule 8 (statement -> variable_operation .)
    STRING          reduce using rule 8 (statement -> variable_operation .)
    CHAR            reduce using rule 8 (statement -> variable_operation .)
    FALSE           reduce using rule 8 (statement -> variable_operation .)
    TRUE            reduce using rule 8 (statement -> variable_operation .)
    FLOAT           reduce using rule 8 (statement -> variable_operation .)
    INT             reduce using rule 8 (statement -> variable_operation .)
    NULL            reduce using rule 8 (statement -> variable_operation .)
    #               reduce using rule 8 (statement -> variable_operation .)
    NEW             reduce using rule 8 (statement -> variable_operation .)
    PYTHON_CODE_EXEC reduce using rule 8 (statement -> variable_operation .)
    PYTHON_CODE     reduce using rule 8 (statement -> variable_operation .)
    IF              reduce using rule 8 (statement -> variable_operation .)
    $end            reduce using rule 8 (statement -> variable_operation .)
    PHPEND          reduce using rule 8 (statement -> variable_operation .)
    }               reduce using rule 8 (statement -> variable_operation .)


state 9

    (9) statement -> return_statement .
    ?               reduce using rule 9 (statement -> return_statement .)
    (               reduce using rule 9 (statement -> return_statement .)
    !               reduce using rule 9 (statement -> return_statement .)
    +               reduce using rule 9 (statement -> return_statement .)
    -               reduce using rule 9 (statement -> return_statement .)
    *               reduce using rule 9 (statement -> return_statement .)
    &               reduce using rule 9 (statement -> return_statement .)
    ID              reduce using rule 9 (statement -> return_statement .)
    $               reduce using rule 9 (statement -> return_statement .)
    HTMLSTART       reduce using rule 9 (statement -> return_statement .)
    PHPSTART        reduce using rule 9 (statement -> return_statement .)
    LIMPORT         reduce using rule 9 (statement -> return_statement .)
    .               reduce using rule 9 (statement -> return_statement .)
    IMPORT          reduce using rule 9 (statement -> return_statement .)
    RETURN          reduce using rule 9 (statement -> return_statement .)
    DEL             reduce using rule 9 (statement -> return_statement .)
    FOREACH         reduce using rule 9 (statement -> return_statement .)
    FOR             reduce using rule 9 (statement -> return_statement .)
    DEBUG           reduce using rule 9 (statement -> return_statement .)
    SKIP            reduce using rule 9 (statement -> return_statement .)
    BREAK           reduce using rule 9 (statement -> return_statement .)
    LET             reduce using rule 9 (statement -> return_statement .)
    WHILE           reduce using rule 9 (statement -> return_statement .)
    NAMESPACE       reduce using rule 9 (statement -> return_statement .)
    CLASS           reduce using rule 9 (statement -> return_statement .)
    FUNC            reduce using rule 9 (statement -> return_statement .)
    INIT            reduce using rule 9 (statement -> return_statement .)
    [               reduce using rule 9 (statement -> return_statement .)
    {               reduce using rule 9 (statement -> return_statement .)
    STRING          reduce using rule 9 (statement -> return_statement .)
    CHAR            reduce using rule 9 (statement -> return_statement .)
    FALSE           reduce using rule 9 (statement -> return_statement .)
    TRUE            reduce using rule 9 (statement -> return_statement .)
    FLOAT           reduce using rule 9 (statement -> return_statement .)
    INT             reduce using rule 9 (statement -> return_statement .)
    NULL            reduce using rule 9 (statement -> return_statement .)
    #               reduce using rule 9 (statement -> return_statement .)
    NEW             reduce using rule 9 (statement -> return_statement .)
    PYTHON_CODE_EXEC reduce using rule 9 (statement -> return_statement .)
    PYTHON_CODE     reduce using rule 9 (statement -> return_statement .)
    IF              reduce using rule 9 (statement -> return_statement .)
    $end            reduce using rule 9 (statement -> return_statement .)
    PHPEND          reduce using rule 9 (statement -> return_statement .)
    }               reduce using rule 9 (statement -> return_statement .)


state 10

    (10) statement -> delete_statement .
    ?               reduce using rule 10 (statement -> delete_statement .)
    (               reduce using rule 10 (statement -> delete_statement .)
    !               reduce using rule 10 (statement -> delete_statement .)
    +               reduce using rule 10 (statement -> delete_statement .)
    -               reduce using rule 10 (statement -> delete_statement .)
    *               reduce using rule 10 (statement -> delete_statement .)
    &               reduce using rule 10 (statement -> delete_statement .)
    ID              reduce using rule 10 (statement -> delete_statement .)
    $               reduce using rule 10 (statement -> delete_statement .)
    HTMLSTART       reduce using rule 10 (statement -> delete_statement .)
    PHPSTART        reduce using rule 10 (statement -> delete_statement .)
    LIMPORT         reduce using rule 10 (statement -> delete_statement .)
    .               reduce using rule 10 (statement -> delete_statement .)
    IMPORT          reduce using rule 10 (statement -> delete_statement .)
    RETURN          reduce using rule 10 (statement -> delete_statement .)
    DEL             reduce using rule 10 (statement -> delete_statement .)
    FOREACH         reduce using rule 10 (statement -> delete_statement .)
    FOR             reduce using rule 10 (statement -> delete_statement .)
    DEBUG           reduce using rule 10 (statement -> delete_statement .)
    SKIP            reduce using rule 10 (statement -> delete_statement .)
    BREAK           reduce using rule 10 (statement -> delete_statement .)
    LET             reduce using rule 10 (statement -> delete_statement .)
    WHILE           reduce using rule 10 (statement -> delete_statement .)
    NAMESPACE       reduce using rule 10 (statement -> delete_statement .)
    CLASS           reduce using rule 10 (statement -> delete_statement .)
    FUNC            reduce using rule 10 (statement -> delete_statement .)
    INIT            reduce using rule 10 (statement -> delete_statement .)
    [               reduce using rule 10 (statement -> delete_statement .)
    {               reduce using rule 10 (statement -> delete_statement .)
    STRING          reduce using rule 10 (statement -> delete_statement .)
    CHAR            reduce using rule 10 (statement -> delete_statement .)
    FALSE           reduce using rule 10 (statement -> delete_statement .)
    TRUE            reduce using rule 10 (statement -> delete_statement .)
    FLOAT           reduce using rule 10 (statement -> delete_statement .)
    INT             reduce using rule 10 (statement -> delete_statement .)
    NULL            reduce using rule 10 (statement -> delete_statement .)
    #               reduce using rule 10 (statement -> delete_statement .)
    NEW             reduce using rule 10 (statement -> delete_statement .)
    PYTHON_CODE_EXEC reduce using rule 10 (statement -> delete_statement .)
    PYTHON_CODE     reduce using rule 10 (statement -> delete_statement .)
    IF              reduce using rule 10 (statement -> delete_statement .)
    $end            reduce using rule 10 (statement -> delete_statement .)
    PHPEND          reduce using rule 10 (statement -> delete_statement .)
    }               reduce using rule 10 (statement -> delete_statement .)


state 11

    (11) statement -> for_loop .
    ?               reduce using rule 11 (statement -> for_loop .)
    (               reduce using rule 11 (statement -> for_loop .)
    !               reduce using rule 11 (statement -> for_loop .)
    +               reduce using rule 11 (statement -> for_loop .)
    -               reduce using rule 11 (statement -> for_loop .)
    *               reduce using rule 11 (statement -> for_loop .)
    &               reduce using rule 11 (statement -> for_loop .)
    ID              reduce using rule 11 (statement -> for_loop .)
    $               reduce using rule 11 (statement -> for_loop .)
    HTMLSTART       reduce using rule 11 (statement -> for_loop .)
    PHPSTART        reduce using rule 11 (statement -> for_loop .)
    LIMPORT         reduce using rule 11 (statement -> for_loop .)
    .               reduce using rule 11 (statement -> for_loop .)
    IMPORT          reduce using rule 11 (statement -> for_loop .)
    RETURN          reduce using rule 11 (statement -> for_loop .)
    DEL             reduce using rule 11 (statement -> for_loop .)
    FOREACH         reduce using rule 11 (statement -> for_loop .)
    FOR             reduce using rule 11 (statement -> for_loop .)
    DEBUG           reduce using rule 11 (statement -> for_loop .)
    SKIP            reduce using rule 11 (statement -> for_loop .)
    BREAK           reduce using rule 11 (statement -> for_loop .)
    LET             reduce using rule 11 (statement -> for_loop .)
    WHILE           reduce using rule 11 (statement -> for_loop .)
    NAMESPACE       reduce using rule 11 (statement -> for_loop .)
    CLASS           reduce using rule 11 (statement -> for_loop .)
    FUNC            reduce using rule 11 (statement -> for_loop .)
    INIT            reduce using rule 11 (statement -> for_loop .)
    [               reduce using rule 11 (statement -> for_loop .)
    {               reduce using rule 11 (statement -> for_loop .)
    STRING          reduce using rule 11 (statement -> for_loop .)
    CHAR            reduce using rule 11 (statement -> for_loop .)
    FALSE           reduce using rule 11 (statement -> for_loop .)
    TRUE            reduce using rule 11 (statement -> for_loop .)
    FLOAT           reduce using rule 11 (statement -> for_loop .)
    INT             reduce using rule 11 (statement -> for_loop .)
    NULL            reduce using rule 11 (statement -> for_loop .)
    #               reduce using rule 11 (statement -> for_loop .)
    NEW             reduce using rule 11 (statement -> for_loop .)
    PYTHON_CODE_EXEC reduce using rule 11 (statement -> for_loop .)
    PYTHON_CODE     reduce using rule 11 (statement -> for_loop .)
    IF              reduce using rule 11 (statement -> for_loop .)
    $end            reduce using rule 11 (statement -> for_loop .)
    PHPEND          reduce using rule 11 (statement -> for_loop .)
    }               reduce using rule 11 (statement -> for_loop .)


state 12

    (12) statement -> break_statement .
    ?               reduce using rule 12 (statement -> break_statement .)
    (               reduce using rule 12 (statement -> break_statement .)
    !               reduce using rule 12 (statement -> break_statement .)
    +               reduce using rule 12 (statement -> break_statement .)
    -               reduce using rule 12 (statement -> break_statement .)
    *               reduce using rule 12 (statement -> break_statement .)
    &               reduce using rule 12 (statement -> break_statement .)
    ID              reduce using rule 12 (statement -> break_statement .)
    $               reduce using rule 12 (statement -> break_statement .)
    HTMLSTART       reduce using rule 12 (statement -> break_statement .)
    PHPSTART        reduce using rule 12 (statement -> break_statement .)
    LIMPORT         reduce using rule 12 (statement -> break_statement .)
    .               reduce using rule 12 (statement -> break_statement .)
    IMPORT          reduce using rule 12 (statement -> break_statement .)
    RETURN          reduce using rule 12 (statement -> break_statement .)
    DEL             reduce using rule 12 (statement -> break_statement .)
    FOREACH         reduce using rule 12 (statement -> break_statement .)
    FOR             reduce using rule 12 (statement -> break_statement .)
    DEBUG           reduce using rule 12 (statement -> break_statement .)
    SKIP            reduce using rule 12 (statement -> break_statement .)
    BREAK           reduce using rule 12 (statement -> break_statement .)
    LET             reduce using rule 12 (statement -> break_statement .)
    WHILE           reduce using rule 12 (statement -> break_statement .)
    NAMESPACE       reduce using rule 12 (statement -> break_statement .)
    CLASS           reduce using rule 12 (statement -> break_statement .)
    FUNC            reduce using rule 12 (statement -> break_statement .)
    INIT            reduce using rule 12 (statement -> break_statement .)
    [               reduce using rule 12 (statement -> break_statement .)
    {               reduce using rule 12 (statement -> break_statement .)
    STRING          reduce using rule 12 (statement -> break_statement .)
    CHAR            reduce using rule 12 (statement -> break_statement .)
    FALSE           reduce using rule 12 (statement -> break_statement .)
    TRUE            reduce using rule 12 (statement -> break_statement .)
    FLOAT           reduce using rule 12 (statement -> break_statement .)
    INT             reduce using rule 12 (statement -> break_statement .)
    NULL            reduce using rule 12 (statement -> break_statement .)
    #               reduce using rule 12 (statement -> break_statement .)
    NEW             reduce using rule 12 (statement -> break_statement .)
    PYTHON_CODE_EXEC reduce using rule 12 (statement -> break_statement .)
    PYTHON_CODE     reduce using rule 12 (statement -> break_statement .)
    IF              reduce using rule 12 (statement -> break_statement .)
    $end            reduce using rule 12 (statement -> break_statement .)
    PHPEND          reduce using rule 12 (statement -> break_statement .)
    }               reduce using rule 12 (statement -> break_statement .)


state 13

    (13) statement -> variable_assignment .
    ?               reduce using rule 13 (statement -> variable_assignment .)
    (               reduce using rule 13 (statement -> variable_assignment .)
    !               reduce using rule 13 (statement -> variable_assignment .)
    +               reduce using rule 13 (statement -> variable_assignment .)
    -               reduce using rule 13 (statement -> variable_assignment .)
    *               reduce using rule 13 (statement -> variable_assignment .)
    &               reduce using rule 13 (statement -> variable_assignment .)
    ID              reduce using rule 13 (statement -> variable_assignment .)
    $               reduce using rule 13 (statement -> variable_assignment .)
    HTMLSTART       reduce using rule 13 (statement -> variable_assignment .)
    PHPSTART        reduce using rule 13 (statement -> variable_assignment .)
    LIMPORT         reduce using rule 13 (statement -> variable_assignment .)
    .               reduce using rule 13 (statement -> variable_assignment .)
    IMPORT          reduce using rule 13 (statement -> variable_assignment .)
    RETURN          reduce using rule 13 (statement -> variable_assignment .)
    DEL             reduce using rule 13 (statement -> variable_assignment .)
    FOREACH         reduce using rule 13 (statement -> variable_assignment .)
    FOR             reduce using rule 13 (statement -> variable_assignment .)
    DEBUG           reduce using rule 13 (statement -> variable_assignment .)
    SKIP            reduce using rule 13 (statement -> variable_assignment .)
    BREAK           reduce using rule 13 (statement -> variable_assignment .)
    LET             reduce using rule 13 (statement -> variable_assignment .)
    WHILE           reduce using rule 13 (statement -> variable_assignment .)
    NAMESPACE       reduce using rule 13 (statement -> variable_assignment .)
    CLASS           reduce using rule 13 (statement -> variable_assignment .)
    FUNC            reduce using rule 13 (statement -> variable_assignment .)
    INIT            reduce using rule 13 (statement -> variable_assignment .)
    [               reduce using rule 13 (statement -> variable_assignment .)
    {               reduce using rule 13 (statement -> variable_assignment .)
    STRING          reduce using rule 13 (statement -> variable_assignment .)
    CHAR            reduce using rule 13 (statement -> variable_assignment .)
    FALSE           reduce using rule 13 (statement -> variable_assignment .)
    TRUE            reduce using rule 13 (statement -> variable_assignment .)
    FLOAT           reduce using rule 13 (statement -> variable_assignment .)
    INT             reduce using rule 13 (statement -> variable_assignment .)
    NULL            reduce using rule 13 (statement -> variable_assignment .)
    #               reduce using rule 13 (statement -> variable_assignment .)
    NEW             reduce using rule 13 (statement -> variable_assignment .)
    PYTHON_CODE_EXEC reduce using rule 13 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 13 (statement -> variable_assignment .)
    IF              reduce using rule 13 (statement -> variable_assignment .)
    $end            reduce using rule 13 (statement -> variable_assignment .)
    PHPEND          reduce using rule 13 (statement -> variable_assignment .)
    }               reduce using rule 13 (statement -> variable_assignment .)


state 14

    (14) statement -> python_code_statement .
    ?               reduce using rule 14 (statement -> python_code_statement .)
    (               reduce using rule 14 (statement -> python_code_statement .)
    !               reduce using rule 14 (statement -> python_code_statement .)
    +               reduce using rule 14 (statement -> python_code_statement .)
    -               reduce using rule 14 (statement -> python_code_statement .)
    *               reduce using rule 14 (statement -> python_code_statement .)
    &               reduce using rule 14 (statement -> python_code_statement .)
    ID              reduce using rule 14 (statement -> python_code_statement .)
    $               reduce using rule 14 (statement -> python_code_statement .)
    HTMLSTART       reduce using rule 14 (statement -> python_code_statement .)
    PHPSTART        reduce using rule 14 (statement -> python_code_statement .)
    LIMPORT         reduce using rule 14 (statement -> python_code_statement .)
    .               reduce using rule 14 (statement -> python_code_statement .)
    IMPORT          reduce using rule 14 (statement -> python_code_statement .)
    RETURN          reduce using rule 14 (statement -> python_code_statement .)
    DEL             reduce using rule 14 (statement -> python_code_statement .)
    FOREACH         reduce using rule 14 (statement -> python_code_statement .)
    FOR             reduce using rule 14 (statement -> python_code_statement .)
    DEBUG           reduce using rule 14 (statement -> python_code_statement .)
    SKIP            reduce using rule 14 (statement -> python_code_statement .)
    BREAK           reduce using rule 14 (statement -> python_code_statement .)
    LET             reduce using rule 14 (statement -> python_code_statement .)
    WHILE           reduce using rule 14 (statement -> python_code_statement .)
    NAMESPACE       reduce using rule 14 (statement -> python_code_statement .)
    CLASS           reduce using rule 14 (statement -> python_code_statement .)
    FUNC            reduce using rule 14 (statement -> python_code_statement .)
    INIT            reduce using rule 14 (statement -> python_code_statement .)
    [               reduce using rule 14 (statement -> python_code_statement .)
    {               reduce using rule 14 (statement -> python_code_statement .)
    STRING          reduce using rule 14 (statement -> python_code_statement .)
    CHAR            reduce using rule 14 (statement -> python_code_statement .)
    FALSE           reduce using rule 14 (statement -> python_code_statement .)
    TRUE            reduce using rule 14 (statement -> python_code_statement .)
    FLOAT           reduce using rule 14 (statement -> python_code_statement .)
    INT             reduce using rule 14 (statement -> python_code_statement .)
    NULL            reduce using rule 14 (statement -> python_code_statement .)
    #               reduce using rule 14 (statement -> python_code_statement .)
    NEW             reduce using rule 14 (statement -> python_code_statement .)
    PYTHON_CODE_EXEC reduce using rule 14 (statement -> python_code_statement .)
    PYTHON_CODE     reduce using rule 14 (statement -> python_code_statement .)
    IF              reduce using rule 14 (statement -> python_code_statement .)
    $end            reduce using rule 14 (statement -> python_code_statement .)
    PHPEND          reduce using rule 14 (statement -> python_code_statement .)
    }               reduce using rule 14 (statement -> python_code_statement .)


state 15

    (15) statement -> while_loop .
    ?               reduce using rule 15 (statement -> while_loop .)
    (               reduce using rule 15 (statement -> while_loop .)
    !               reduce using rule 15 (statement -> while_loop .)
    +               reduce using rule 15 (statement -> while_loop .)
    -               reduce using rule 15 (statement -> while_loop .)
    *               reduce using rule 15 (statement -> while_loop .)
    &               reduce using rule 15 (statement -> while_loop .)
    ID              reduce using rule 15 (statement -> while_loop .)
    $               reduce using rule 15 (statement -> while_loop .)
    HTMLSTART       reduce using rule 15 (statement -> while_loop .)
    PHPSTART        reduce using rule 15 (statement -> while_loop .)
    LIMPORT         reduce using rule 15 (statement -> while_loop .)
    .               reduce using rule 15 (statement -> while_loop .)
    IMPORT          reduce using rule 15 (statement -> while_loop .)
    RETURN          reduce using rule 15 (statement -> while_loop .)
    DEL             reduce using rule 15 (statement -> while_loop .)
    FOREACH         reduce using rule 15 (statement -> while_loop .)
    FOR             reduce using rule 15 (statement -> while_loop .)
    DEBUG           reduce using rule 15 (statement -> while_loop .)
    SKIP            reduce using rule 15 (statement -> while_loop .)
    BREAK           reduce using rule 15 (statement -> while_loop .)
    LET             reduce using rule 15 (statement -> while_loop .)
    WHILE           reduce using rule 15 (statement -> while_loop .)
    NAMESPACE       reduce using rule 15 (statement -> while_loop .)
    CLASS           reduce using rule 15 (statement -> while_loop .)
    FUNC            reduce using rule 15 (statement -> while_loop .)
    INIT            reduce using rule 15 (statement -> while_loop .)
    [               reduce using rule 15 (statement -> while_loop .)
    {               reduce using rule 15 (statement -> while_loop .)
    STRING          reduce using rule 15 (statement -> while_loop .)
    CHAR            reduce using rule 15 (statement -> while_loop .)
    FALSE           reduce using rule 15 (statement -> while_loop .)
    TRUE            reduce using rule 15 (statement -> while_loop .)
    FLOAT           reduce using rule 15 (statement -> while_loop .)
    INT             reduce using rule 15 (statement -> while_loop .)
    NULL            reduce using rule 15 (statement -> while_loop .)
    #               reduce using rule 15 (statement -> while_loop .)
    NEW             reduce using rule 15 (statement -> while_loop .)
    PYTHON_CODE_EXEC reduce using rule 15 (statement -> while_loop .)
    PYTHON_CODE     reduce using rule 15 (statement -> while_loop .)
    IF              reduce using rule 15 (statement -> while_loop .)
    $end            reduce using rule 15 (statement -> while_loop .)
    PHPEND          reduce using rule 15 (statement -> while_loop .)
    }               reduce using rule 15 (statement -> while_loop .)


state 16

    (16) statement -> conditional .
    ?               reduce using rule 16 (statement -> conditional .)
    (               reduce using rule 16 (statement -> conditional .)
    !               reduce using rule 16 (statement -> conditional .)
    +               reduce using rule 16 (statement -> conditional .)
    -               reduce using rule 16 (statement -> conditional .)
    *               reduce using rule 16 (statement -> conditional .)
    &               reduce using rule 16 (statement -> conditional .)
    ID              reduce using rule 16 (statement -> conditional .)
    $               reduce using rule 16 (statement -> conditional .)
    HTMLSTART       reduce using rule 16 (statement -> conditional .)
    PHPSTART        reduce using rule 16 (statement -> conditional .)
    LIMPORT         reduce using rule 16 (statement -> conditional .)
    .               reduce using rule 16 (statement -> conditional .)
    IMPORT          reduce using rule 16 (statement -> conditional .)
    RETURN          reduce using rule 16 (statement -> conditional .)
    DEL             reduce using rule 16 (statement -> conditional .)
    FOREACH         reduce using rule 16 (statement -> conditional .)
    FOR             reduce using rule 16 (statement -> conditional .)
    DEBUG           reduce using rule 16 (statement -> conditional .)
    SKIP            reduce using rule 16 (statement -> conditional .)
    BREAK           reduce using rule 16 (statement -> conditional .)
    LET             reduce using rule 16 (statement -> conditional .)
    WHILE           reduce using rule 16 (statement -> conditional .)
    NAMESPACE       reduce using rule 16 (statement -> conditional .)
    CLASS           reduce using rule 16 (statement -> conditional .)
    FUNC            reduce using rule 16 (statement -> conditional .)
    INIT            reduce using rule 16 (statement -> conditional .)
    [               reduce using rule 16 (statement -> conditional .)
    {               reduce using rule 16 (statement -> conditional .)
    STRING          reduce using rule 16 (statement -> conditional .)
    CHAR            reduce using rule 16 (statement -> conditional .)
    FALSE           reduce using rule 16 (statement -> conditional .)
    TRUE            reduce using rule 16 (statement -> conditional .)
    FLOAT           reduce using rule 16 (statement -> conditional .)
    INT             reduce using rule 16 (statement -> conditional .)
    NULL            reduce using rule 16 (statement -> conditional .)
    #               reduce using rule 16 (statement -> conditional .)
    NEW             reduce using rule 16 (statement -> conditional .)
    PYTHON_CODE_EXEC reduce using rule 16 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 16 (statement -> conditional .)
    IF              reduce using rule 16 (statement -> conditional .)
    $end            reduce using rule 16 (statement -> conditional .)
    PHPEND          reduce using rule 16 (statement -> conditional .)
    }               reduce using rule 16 (statement -> conditional .)


state 17

    (17) statement -> function_call_statement .
    ?               reduce using rule 17 (statement -> function_call_statement .)
    (               reduce using rule 17 (statement -> function_call_statement .)
    !               reduce using rule 17 (statement -> function_call_statement .)
    +               reduce using rule 17 (statement -> function_call_statement .)
    -               reduce using rule 17 (statement -> function_call_statement .)
    *               reduce using rule 17 (statement -> function_call_statement .)
    &               reduce using rule 17 (statement -> function_call_statement .)
    ID              reduce using rule 17 (statement -> function_call_statement .)
    $               reduce using rule 17 (statement -> function_call_statement .)
    HTMLSTART       reduce using rule 17 (statement -> function_call_statement .)
    PHPSTART        reduce using rule 17 (statement -> function_call_statement .)
    LIMPORT         reduce using rule 17 (statement -> function_call_statement .)
    .               reduce using rule 17 (statement -> function_call_statement .)
    IMPORT          reduce using rule 17 (statement -> function_call_statement .)
    RETURN          reduce using rule 17 (statement -> function_call_statement .)
    DEL             reduce using rule 17 (statement -> function_call_statement .)
    FOREACH         reduce using rule 17 (statement -> function_call_statement .)
    FOR             reduce using rule 17 (statement -> function_call_statement .)
    DEBUG           reduce using rule 17 (statement -> function_call_statement .)
    SKIP            reduce using rule 17 (statement -> function_call_statement .)
    BREAK           reduce using rule 17 (statement -> function_call_statement .)
    LET             reduce using rule 17 (statement -> function_call_statement .)
    WHILE           reduce using rule 17 (statement -> function_call_statement .)
    NAMESPACE       reduce using rule 17 (statement -> function_call_statement .)
    CLASS           reduce using rule 17 (statement -> function_call_statement .)
    FUNC            reduce using rule 17 (statement -> function_call_statement .)
    INIT            reduce using rule 17 (statement -> function_call_statement .)
    [               reduce using rule 17 (statement -> function_call_statement .)
    {               reduce using rule 17 (statement -> function_call_statement .)
    STRING          reduce using rule 17 (statement -> function_call_statement .)
    CHAR            reduce using rule 17 (statement -> function_call_statement .)
    FALSE           reduce using rule 17 (statement -> function_call_statement .)
    TRUE            reduce using rule 17 (statement -> function_call_statement .)
    FLOAT           reduce using rule 17 (statement -> function_call_statement .)
    INT             reduce using rule 17 (statement -> function_call_statement .)
    NULL            reduce using rule 17 (statement -> function_call_statement .)
    #               reduce using rule 17 (statement -> function_call_statement .)
    NEW             reduce using rule 17 (statement -> function_call_statement .)
    PYTHON_CODE_EXEC reduce using rule 17 (statement -> function_call_statement .)
    PYTHON_CODE     reduce using rule 17 (statement -> function_call_statement .)
    IF              reduce using rule 17 (statement -> function_call_statement .)
    $end            reduce using rule 17 (statement -> function_call_statement .)
    PHPEND          reduce using rule 17 (statement -> function_call_statement .)
    }               reduce using rule 17 (statement -> function_call_statement .)


state 18

    (18) statement -> class_declaration .
    ?               reduce using rule 18 (statement -> class_declaration .)
    (               reduce using rule 18 (statement -> class_declaration .)
    !               reduce using rule 18 (statement -> class_declaration .)
    +               reduce using rule 18 (statement -> class_declaration .)
    -               reduce using rule 18 (statement -> class_declaration .)
    *               reduce using rule 18 (statement -> class_declaration .)
    &               reduce using rule 18 (statement -> class_declaration .)
    ID              reduce using rule 18 (statement -> class_declaration .)
    $               reduce using rule 18 (statement -> class_declaration .)
    HTMLSTART       reduce using rule 18 (statement -> class_declaration .)
    PHPSTART        reduce using rule 18 (statement -> class_declaration .)
    LIMPORT         reduce using rule 18 (statement -> class_declaration .)
    .               reduce using rule 18 (statement -> class_declaration .)
    IMPORT          reduce using rule 18 (statement -> class_declaration .)
    RETURN          reduce using rule 18 (statement -> class_declaration .)
    DEL             reduce using rule 18 (statement -> class_declaration .)
    FOREACH         reduce using rule 18 (statement -> class_declaration .)
    FOR             reduce using rule 18 (statement -> class_declaration .)
    DEBUG           reduce using rule 18 (statement -> class_declaration .)
    SKIP            reduce using rule 18 (statement -> class_declaration .)
    BREAK           reduce using rule 18 (statement -> class_declaration .)
    LET             reduce using rule 18 (statement -> class_declaration .)
    WHILE           reduce using rule 18 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 18 (statement -> class_declaration .)
    CLASS           reduce using rule 18 (statement -> class_declaration .)
    FUNC            reduce using rule 18 (statement -> class_declaration .)
    INIT            reduce using rule 18 (statement -> class_declaration .)
    [               reduce using rule 18 (statement -> class_declaration .)
    {               reduce using rule 18 (statement -> class_declaration .)
    STRING          reduce using rule 18 (statement -> class_declaration .)
    CHAR            reduce using rule 18 (statement -> class_declaration .)
    FALSE           reduce using rule 18 (statement -> class_declaration .)
    TRUE            reduce using rule 18 (statement -> class_declaration .)
    FLOAT           reduce using rule 18 (statement -> class_declaration .)
    INT             reduce using rule 18 (statement -> class_declaration .)
    NULL            reduce using rule 18 (statement -> class_declaration .)
    #               reduce using rule 18 (statement -> class_declaration .)
    NEW             reduce using rule 18 (statement -> class_declaration .)
    PYTHON_CODE_EXEC reduce using rule 18 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 18 (statement -> class_declaration .)
    IF              reduce using rule 18 (statement -> class_declaration .)
    $end            reduce using rule 18 (statement -> class_declaration .)
    PHPEND          reduce using rule 18 (statement -> class_declaration .)
    }               reduce using rule 18 (statement -> class_declaration .)


state 19

    (19) statement -> function_declaration .
    ?               reduce using rule 19 (statement -> function_declaration .)
    (               reduce using rule 19 (statement -> function_declaration .)
    !               reduce using rule 19 (statement -> function_declaration .)
    +               reduce using rule 19 (statement -> function_declaration .)
    -               reduce using rule 19 (statement -> function_declaration .)
    *               reduce using rule 19 (statement -> function_declaration .)
    &               reduce using rule 19 (statement -> function_declaration .)
    ID              reduce using rule 19 (statement -> function_declaration .)
    $               reduce using rule 19 (statement -> function_declaration .)
    HTMLSTART       reduce using rule 19 (statement -> function_declaration .)
    PHPSTART        reduce using rule 19 (statement -> function_declaration .)
    LIMPORT         reduce using rule 19 (statement -> function_declaration .)
    .               reduce using rule 19 (statement -> function_declaration .)
    IMPORT          reduce using rule 19 (statement -> function_declaration .)
    RETURN          reduce using rule 19 (statement -> function_declaration .)
    DEL             reduce using rule 19 (statement -> function_declaration .)
    FOREACH         reduce using rule 19 (statement -> function_declaration .)
    FOR             reduce using rule 19 (statement -> function_declaration .)
    DEBUG           reduce using rule 19 (statement -> function_declaration .)
    SKIP            reduce using rule 19 (statement -> function_declaration .)
    BREAK           reduce using rule 19 (statement -> function_declaration .)
    LET             reduce using rule 19 (statement -> function_declaration .)
    WHILE           reduce using rule 19 (statement -> function_declaration .)
    NAMESPACE       reduce using rule 19 (statement -> function_declaration .)
    CLASS           reduce using rule 19 (statement -> function_declaration .)
    FUNC            reduce using rule 19 (statement -> function_declaration .)
    INIT            reduce using rule 19 (statement -> function_declaration .)
    [               reduce using rule 19 (statement -> function_declaration .)
    {               reduce using rule 19 (statement -> function_declaration .)
    STRING          reduce using rule 19 (statement -> function_declaration .)
    CHAR            reduce using rule 19 (statement -> function_declaration .)
    FALSE           reduce using rule 19 (statement -> function_declaration .)
    TRUE            reduce using rule 19 (statement -> function_declaration .)
    FLOAT           reduce using rule 19 (statement -> function_declaration .)
    INT             reduce using rule 19 (statement -> function_declaration .)
    NULL            reduce using rule 19 (statement -> function_declaration .)
    #               reduce using rule 19 (statement -> function_declaration .)
    NEW             reduce using rule 19 (statement -> function_declaration .)
    PYTHON_CODE_EXEC reduce using rule 19 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 19 (statement -> function_declaration .)
    IF              reduce using rule 19 (statement -> function_declaration .)
    $end            reduce using rule 19 (statement -> function_declaration .)
    PHPEND          reduce using rule 19 (statement -> function_declaration .)
    }               reduce using rule 19 (statement -> function_declaration .)


state 20

    (22) expression -> assoc_array .
    >               reduce using rule 22 (expression -> assoc_array .)
    <               reduce using rule 22 (expression -> assoc_array .)
    &               reduce using rule 22 (expression -> assoc_array .)
    |               reduce using rule 22 (expression -> assoc_array .)
    EQ_GREATER      reduce using rule 22 (expression -> assoc_array .)
    EQ_LESS         reduce using rule 22 (expression -> assoc_array .)
    NOT_EQEQ        reduce using rule 22 (expression -> assoc_array .)
    EQEQ            reduce using rule 22 (expression -> assoc_array .)
    %               reduce using rule 22 (expression -> assoc_array .)
    *               reduce using rule 22 (expression -> assoc_array .)
    /               reduce using rule 22 (expression -> assoc_array .)
    -               reduce using rule 22 (expression -> assoc_array .)
    +               reduce using rule 22 (expression -> assoc_array .)
    .               reduce using rule 22 (expression -> assoc_array .)
    COLON_COLON     reduce using rule 22 (expression -> assoc_array .)
    ^               reduce using rule 22 (expression -> assoc_array .)
    [               reduce using rule 22 (expression -> assoc_array .)
    (               reduce using rule 22 (expression -> assoc_array .)
    $               reduce using rule 22 (expression -> assoc_array .)
    ID              reduce using rule 22 (expression -> assoc_array .)
    !               reduce using rule 22 (expression -> assoc_array .)
    ?               reduce using rule 22 (expression -> assoc_array .)
    HTMLSTART       reduce using rule 22 (expression -> assoc_array .)
    {               reduce using rule 22 (expression -> assoc_array .)
    STRING          reduce using rule 22 (expression -> assoc_array .)
    CHAR            reduce using rule 22 (expression -> assoc_array .)
    FALSE           reduce using rule 22 (expression -> assoc_array .)
    TRUE            reduce using rule 22 (expression -> assoc_array .)
    FLOAT           reduce using rule 22 (expression -> assoc_array .)
    INT             reduce using rule 22 (expression -> assoc_array .)
    NULL            reduce using rule 22 (expression -> assoc_array .)
    #               reduce using rule 22 (expression -> assoc_array .)
    NEW             reduce using rule 22 (expression -> assoc_array .)
    PYTHON_CODE_EXEC reduce using rule 22 (expression -> assoc_array .)
    PYTHON_CODE     reduce using rule 22 (expression -> assoc_array .)
    PHPSTART        reduce using rule 22 (expression -> assoc_array .)
    LIMPORT         reduce using rule 22 (expression -> assoc_array .)
    IMPORT          reduce using rule 22 (expression -> assoc_array .)
    RETURN          reduce using rule 22 (expression -> assoc_array .)
    DEL             reduce using rule 22 (expression -> assoc_array .)
    FOREACH         reduce using rule 22 (expression -> assoc_array .)
    FOR             reduce using rule 22 (expression -> assoc_array .)
    DEBUG           reduce using rule 22 (expression -> assoc_array .)
    SKIP            reduce using rule 22 (expression -> assoc_array .)
    BREAK           reduce using rule 22 (expression -> assoc_array .)
    LET             reduce using rule 22 (expression -> assoc_array .)
    WHILE           reduce using rule 22 (expression -> assoc_array .)
    NAMESPACE       reduce using rule 22 (expression -> assoc_array .)
    CLASS           reduce using rule 22 (expression -> assoc_array .)
    FUNC            reduce using rule 22 (expression -> assoc_array .)
    INIT            reduce using rule 22 (expression -> assoc_array .)
    IF              reduce using rule 22 (expression -> assoc_array .)
    $end            reduce using rule 22 (expression -> assoc_array .)
    ;               reduce using rule 22 (expression -> assoc_array .)
    ,               reduce using rule 22 (expression -> assoc_array .)
    PHPEND          reduce using rule 22 (expression -> assoc_array .)
    }               reduce using rule 22 (expression -> assoc_array .)
    )               reduce using rule 22 (expression -> assoc_array .)
    HTMLEND         reduce using rule 22 (expression -> assoc_array .)
    SARROW          reduce using rule 22 (expression -> assoc_array .)
    ]               reduce using rule 22 (expression -> assoc_array .)
    EQ_DIV          reduce using rule 22 (expression -> assoc_array .)
    EQ_MOD          reduce using rule 22 (expression -> assoc_array .)
    EQ_MUL          reduce using rule 22 (expression -> assoc_array .)
    EQ_SUB          reduce using rule 22 (expression -> assoc_array .)
    EQ_ADD          reduce using rule 22 (expression -> assoc_array .)
    =               reduce using rule 22 (expression -> assoc_array .)
    AS              reduce using rule 22 (expression -> assoc_array .)


state 21

    (23) expression -> _numpy .
    >               reduce using rule 23 (expression -> _numpy .)
    <               reduce using rule 23 (expression -> _numpy .)
    &               reduce using rule 23 (expression -> _numpy .)
    |               reduce using rule 23 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 23 (expression -> _numpy .)
    EQ_LESS         reduce using rule 23 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 23 (expression -> _numpy .)
    EQEQ            reduce using rule 23 (expression -> _numpy .)
    %               reduce using rule 23 (expression -> _numpy .)
    *               reduce using rule 23 (expression -> _numpy .)
    /               reduce using rule 23 (expression -> _numpy .)
    -               reduce using rule 23 (expression -> _numpy .)
    +               reduce using rule 23 (expression -> _numpy .)
    .               reduce using rule 23 (expression -> _numpy .)
    COLON_COLON     reduce using rule 23 (expression -> _numpy .)
    ^               reduce using rule 23 (expression -> _numpy .)
    [               reduce using rule 23 (expression -> _numpy .)
    (               reduce using rule 23 (expression -> _numpy .)
    $               reduce using rule 23 (expression -> _numpy .)
    ID              reduce using rule 23 (expression -> _numpy .)
    !               reduce using rule 23 (expression -> _numpy .)
    ?               reduce using rule 23 (expression -> _numpy .)
    HTMLSTART       reduce using rule 23 (expression -> _numpy .)
    {               reduce using rule 23 (expression -> _numpy .)
    STRING          reduce using rule 23 (expression -> _numpy .)
    CHAR            reduce using rule 23 (expression -> _numpy .)
    FALSE           reduce using rule 23 (expression -> _numpy .)
    TRUE            reduce using rule 23 (expression -> _numpy .)
    FLOAT           reduce using rule 23 (expression -> _numpy .)
    INT             reduce using rule 23 (expression -> _numpy .)
    NULL            reduce using rule 23 (expression -> _numpy .)
    #               reduce using rule 23 (expression -> _numpy .)
    NEW             reduce using rule 23 (expression -> _numpy .)
    PYTHON_CODE_EXEC reduce using rule 23 (expression -> _numpy .)
    PYTHON_CODE     reduce using rule 23 (expression -> _numpy .)
    PHPSTART        reduce using rule 23 (expression -> _numpy .)
    LIMPORT         reduce using rule 23 (expression -> _numpy .)
    IMPORT          reduce using rule 23 (expression -> _numpy .)
    RETURN          reduce using rule 23 (expression -> _numpy .)
    DEL             reduce using rule 23 (expression -> _numpy .)
    FOREACH         reduce using rule 23 (expression -> _numpy .)
    FOR             reduce using rule 23 (expression -> _numpy .)
    DEBUG           reduce using rule 23 (expression -> _numpy .)
    SKIP            reduce using rule 23 (expression -> _numpy .)
    BREAK           reduce using rule 23 (expression -> _numpy .)
    LET             reduce using rule 23 (expression -> _numpy .)
    WHILE           reduce using rule 23 (expression -> _numpy .)
    NAMESPACE       reduce using rule 23 (expression -> _numpy .)
    CLASS           reduce using rule 23 (expression -> _numpy .)
    FUNC            reduce using rule 23 (expression -> _numpy .)
    INIT            reduce using rule 23 (expression -> _numpy .)
    IF              reduce using rule 23 (expression -> _numpy .)
    $end            reduce using rule 23 (expression -> _numpy .)
    ;               reduce using rule 23 (expression -> _numpy .)
    ,               reduce using rule 23 (expression -> _numpy .)
    PHPEND          reduce using rule 23 (expression -> _numpy .)
    }               reduce using rule 23 (expression -> _numpy .)
    )               reduce using rule 23 (expression -> _numpy .)
    HTMLEND         reduce using rule 23 (expression -> _numpy .)
    SARROW          reduce using rule 23 (expression -> _numpy .)
    ]               reduce using rule 23 (expression -> _numpy .)
    EQ_DIV          reduce using rule 23 (expression -> _numpy .)
    EQ_MOD          reduce using rule 23 (expression -> _numpy .)
    EQ_MUL          reduce using rule 23 (expression -> _numpy .)
    EQ_SUB          reduce using rule 23 (expression -> _numpy .)
    EQ_ADD          reduce using rule 23 (expression -> _numpy .)
    =               reduce using rule 23 (expression -> _numpy .)
    AS              reduce using rule 23 (expression -> _numpy .)


state 22

    (24) expression -> _list .
    >               reduce using rule 24 (expression -> _list .)
    <               reduce using rule 24 (expression -> _list .)
    &               reduce using rule 24 (expression -> _list .)
    |               reduce using rule 24 (expression -> _list .)
    EQ_GREATER      reduce using rule 24 (expression -> _list .)
    EQ_LESS         reduce using rule 24 (expression -> _list .)
    NOT_EQEQ        reduce using rule 24 (expression -> _list .)
    EQEQ            reduce using rule 24 (expression -> _list .)
    %               reduce using rule 24 (expression -> _list .)
    *               reduce using rule 24 (expression -> _list .)
    /               reduce using rule 24 (expression -> _list .)
    -               reduce using rule 24 (expression -> _list .)
    +               reduce using rule 24 (expression -> _list .)
    .               reduce using rule 24 (expression -> _list .)
    COLON_COLON     reduce using rule 24 (expression -> _list .)
    ^               reduce using rule 24 (expression -> _list .)
    [               reduce using rule 24 (expression -> _list .)
    (               reduce using rule 24 (expression -> _list .)
    $               reduce using rule 24 (expression -> _list .)
    ID              reduce using rule 24 (expression -> _list .)
    !               reduce using rule 24 (expression -> _list .)
    ?               reduce using rule 24 (expression -> _list .)
    HTMLSTART       reduce using rule 24 (expression -> _list .)
    {               reduce using rule 24 (expression -> _list .)
    STRING          reduce using rule 24 (expression -> _list .)
    CHAR            reduce using rule 24 (expression -> _list .)
    FALSE           reduce using rule 24 (expression -> _list .)
    TRUE            reduce using rule 24 (expression -> _list .)
    FLOAT           reduce using rule 24 (expression -> _list .)
    INT             reduce using rule 24 (expression -> _list .)
    NULL            reduce using rule 24 (expression -> _list .)
    #               reduce using rule 24 (expression -> _list .)
    NEW             reduce using rule 24 (expression -> _list .)
    PYTHON_CODE_EXEC reduce using rule 24 (expression -> _list .)
    PYTHON_CODE     reduce using rule 24 (expression -> _list .)
    PHPSTART        reduce using rule 24 (expression -> _list .)
    LIMPORT         reduce using rule 24 (expression -> _list .)
    IMPORT          reduce using rule 24 (expression -> _list .)
    RETURN          reduce using rule 24 (expression -> _list .)
    DEL             reduce using rule 24 (expression -> _list .)
    FOREACH         reduce using rule 24 (expression -> _list .)
    FOR             reduce using rule 24 (expression -> _list .)
    DEBUG           reduce using rule 24 (expression -> _list .)
    SKIP            reduce using rule 24 (expression -> _list .)
    BREAK           reduce using rule 24 (expression -> _list .)
    LET             reduce using rule 24 (expression -> _list .)
    WHILE           reduce using rule 24 (expression -> _list .)
    NAMESPACE       reduce using rule 24 (expression -> _list .)
    CLASS           reduce using rule 24 (expression -> _list .)
    FUNC            reduce using rule 24 (expression -> _list .)
    INIT            reduce using rule 24 (expression -> _list .)
    IF              reduce using rule 24 (expression -> _list .)
    $end            reduce using rule 24 (expression -> _list .)
    ;               reduce using rule 24 (expression -> _list .)
    ,               reduce using rule 24 (expression -> _list .)
    PHPEND          reduce using rule 24 (expression -> _list .)
    }               reduce using rule 24 (expression -> _list .)
    )               reduce using rule 24 (expression -> _list .)
    HTMLEND         reduce using rule 24 (expression -> _list .)
    SARROW          reduce using rule 24 (expression -> _list .)
    ]               reduce using rule 24 (expression -> _list .)
    EQ_DIV          reduce using rule 24 (expression -> _list .)
    EQ_MOD          reduce using rule 24 (expression -> _list .)
    EQ_MUL          reduce using rule 24 (expression -> _list .)
    EQ_SUB          reduce using rule 24 (expression -> _list .)
    EQ_ADD          reduce using rule 24 (expression -> _list .)
    =               reduce using rule 24 (expression -> _list .)
    AS              reduce using rule 24 (expression -> _list .)


state 23

    (25) expression -> _tuple .
    >               reduce using rule 25 (expression -> _tuple .)
    <               reduce using rule 25 (expression -> _tuple .)
    &               reduce using rule 25 (expression -> _tuple .)
    |               reduce using rule 25 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 25 (expression -> _tuple .)
    EQ_LESS         reduce using rule 25 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 25 (expression -> _tuple .)
    EQEQ            reduce using rule 25 (expression -> _tuple .)
    %               reduce using rule 25 (expression -> _tuple .)
    *               reduce using rule 25 (expression -> _tuple .)
    /               reduce using rule 25 (expression -> _tuple .)
    -               reduce using rule 25 (expression -> _tuple .)
    +               reduce using rule 25 (expression -> _tuple .)
    .               reduce using rule 25 (expression -> _tuple .)
    COLON_COLON     reduce using rule 25 (expression -> _tuple .)
    ^               reduce using rule 25 (expression -> _tuple .)
    [               reduce using rule 25 (expression -> _tuple .)
    (               reduce using rule 25 (expression -> _tuple .)
    $               reduce using rule 25 (expression -> _tuple .)
    ID              reduce using rule 25 (expression -> _tuple .)
    !               reduce using rule 25 (expression -> _tuple .)
    ?               reduce using rule 25 (expression -> _tuple .)
    HTMLSTART       reduce using rule 25 (expression -> _tuple .)
    {               reduce using rule 25 (expression -> _tuple .)
    STRING          reduce using rule 25 (expression -> _tuple .)
    CHAR            reduce using rule 25 (expression -> _tuple .)
    FALSE           reduce using rule 25 (expression -> _tuple .)
    TRUE            reduce using rule 25 (expression -> _tuple .)
    FLOAT           reduce using rule 25 (expression -> _tuple .)
    INT             reduce using rule 25 (expression -> _tuple .)
    NULL            reduce using rule 25 (expression -> _tuple .)
    #               reduce using rule 25 (expression -> _tuple .)
    NEW             reduce using rule 25 (expression -> _tuple .)
    PYTHON_CODE_EXEC reduce using rule 25 (expression -> _tuple .)
    PYTHON_CODE     reduce using rule 25 (expression -> _tuple .)
    PHPSTART        reduce using rule 25 (expression -> _tuple .)
    LIMPORT         reduce using rule 25 (expression -> _tuple .)
    IMPORT          reduce using rule 25 (expression -> _tuple .)
    RETURN          reduce using rule 25 (expression -> _tuple .)
    DEL             reduce using rule 25 (expression -> _tuple .)
    FOREACH         reduce using rule 25 (expression -> _tuple .)
    FOR             reduce using rule 25 (expression -> _tuple .)
    DEBUG           reduce using rule 25 (expression -> _tuple .)
    SKIP            reduce using rule 25 (expression -> _tuple .)
    BREAK           reduce using rule 25 (expression -> _tuple .)
    LET             reduce using rule 25 (expression -> _tuple .)
    WHILE           reduce using rule 25 (expression -> _tuple .)
    NAMESPACE       reduce using rule 25 (expression -> _tuple .)
    CLASS           reduce using rule 25 (expression -> _tuple .)
    FUNC            reduce using rule 25 (expression -> _tuple .)
    INIT            reduce using rule 25 (expression -> _tuple .)
    IF              reduce using rule 25 (expression -> _tuple .)
    $end            reduce using rule 25 (expression -> _tuple .)
    ;               reduce using rule 25 (expression -> _tuple .)
    ,               reduce using rule 25 (expression -> _tuple .)
    PHPEND          reduce using rule 25 (expression -> _tuple .)
    }               reduce using rule 25 (expression -> _tuple .)
    )               reduce using rule 25 (expression -> _tuple .)
    HTMLEND         reduce using rule 25 (expression -> _tuple .)
    SARROW          reduce using rule 25 (expression -> _tuple .)
    ]               reduce using rule 25 (expression -> _tuple .)
    EQ_DIV          reduce using rule 25 (expression -> _tuple .)
    EQ_MOD          reduce using rule 25 (expression -> _tuple .)
    EQ_MUL          reduce using rule 25 (expression -> _tuple .)
    EQ_SUB          reduce using rule 25 (expression -> _tuple .)
    EQ_ADD          reduce using rule 25 (expression -> _tuple .)
    =               reduce using rule 25 (expression -> _tuple .)
    AS              reduce using rule 25 (expression -> _tuple .)


state 24

    (26) expression -> class_attribute .
    >               reduce using rule 26 (expression -> class_attribute .)
    <               reduce using rule 26 (expression -> class_attribute .)
    &               reduce using rule 26 (expression -> class_attribute .)
    |               reduce using rule 26 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 26 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 26 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 26 (expression -> class_attribute .)
    EQEQ            reduce using rule 26 (expression -> class_attribute .)
    %               reduce using rule 26 (expression -> class_attribute .)
    *               reduce using rule 26 (expression -> class_attribute .)
    /               reduce using rule 26 (expression -> class_attribute .)
    -               reduce using rule 26 (expression -> class_attribute .)
    +               reduce using rule 26 (expression -> class_attribute .)
    .               reduce using rule 26 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 26 (expression -> class_attribute .)
    ^               reduce using rule 26 (expression -> class_attribute .)
    [               reduce using rule 26 (expression -> class_attribute .)
    (               reduce using rule 26 (expression -> class_attribute .)
    $               reduce using rule 26 (expression -> class_attribute .)
    ID              reduce using rule 26 (expression -> class_attribute .)
    !               reduce using rule 26 (expression -> class_attribute .)
    ?               reduce using rule 26 (expression -> class_attribute .)
    HTMLSTART       reduce using rule 26 (expression -> class_attribute .)
    {               reduce using rule 26 (expression -> class_attribute .)
    STRING          reduce using rule 26 (expression -> class_attribute .)
    CHAR            reduce using rule 26 (expression -> class_attribute .)
    FALSE           reduce using rule 26 (expression -> class_attribute .)
    TRUE            reduce using rule 26 (expression -> class_attribute .)
    FLOAT           reduce using rule 26 (expression -> class_attribute .)
    INT             reduce using rule 26 (expression -> class_attribute .)
    NULL            reduce using rule 26 (expression -> class_attribute .)
    #               reduce using rule 26 (expression -> class_attribute .)
    NEW             reduce using rule 26 (expression -> class_attribute .)
    PYTHON_CODE_EXEC reduce using rule 26 (expression -> class_attribute .)
    PYTHON_CODE     reduce using rule 26 (expression -> class_attribute .)
    PHPSTART        reduce using rule 26 (expression -> class_attribute .)
    LIMPORT         reduce using rule 26 (expression -> class_attribute .)
    IMPORT          reduce using rule 26 (expression -> class_attribute .)
    RETURN          reduce using rule 26 (expression -> class_attribute .)
    DEL             reduce using rule 26 (expression -> class_attribute .)
    FOREACH         reduce using rule 26 (expression -> class_attribute .)
    FOR             reduce using rule 26 (expression -> class_attribute .)
    DEBUG           reduce using rule 26 (expression -> class_attribute .)
    SKIP            reduce using rule 26 (expression -> class_attribute .)
    BREAK           reduce using rule 26 (expression -> class_attribute .)
    LET             reduce using rule 26 (expression -> class_attribute .)
    WHILE           reduce using rule 26 (expression -> class_attribute .)
    NAMESPACE       reduce using rule 26 (expression -> class_attribute .)
    CLASS           reduce using rule 26 (expression -> class_attribute .)
    FUNC            reduce using rule 26 (expression -> class_attribute .)
    INIT            reduce using rule 26 (expression -> class_attribute .)
    IF              reduce using rule 26 (expression -> class_attribute .)
    $end            reduce using rule 26 (expression -> class_attribute .)
    ;               reduce using rule 26 (expression -> class_attribute .)
    ,               reduce using rule 26 (expression -> class_attribute .)
    PHPEND          reduce using rule 26 (expression -> class_attribute .)
    }               reduce using rule 26 (expression -> class_attribute .)
    )               reduce using rule 26 (expression -> class_attribute .)
    HTMLEND         reduce using rule 26 (expression -> class_attribute .)
    SARROW          reduce using rule 26 (expression -> class_attribute .)
    ]               reduce using rule 26 (expression -> class_attribute .)
    EQ_DIV          reduce using rule 26 (expression -> class_attribute .)
    EQ_MOD          reduce using rule 26 (expression -> class_attribute .)
    EQ_MUL          reduce using rule 26 (expression -> class_attribute .)
    EQ_SUB          reduce using rule 26 (expression -> class_attribute .)
    EQ_ADD          reduce using rule 26 (expression -> class_attribute .)
    =               reduce using rule 26 (expression -> class_attribute .)
    AS              reduce using rule 26 (expression -> class_attribute .)


state 25

    (27) expression -> id .
    >               reduce using rule 27 (expression -> id .)
    <               reduce using rule 27 (expression -> id .)
    &               reduce using rule 27 (expression -> id .)
    |               reduce using rule 27 (expression -> id .)
    EQ_GREATER      reduce using rule 27 (expression -> id .)
    EQ_LESS         reduce using rule 27 (expression -> id .)
    NOT_EQEQ        reduce using rule 27 (expression -> id .)
    EQEQ            reduce using rule 27 (expression -> id .)
    %               reduce using rule 27 (expression -> id .)
    *               reduce using rule 27 (expression -> id .)
    /               reduce using rule 27 (expression -> id .)
    -               reduce using rule 27 (expression -> id .)
    +               reduce using rule 27 (expression -> id .)
    .               reduce using rule 27 (expression -> id .)
    COLON_COLON     reduce using rule 27 (expression -> id .)
    ^               reduce using rule 27 (expression -> id .)
    [               reduce using rule 27 (expression -> id .)
    (               reduce using rule 27 (expression -> id .)
    $               reduce using rule 27 (expression -> id .)
    ID              reduce using rule 27 (expression -> id .)
    !               reduce using rule 27 (expression -> id .)
    ?               reduce using rule 27 (expression -> id .)
    HTMLSTART       reduce using rule 27 (expression -> id .)
    {               reduce using rule 27 (expression -> id .)
    STRING          reduce using rule 27 (expression -> id .)
    CHAR            reduce using rule 27 (expression -> id .)
    FALSE           reduce using rule 27 (expression -> id .)
    TRUE            reduce using rule 27 (expression -> id .)
    FLOAT           reduce using rule 27 (expression -> id .)
    INT             reduce using rule 27 (expression -> id .)
    NULL            reduce using rule 27 (expression -> id .)
    #               reduce using rule 27 (expression -> id .)
    NEW             reduce using rule 27 (expression -> id .)
    PYTHON_CODE_EXEC reduce using rule 27 (expression -> id .)
    PYTHON_CODE     reduce using rule 27 (expression -> id .)
    PHPSTART        reduce using rule 27 (expression -> id .)
    LIMPORT         reduce using rule 27 (expression -> id .)
    IMPORT          reduce using rule 27 (expression -> id .)
    RETURN          reduce using rule 27 (expression -> id .)
    DEL             reduce using rule 27 (expression -> id .)
    FOREACH         reduce using rule 27 (expression -> id .)
    FOR             reduce using rule 27 (expression -> id .)
    DEBUG           reduce using rule 27 (expression -> id .)
    SKIP            reduce using rule 27 (expression -> id .)
    BREAK           reduce using rule 27 (expression -> id .)
    LET             reduce using rule 27 (expression -> id .)
    WHILE           reduce using rule 27 (expression -> id .)
    NAMESPACE       reduce using rule 27 (expression -> id .)
    CLASS           reduce using rule 27 (expression -> id .)
    FUNC            reduce using rule 27 (expression -> id .)
    INIT            reduce using rule 27 (expression -> id .)
    IF              reduce using rule 27 (expression -> id .)
    $end            reduce using rule 27 (expression -> id .)
    ;               reduce using rule 27 (expression -> id .)
    ,               reduce using rule 27 (expression -> id .)
    PHPEND          reduce using rule 27 (expression -> id .)
    }               reduce using rule 27 (expression -> id .)
    )               reduce using rule 27 (expression -> id .)
    HTMLEND         reduce using rule 27 (expression -> id .)
    SARROW          reduce using rule 27 (expression -> id .)
    ]               reduce using rule 27 (expression -> id .)
    EQ_DIV          reduce using rule 27 (expression -> id .)
    EQ_MOD          reduce using rule 27 (expression -> id .)
    EQ_MUL          reduce using rule 27 (expression -> id .)
    EQ_SUB          reduce using rule 27 (expression -> id .)
    EQ_ADD          reduce using rule 27 (expression -> id .)
    =               reduce using rule 27 (expression -> id .)
    AS              reduce using rule 27 (expression -> id .)


state 26

    (28) expression -> string .
    >               reduce using rule 28 (expression -> string .)
    <               reduce using rule 28 (expression -> string .)
    &               reduce using rule 28 (expression -> string .)
    |               reduce using rule 28 (expression -> string .)
    EQ_GREATER      reduce using rule 28 (expression -> string .)
    EQ_LESS         reduce using rule 28 (expression -> string .)
    NOT_EQEQ        reduce using rule 28 (expression -> string .)
    EQEQ            reduce using rule 28 (expression -> string .)
    %               reduce using rule 28 (expression -> string .)
    *               reduce using rule 28 (expression -> string .)
    /               reduce using rule 28 (expression -> string .)
    -               reduce using rule 28 (expression -> string .)
    +               reduce using rule 28 (expression -> string .)
    .               reduce using rule 28 (expression -> string .)
    COLON_COLON     reduce using rule 28 (expression -> string .)
    ^               reduce using rule 28 (expression -> string .)
    [               reduce using rule 28 (expression -> string .)
    (               reduce using rule 28 (expression -> string .)
    $               reduce using rule 28 (expression -> string .)
    ID              reduce using rule 28 (expression -> string .)
    !               reduce using rule 28 (expression -> string .)
    ?               reduce using rule 28 (expression -> string .)
    HTMLSTART       reduce using rule 28 (expression -> string .)
    {               reduce using rule 28 (expression -> string .)
    STRING          reduce using rule 28 (expression -> string .)
    CHAR            reduce using rule 28 (expression -> string .)
    FALSE           reduce using rule 28 (expression -> string .)
    TRUE            reduce using rule 28 (expression -> string .)
    FLOAT           reduce using rule 28 (expression -> string .)
    INT             reduce using rule 28 (expression -> string .)
    NULL            reduce using rule 28 (expression -> string .)
    #               reduce using rule 28 (expression -> string .)
    NEW             reduce using rule 28 (expression -> string .)
    PYTHON_CODE_EXEC reduce using rule 28 (expression -> string .)
    PYTHON_CODE     reduce using rule 28 (expression -> string .)
    PHPSTART        reduce using rule 28 (expression -> string .)
    LIMPORT         reduce using rule 28 (expression -> string .)
    IMPORT          reduce using rule 28 (expression -> string .)
    RETURN          reduce using rule 28 (expression -> string .)
    DEL             reduce using rule 28 (expression -> string .)
    FOREACH         reduce using rule 28 (expression -> string .)
    FOR             reduce using rule 28 (expression -> string .)
    DEBUG           reduce using rule 28 (expression -> string .)
    SKIP            reduce using rule 28 (expression -> string .)
    BREAK           reduce using rule 28 (expression -> string .)
    LET             reduce using rule 28 (expression -> string .)
    WHILE           reduce using rule 28 (expression -> string .)
    NAMESPACE       reduce using rule 28 (expression -> string .)
    CLASS           reduce using rule 28 (expression -> string .)
    FUNC            reduce using rule 28 (expression -> string .)
    INIT            reduce using rule 28 (expression -> string .)
    IF              reduce using rule 28 (expression -> string .)
    $end            reduce using rule 28 (expression -> string .)
    ;               reduce using rule 28 (expression -> string .)
    ,               reduce using rule 28 (expression -> string .)
    PHPEND          reduce using rule 28 (expression -> string .)
    }               reduce using rule 28 (expression -> string .)
    )               reduce using rule 28 (expression -> string .)
    HTMLEND         reduce using rule 28 (expression -> string .)
    SARROW          reduce using rule 28 (expression -> string .)
    ]               reduce using rule 28 (expression -> string .)
    EQ_DIV          reduce using rule 28 (expression -> string .)
    EQ_MOD          reduce using rule 28 (expression -> string .)
    EQ_MUL          reduce using rule 28 (expression -> string .)
    EQ_SUB          reduce using rule 28 (expression -> string .)
    EQ_ADD          reduce using rule 28 (expression -> string .)
    =               reduce using rule 28 (expression -> string .)
    AS              reduce using rule 28 (expression -> string .)


state 27

    (29) expression -> bool .
    >               reduce using rule 29 (expression -> bool .)
    <               reduce using rule 29 (expression -> bool .)
    &               reduce using rule 29 (expression -> bool .)
    |               reduce using rule 29 (expression -> bool .)
    EQ_GREATER      reduce using rule 29 (expression -> bool .)
    EQ_LESS         reduce using rule 29 (expression -> bool .)
    NOT_EQEQ        reduce using rule 29 (expression -> bool .)
    EQEQ            reduce using rule 29 (expression -> bool .)
    %               reduce using rule 29 (expression -> bool .)
    *               reduce using rule 29 (expression -> bool .)
    /               reduce using rule 29 (expression -> bool .)
    -               reduce using rule 29 (expression -> bool .)
    +               reduce using rule 29 (expression -> bool .)
    .               reduce using rule 29 (expression -> bool .)
    COLON_COLON     reduce using rule 29 (expression -> bool .)
    ^               reduce using rule 29 (expression -> bool .)
    [               reduce using rule 29 (expression -> bool .)
    (               reduce using rule 29 (expression -> bool .)
    $               reduce using rule 29 (expression -> bool .)
    ID              reduce using rule 29 (expression -> bool .)
    !               reduce using rule 29 (expression -> bool .)
    ?               reduce using rule 29 (expression -> bool .)
    HTMLSTART       reduce using rule 29 (expression -> bool .)
    {               reduce using rule 29 (expression -> bool .)
    STRING          reduce using rule 29 (expression -> bool .)
    CHAR            reduce using rule 29 (expression -> bool .)
    FALSE           reduce using rule 29 (expression -> bool .)
    TRUE            reduce using rule 29 (expression -> bool .)
    FLOAT           reduce using rule 29 (expression -> bool .)
    INT             reduce using rule 29 (expression -> bool .)
    NULL            reduce using rule 29 (expression -> bool .)
    #               reduce using rule 29 (expression -> bool .)
    NEW             reduce using rule 29 (expression -> bool .)
    PYTHON_CODE_EXEC reduce using rule 29 (expression -> bool .)
    PYTHON_CODE     reduce using rule 29 (expression -> bool .)
    PHPSTART        reduce using rule 29 (expression -> bool .)
    LIMPORT         reduce using rule 29 (expression -> bool .)
    IMPORT          reduce using rule 29 (expression -> bool .)
    RETURN          reduce using rule 29 (expression -> bool .)
    DEL             reduce using rule 29 (expression -> bool .)
    FOREACH         reduce using rule 29 (expression -> bool .)
    FOR             reduce using rule 29 (expression -> bool .)
    DEBUG           reduce using rule 29 (expression -> bool .)
    SKIP            reduce using rule 29 (expression -> bool .)
    BREAK           reduce using rule 29 (expression -> bool .)
    LET             reduce using rule 29 (expression -> bool .)
    WHILE           reduce using rule 29 (expression -> bool .)
    NAMESPACE       reduce using rule 29 (expression -> bool .)
    CLASS           reduce using rule 29 (expression -> bool .)
    FUNC            reduce using rule 29 (expression -> bool .)
    INIT            reduce using rule 29 (expression -> bool .)
    IF              reduce using rule 29 (expression -> bool .)
    $end            reduce using rule 29 (expression -> bool .)
    ;               reduce using rule 29 (expression -> bool .)
    ,               reduce using rule 29 (expression -> bool .)
    PHPEND          reduce using rule 29 (expression -> bool .)
    }               reduce using rule 29 (expression -> bool .)
    )               reduce using rule 29 (expression -> bool .)
    HTMLEND         reduce using rule 29 (expression -> bool .)
    SARROW          reduce using rule 29 (expression -> bool .)
    ]               reduce using rule 29 (expression -> bool .)
    EQ_DIV          reduce using rule 29 (expression -> bool .)
    EQ_MOD          reduce using rule 29 (expression -> bool .)
    EQ_MUL          reduce using rule 29 (expression -> bool .)
    EQ_SUB          reduce using rule 29 (expression -> bool .)
    EQ_ADD          reduce using rule 29 (expression -> bool .)
    =               reduce using rule 29 (expression -> bool .)
    AS              reduce using rule 29 (expression -> bool .)


state 28

    (30) expression -> float .
    >               reduce using rule 30 (expression -> float .)
    <               reduce using rule 30 (expression -> float .)
    &               reduce using rule 30 (expression -> float .)
    |               reduce using rule 30 (expression -> float .)
    EQ_GREATER      reduce using rule 30 (expression -> float .)
    EQ_LESS         reduce using rule 30 (expression -> float .)
    NOT_EQEQ        reduce using rule 30 (expression -> float .)
    EQEQ            reduce using rule 30 (expression -> float .)
    %               reduce using rule 30 (expression -> float .)
    *               reduce using rule 30 (expression -> float .)
    /               reduce using rule 30 (expression -> float .)
    -               reduce using rule 30 (expression -> float .)
    +               reduce using rule 30 (expression -> float .)
    .               reduce using rule 30 (expression -> float .)
    COLON_COLON     reduce using rule 30 (expression -> float .)
    ^               reduce using rule 30 (expression -> float .)
    [               reduce using rule 30 (expression -> float .)
    (               reduce using rule 30 (expression -> float .)
    $               reduce using rule 30 (expression -> float .)
    ID              reduce using rule 30 (expression -> float .)
    !               reduce using rule 30 (expression -> float .)
    ?               reduce using rule 30 (expression -> float .)
    HTMLSTART       reduce using rule 30 (expression -> float .)
    {               reduce using rule 30 (expression -> float .)
    STRING          reduce using rule 30 (expression -> float .)
    CHAR            reduce using rule 30 (expression -> float .)
    FALSE           reduce using rule 30 (expression -> float .)
    TRUE            reduce using rule 30 (expression -> float .)
    FLOAT           reduce using rule 30 (expression -> float .)
    INT             reduce using rule 30 (expression -> float .)
    NULL            reduce using rule 30 (expression -> float .)
    #               reduce using rule 30 (expression -> float .)
    NEW             reduce using rule 30 (expression -> float .)
    PYTHON_CODE_EXEC reduce using rule 30 (expression -> float .)
    PYTHON_CODE     reduce using rule 30 (expression -> float .)
    PHPSTART        reduce using rule 30 (expression -> float .)
    LIMPORT         reduce using rule 30 (expression -> float .)
    IMPORT          reduce using rule 30 (expression -> float .)
    RETURN          reduce using rule 30 (expression -> float .)
    DEL             reduce using rule 30 (expression -> float .)
    FOREACH         reduce using rule 30 (expression -> float .)
    FOR             reduce using rule 30 (expression -> float .)
    DEBUG           reduce using rule 30 (expression -> float .)
    SKIP            reduce using rule 30 (expression -> float .)
    BREAK           reduce using rule 30 (expression -> float .)
    LET             reduce using rule 30 (expression -> float .)
    WHILE           reduce using rule 30 (expression -> float .)
    NAMESPACE       reduce using rule 30 (expression -> float .)
    CLASS           reduce using rule 30 (expression -> float .)
    FUNC            reduce using rule 30 (expression -> float .)
    INIT            reduce using rule 30 (expression -> float .)
    IF              reduce using rule 30 (expression -> float .)
    $end            reduce using rule 30 (expression -> float .)
    ;               reduce using rule 30 (expression -> float .)
    ,               reduce using rule 30 (expression -> float .)
    PHPEND          reduce using rule 30 (expression -> float .)
    }               reduce using rule 30 (expression -> float .)
    )               reduce using rule 30 (expression -> float .)
    HTMLEND         reduce using rule 30 (expression -> float .)
    SARROW          reduce using rule 30 (expression -> float .)
    ]               reduce using rule 30 (expression -> float .)
    EQ_DIV          reduce using rule 30 (expression -> float .)
    EQ_MOD          reduce using rule 30 (expression -> float .)
    EQ_MUL          reduce using rule 30 (expression -> float .)
    EQ_SUB          reduce using rule 30 (expression -> float .)
    EQ_ADD          reduce using rule 30 (expression -> float .)
    =               reduce using rule 30 (expression -> float .)
    AS              reduce using rule 30 (expression -> float .)


state 29

    (31) expression -> int .
    >               reduce using rule 31 (expression -> int .)
    <               reduce using rule 31 (expression -> int .)
    &               reduce using rule 31 (expression -> int .)
    |               reduce using rule 31 (expression -> int .)
    EQ_GREATER      reduce using rule 31 (expression -> int .)
    EQ_LESS         reduce using rule 31 (expression -> int .)
    NOT_EQEQ        reduce using rule 31 (expression -> int .)
    EQEQ            reduce using rule 31 (expression -> int .)
    %               reduce using rule 31 (expression -> int .)
    *               reduce using rule 31 (expression -> int .)
    /               reduce using rule 31 (expression -> int .)
    -               reduce using rule 31 (expression -> int .)
    +               reduce using rule 31 (expression -> int .)
    .               reduce using rule 31 (expression -> int .)
    COLON_COLON     reduce using rule 31 (expression -> int .)
    ^               reduce using rule 31 (expression -> int .)
    [               reduce using rule 31 (expression -> int .)
    (               reduce using rule 31 (expression -> int .)
    $               reduce using rule 31 (expression -> int .)
    ID              reduce using rule 31 (expression -> int .)
    !               reduce using rule 31 (expression -> int .)
    ?               reduce using rule 31 (expression -> int .)
    HTMLSTART       reduce using rule 31 (expression -> int .)
    {               reduce using rule 31 (expression -> int .)
    STRING          reduce using rule 31 (expression -> int .)
    CHAR            reduce using rule 31 (expression -> int .)
    FALSE           reduce using rule 31 (expression -> int .)
    TRUE            reduce using rule 31 (expression -> int .)
    FLOAT           reduce using rule 31 (expression -> int .)
    INT             reduce using rule 31 (expression -> int .)
    NULL            reduce using rule 31 (expression -> int .)
    #               reduce using rule 31 (expression -> int .)
    NEW             reduce using rule 31 (expression -> int .)
    PYTHON_CODE_EXEC reduce using rule 31 (expression -> int .)
    PYTHON_CODE     reduce using rule 31 (expression -> int .)
    PHPSTART        reduce using rule 31 (expression -> int .)
    LIMPORT         reduce using rule 31 (expression -> int .)
    IMPORT          reduce using rule 31 (expression -> int .)
    RETURN          reduce using rule 31 (expression -> int .)
    DEL             reduce using rule 31 (expression -> int .)
    FOREACH         reduce using rule 31 (expression -> int .)
    FOR             reduce using rule 31 (expression -> int .)
    DEBUG           reduce using rule 31 (expression -> int .)
    SKIP            reduce using rule 31 (expression -> int .)
    BREAK           reduce using rule 31 (expression -> int .)
    LET             reduce using rule 31 (expression -> int .)
    WHILE           reduce using rule 31 (expression -> int .)
    NAMESPACE       reduce using rule 31 (expression -> int .)
    CLASS           reduce using rule 31 (expression -> int .)
    FUNC            reduce using rule 31 (expression -> int .)
    INIT            reduce using rule 31 (expression -> int .)
    IF              reduce using rule 31 (expression -> int .)
    $end            reduce using rule 31 (expression -> int .)
    ;               reduce using rule 31 (expression -> int .)
    ,               reduce using rule 31 (expression -> int .)
    PHPEND          reduce using rule 31 (expression -> int .)
    }               reduce using rule 31 (expression -> int .)
    )               reduce using rule 31 (expression -> int .)
    HTMLEND         reduce using rule 31 (expression -> int .)
    SARROW          reduce using rule 31 (expression -> int .)
    ]               reduce using rule 31 (expression -> int .)
    EQ_DIV          reduce using rule 31 (expression -> int .)
    EQ_MOD          reduce using rule 31 (expression -> int .)
    EQ_MUL          reduce using rule 31 (expression -> int .)
    EQ_SUB          reduce using rule 31 (expression -> int .)
    EQ_ADD          reduce using rule 31 (expression -> int .)
    =               reduce using rule 31 (expression -> int .)
    AS              reduce using rule 31 (expression -> int .)


state 30

    (32) expression -> null .
    >               reduce using rule 32 (expression -> null .)
    <               reduce using rule 32 (expression -> null .)
    &               reduce using rule 32 (expression -> null .)
    |               reduce using rule 32 (expression -> null .)
    EQ_GREATER      reduce using rule 32 (expression -> null .)
    EQ_LESS         reduce using rule 32 (expression -> null .)
    NOT_EQEQ        reduce using rule 32 (expression -> null .)
    EQEQ            reduce using rule 32 (expression -> null .)
    %               reduce using rule 32 (expression -> null .)
    *               reduce using rule 32 (expression -> null .)
    /               reduce using rule 32 (expression -> null .)
    -               reduce using rule 32 (expression -> null .)
    +               reduce using rule 32 (expression -> null .)
    .               reduce using rule 32 (expression -> null .)
    COLON_COLON     reduce using rule 32 (expression -> null .)
    ^               reduce using rule 32 (expression -> null .)
    [               reduce using rule 32 (expression -> null .)
    (               reduce using rule 32 (expression -> null .)
    $               reduce using rule 32 (expression -> null .)
    ID              reduce using rule 32 (expression -> null .)
    !               reduce using rule 32 (expression -> null .)
    ?               reduce using rule 32 (expression -> null .)
    HTMLSTART       reduce using rule 32 (expression -> null .)
    {               reduce using rule 32 (expression -> null .)
    STRING          reduce using rule 32 (expression -> null .)
    CHAR            reduce using rule 32 (expression -> null .)
    FALSE           reduce using rule 32 (expression -> null .)
    TRUE            reduce using rule 32 (expression -> null .)
    FLOAT           reduce using rule 32 (expression -> null .)
    INT             reduce using rule 32 (expression -> null .)
    NULL            reduce using rule 32 (expression -> null .)
    #               reduce using rule 32 (expression -> null .)
    NEW             reduce using rule 32 (expression -> null .)
    PYTHON_CODE_EXEC reduce using rule 32 (expression -> null .)
    PYTHON_CODE     reduce using rule 32 (expression -> null .)
    PHPSTART        reduce using rule 32 (expression -> null .)
    LIMPORT         reduce using rule 32 (expression -> null .)
    IMPORT          reduce using rule 32 (expression -> null .)
    RETURN          reduce using rule 32 (expression -> null .)
    DEL             reduce using rule 32 (expression -> null .)
    FOREACH         reduce using rule 32 (expression -> null .)
    FOR             reduce using rule 32 (expression -> null .)
    DEBUG           reduce using rule 32 (expression -> null .)
    SKIP            reduce using rule 32 (expression -> null .)
    BREAK           reduce using rule 32 (expression -> null .)
    LET             reduce using rule 32 (expression -> null .)
    WHILE           reduce using rule 32 (expression -> null .)
    NAMESPACE       reduce using rule 32 (expression -> null .)
    CLASS           reduce using rule 32 (expression -> null .)
    FUNC            reduce using rule 32 (expression -> null .)
    INIT            reduce using rule 32 (expression -> null .)
    IF              reduce using rule 32 (expression -> null .)
    $end            reduce using rule 32 (expression -> null .)
    ;               reduce using rule 32 (expression -> null .)
    ,               reduce using rule 32 (expression -> null .)
    PHPEND          reduce using rule 32 (expression -> null .)
    }               reduce using rule 32 (expression -> null .)
    )               reduce using rule 32 (expression -> null .)
    HTMLEND         reduce using rule 32 (expression -> null .)
    SARROW          reduce using rule 32 (expression -> null .)
    ]               reduce using rule 32 (expression -> null .)
    EQ_DIV          reduce using rule 32 (expression -> null .)
    EQ_MOD          reduce using rule 32 (expression -> null .)
    EQ_MUL          reduce using rule 32 (expression -> null .)
    EQ_SUB          reduce using rule 32 (expression -> null .)
    EQ_ADD          reduce using rule 32 (expression -> null .)
    =               reduce using rule 32 (expression -> null .)
    AS              reduce using rule 32 (expression -> null .)


state 31

    (33) expression -> get_index .
    (118) variable_operation -> get_index . EQ_DIV expression ;
    (120) variable_operation -> get_index . EQ_MOD expression ;
    (122) variable_operation -> get_index . EQ_MUL expression ;
    (124) variable_operation -> get_index . EQ_SUB expression ;
    (126) variable_operation -> get_index . EQ_ADD expression ;
    >               reduce using rule 33 (expression -> get_index .)
    <               reduce using rule 33 (expression -> get_index .)
    &               reduce using rule 33 (expression -> get_index .)
    |               reduce using rule 33 (expression -> get_index .)
    EQ_GREATER      reduce using rule 33 (expression -> get_index .)
    EQ_LESS         reduce using rule 33 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 33 (expression -> get_index .)
    EQEQ            reduce using rule 33 (expression -> get_index .)
    %               reduce using rule 33 (expression -> get_index .)
    *               reduce using rule 33 (expression -> get_index .)
    /               reduce using rule 33 (expression -> get_index .)
    -               reduce using rule 33 (expression -> get_index .)
    +               reduce using rule 33 (expression -> get_index .)
    .               reduce using rule 33 (expression -> get_index .)
    COLON_COLON     reduce using rule 33 (expression -> get_index .)
    ^               reduce using rule 33 (expression -> get_index .)
    [               reduce using rule 33 (expression -> get_index .)
    (               reduce using rule 33 (expression -> get_index .)
    $               reduce using rule 33 (expression -> get_index .)
    ID              reduce using rule 33 (expression -> get_index .)
    !               reduce using rule 33 (expression -> get_index .)
    ?               reduce using rule 33 (expression -> get_index .)
    HTMLSTART       reduce using rule 33 (expression -> get_index .)
    {               reduce using rule 33 (expression -> get_index .)
    STRING          reduce using rule 33 (expression -> get_index .)
    CHAR            reduce using rule 33 (expression -> get_index .)
    FALSE           reduce using rule 33 (expression -> get_index .)
    TRUE            reduce using rule 33 (expression -> get_index .)
    FLOAT           reduce using rule 33 (expression -> get_index .)
    INT             reduce using rule 33 (expression -> get_index .)
    NULL            reduce using rule 33 (expression -> get_index .)
    #               reduce using rule 33 (expression -> get_index .)
    NEW             reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 33 (expression -> get_index .)
    PHPSTART        reduce using rule 33 (expression -> get_index .)
    LIMPORT         reduce using rule 33 (expression -> get_index .)
    IMPORT          reduce using rule 33 (expression -> get_index .)
    RETURN          reduce using rule 33 (expression -> get_index .)
    DEL             reduce using rule 33 (expression -> get_index .)
    FOREACH         reduce using rule 33 (expression -> get_index .)
    FOR             reduce using rule 33 (expression -> get_index .)
    DEBUG           reduce using rule 33 (expression -> get_index .)
    SKIP            reduce using rule 33 (expression -> get_index .)
    BREAK           reduce using rule 33 (expression -> get_index .)
    LET             reduce using rule 33 (expression -> get_index .)
    WHILE           reduce using rule 33 (expression -> get_index .)
    NAMESPACE       reduce using rule 33 (expression -> get_index .)
    CLASS           reduce using rule 33 (expression -> get_index .)
    FUNC            reduce using rule 33 (expression -> get_index .)
    INIT            reduce using rule 33 (expression -> get_index .)
    IF              reduce using rule 33 (expression -> get_index .)
    $end            reduce using rule 33 (expression -> get_index .)
    PHPEND          reduce using rule 33 (expression -> get_index .)
    }               reduce using rule 33 (expression -> get_index .)
    ,               reduce using rule 33 (expression -> get_index .)
    EQ_DIV          shift and go to state 110
    EQ_MOD          shift and go to state 111
    EQ_MUL          shift and go to state 112
    EQ_SUB          shift and go to state 113
    EQ_ADD          shift and go to state 114


state 32

    (34) expression -> function_call .
    (64) function_call_statement -> function_call . ;
    >               reduce using rule 34 (expression -> function_call .)
    <               reduce using rule 34 (expression -> function_call .)
    &               reduce using rule 34 (expression -> function_call .)
    |               reduce using rule 34 (expression -> function_call .)
    EQ_GREATER      reduce using rule 34 (expression -> function_call .)
    EQ_LESS         reduce using rule 34 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 34 (expression -> function_call .)
    EQEQ            reduce using rule 34 (expression -> function_call .)
    %               reduce using rule 34 (expression -> function_call .)
    *               reduce using rule 34 (expression -> function_call .)
    /               reduce using rule 34 (expression -> function_call .)
    -               reduce using rule 34 (expression -> function_call .)
    +               reduce using rule 34 (expression -> function_call .)
    .               reduce using rule 34 (expression -> function_call .)
    COLON_COLON     reduce using rule 34 (expression -> function_call .)
    ^               reduce using rule 34 (expression -> function_call .)
    [               reduce using rule 34 (expression -> function_call .)
    (               reduce using rule 34 (expression -> function_call .)
    $               reduce using rule 34 (expression -> function_call .)
    ID              reduce using rule 34 (expression -> function_call .)
    !               reduce using rule 34 (expression -> function_call .)
    ?               reduce using rule 34 (expression -> function_call .)
    HTMLSTART       reduce using rule 34 (expression -> function_call .)
    {               reduce using rule 34 (expression -> function_call .)
    STRING          reduce using rule 34 (expression -> function_call .)
    CHAR            reduce using rule 34 (expression -> function_call .)
    FALSE           reduce using rule 34 (expression -> function_call .)
    TRUE            reduce using rule 34 (expression -> function_call .)
    FLOAT           reduce using rule 34 (expression -> function_call .)
    INT             reduce using rule 34 (expression -> function_call .)
    NULL            reduce using rule 34 (expression -> function_call .)
    #               reduce using rule 34 (expression -> function_call .)
    NEW             reduce using rule 34 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 34 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 34 (expression -> function_call .)
    PHPSTART        reduce using rule 34 (expression -> function_call .)
    LIMPORT         reduce using rule 34 (expression -> function_call .)
    IMPORT          reduce using rule 34 (expression -> function_call .)
    RETURN          reduce using rule 34 (expression -> function_call .)
    DEL             reduce using rule 34 (expression -> function_call .)
    FOREACH         reduce using rule 34 (expression -> function_call .)
    FOR             reduce using rule 34 (expression -> function_call .)
    DEBUG           reduce using rule 34 (expression -> function_call .)
    SKIP            reduce using rule 34 (expression -> function_call .)
    BREAK           reduce using rule 34 (expression -> function_call .)
    LET             reduce using rule 34 (expression -> function_call .)
    WHILE           reduce using rule 34 (expression -> function_call .)
    NAMESPACE       reduce using rule 34 (expression -> function_call .)
    CLASS           reduce using rule 34 (expression -> function_call .)
    FUNC            reduce using rule 34 (expression -> function_call .)
    INIT            reduce using rule 34 (expression -> function_call .)
    IF              reduce using rule 34 (expression -> function_call .)
    $end            reduce using rule 34 (expression -> function_call .)
    PHPEND          reduce using rule 34 (expression -> function_call .)
    }               reduce using rule 34 (expression -> function_call .)
    ,               reduce using rule 34 (expression -> function_call .)
    ;               shift and go to state 115


state 33

    (35) expression -> python_code .
    (65) python_code_statement -> python_code . ;
    >               reduce using rule 35 (expression -> python_code .)
    <               reduce using rule 35 (expression -> python_code .)
    &               reduce using rule 35 (expression -> python_code .)
    |               reduce using rule 35 (expression -> python_code .)
    EQ_GREATER      reduce using rule 35 (expression -> python_code .)
    EQ_LESS         reduce using rule 35 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 35 (expression -> python_code .)
    EQEQ            reduce using rule 35 (expression -> python_code .)
    %               reduce using rule 35 (expression -> python_code .)
    *               reduce using rule 35 (expression -> python_code .)
    /               reduce using rule 35 (expression -> python_code .)
    -               reduce using rule 35 (expression -> python_code .)
    +               reduce using rule 35 (expression -> python_code .)
    .               reduce using rule 35 (expression -> python_code .)
    COLON_COLON     reduce using rule 35 (expression -> python_code .)
    ^               reduce using rule 35 (expression -> python_code .)
    [               reduce using rule 35 (expression -> python_code .)
    (               reduce using rule 35 (expression -> python_code .)
    $               reduce using rule 35 (expression -> python_code .)
    ID              reduce using rule 35 (expression -> python_code .)
    !               reduce using rule 35 (expression -> python_code .)
    ?               reduce using rule 35 (expression -> python_code .)
    HTMLSTART       reduce using rule 35 (expression -> python_code .)
    {               reduce using rule 35 (expression -> python_code .)
    STRING          reduce using rule 35 (expression -> python_code .)
    CHAR            reduce using rule 35 (expression -> python_code .)
    FALSE           reduce using rule 35 (expression -> python_code .)
    TRUE            reduce using rule 35 (expression -> python_code .)
    FLOAT           reduce using rule 35 (expression -> python_code .)
    INT             reduce using rule 35 (expression -> python_code .)
    NULL            reduce using rule 35 (expression -> python_code .)
    #               reduce using rule 35 (expression -> python_code .)
    NEW             reduce using rule 35 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 35 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 35 (expression -> python_code .)
    PHPSTART        reduce using rule 35 (expression -> python_code .)
    LIMPORT         reduce using rule 35 (expression -> python_code .)
    IMPORT          reduce using rule 35 (expression -> python_code .)
    RETURN          reduce using rule 35 (expression -> python_code .)
    DEL             reduce using rule 35 (expression -> python_code .)
    FOREACH         reduce using rule 35 (expression -> python_code .)
    FOR             reduce using rule 35 (expression -> python_code .)
    DEBUG           reduce using rule 35 (expression -> python_code .)
    SKIP            reduce using rule 35 (expression -> python_code .)
    BREAK           reduce using rule 35 (expression -> python_code .)
    LET             reduce using rule 35 (expression -> python_code .)
    WHILE           reduce using rule 35 (expression -> python_code .)
    NAMESPACE       reduce using rule 35 (expression -> python_code .)
    CLASS           reduce using rule 35 (expression -> python_code .)
    FUNC            reduce using rule 35 (expression -> python_code .)
    INIT            reduce using rule 35 (expression -> python_code .)
    IF              reduce using rule 35 (expression -> python_code .)
    $end            reduce using rule 35 (expression -> python_code .)
    PHPEND          reduce using rule 35 (expression -> python_code .)
    }               reduce using rule 35 (expression -> python_code .)
    ,               reduce using rule 35 (expression -> python_code .)
    ;               shift and go to state 116


state 34

    (36) expression -> ( . expression )
    (152) _numpy -> ( . , )
    (153) _numpy -> ( . )
    (154) _numpy -> ( . expression , )
    (155) _numpy -> ( . items , )
    (156) _numpy -> ( . items )
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (157) items -> . expression , expression
    (158) items -> . items , expression
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               shift and go to state 119
    )               shift and go to state 118
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 117
    items                          shift and go to state 120
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 35

    (39) expression -> ! . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 121
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 36

    (40) expression -> + . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 122
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 37

    (41) expression -> - . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 123
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 38

    (54) expression -> & . ID
    ID              shift and go to state 124


state 39

    (53) expression -> * . ID
    ID              shift and go to state 125


state 40

    (55) expression -> ID . OF ID
    (119) variable_operation -> ID . EQ_DIV expression ;
    (121) variable_operation -> ID . EQ_MOD expression ;
    (123) variable_operation -> ID . EQ_MUL expression ;
    (125) variable_operation -> ID . EQ_SUB expression ;
    (127) variable_operation -> ID . EQ_ADD expression ;
    (92) function_declaration -> ID . FUNC ID ( empty ) { program }
    (93) function_declaration -> ID . FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> ID . FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> ID . FUNC ID ( function_arguments ) : expression { program }
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    OF              shift and go to state 126
    EQ_DIV          shift and go to state 127
    EQ_MOD          shift and go to state 128
    EQ_MUL          shift and go to state 129
    EQ_SUB          shift and go to state 130
    EQ_ADD          shift and go to state 131
    FUNC            shift and go to state 132
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 41

    (56) expression -> $ . expression
    (116) variable_assignment -> $ . ID TARROW ID = expression ;
    (117) variable_assignment -> $ . ID = expression ;
    (84) function_call -> $ . ID TARROW ID ( empty )
    (85) function_call -> $ . ID TARROW ID ( function_arguments )
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 138
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 137
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 42

    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    SELFISH         shift and go to state 139
    GLOBAL          shift and go to state 140
    ENV             shift and go to state 141


state 43

    (59) expression -> HTMLSTART .
    (61) html_full -> HTMLSTART . empty HTMLEND
    (62) html_full -> HTMLSTART . expression HTMLEND
    (169) empty -> .
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! reduce/reduce conflict for HTMLEND resolved using rule 59 (expression -> HTMLSTART .)
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    >               reduce using rule 59 (expression -> HTMLSTART .)
    <               reduce using rule 59 (expression -> HTMLSTART .)
    |               reduce using rule 59 (expression -> HTMLSTART .)
    EQ_GREATER      reduce using rule 59 (expression -> HTMLSTART .)
    EQ_LESS         reduce using rule 59 (expression -> HTMLSTART .)
    NOT_EQEQ        reduce using rule 59 (expression -> HTMLSTART .)
    EQEQ            reduce using rule 59 (expression -> HTMLSTART .)
    %               reduce using rule 59 (expression -> HTMLSTART .)
    /               reduce using rule 59 (expression -> HTMLSTART .)
    COLON_COLON     reduce using rule 59 (expression -> HTMLSTART .)
    ^               reduce using rule 59 (expression -> HTMLSTART .)
    PHPSTART        reduce using rule 59 (expression -> HTMLSTART .)
    LIMPORT         reduce using rule 59 (expression -> HTMLSTART .)
    IMPORT          reduce using rule 59 (expression -> HTMLSTART .)
    RETURN          reduce using rule 59 (expression -> HTMLSTART .)
    DEL             reduce using rule 59 (expression -> HTMLSTART .)
    FOREACH         reduce using rule 59 (expression -> HTMLSTART .)
    FOR             reduce using rule 59 (expression -> HTMLSTART .)
    DEBUG           reduce using rule 59 (expression -> HTMLSTART .)
    SKIP            reduce using rule 59 (expression -> HTMLSTART .)
    BREAK           reduce using rule 59 (expression -> HTMLSTART .)
    LET             reduce using rule 59 (expression -> HTMLSTART .)
    WHILE           reduce using rule 59 (expression -> HTMLSTART .)
    NAMESPACE       reduce using rule 59 (expression -> HTMLSTART .)
    CLASS           reduce using rule 59 (expression -> HTMLSTART .)
    FUNC            reduce using rule 59 (expression -> HTMLSTART .)
    INIT            reduce using rule 59 (expression -> HTMLSTART .)
    IF              reduce using rule 59 (expression -> HTMLSTART .)
    $end            reduce using rule 59 (expression -> HTMLSTART .)
    ;               reduce using rule 59 (expression -> HTMLSTART .)
    ,               reduce using rule 59 (expression -> HTMLSTART .)
    PHPEND          reduce using rule 59 (expression -> HTMLSTART .)
    }               reduce using rule 59 (expression -> HTMLSTART .)
    )               reduce using rule 59 (expression -> HTMLSTART .)
    HTMLEND         reduce using rule 59 (expression -> HTMLSTART .)
    SARROW          reduce using rule 59 (expression -> HTMLSTART .)
    ]               reduce using rule 59 (expression -> HTMLSTART .)
    EQ_DIV          reduce using rule 59 (expression -> HTMLSTART .)
    EQ_MOD          reduce using rule 59 (expression -> HTMLSTART .)
    EQ_MUL          reduce using rule 59 (expression -> HTMLSTART .)
    EQ_SUB          reduce using rule 59 (expression -> HTMLSTART .)
    EQ_ADD          reduce using rule 59 (expression -> HTMLSTART .)
    =               reduce using rule 59 (expression -> HTMLSTART .)
    AS              reduce using rule 59 (expression -> HTMLSTART .)
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 142
    expression                     shift and go to state 143
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 44

    (60) expression -> html_full .
    >               reduce using rule 60 (expression -> html_full .)
    <               reduce using rule 60 (expression -> html_full .)
    &               reduce using rule 60 (expression -> html_full .)
    |               reduce using rule 60 (expression -> html_full .)
    EQ_GREATER      reduce using rule 60 (expression -> html_full .)
    EQ_LESS         reduce using rule 60 (expression -> html_full .)
    NOT_EQEQ        reduce using rule 60 (expression -> html_full .)
    EQEQ            reduce using rule 60 (expression -> html_full .)
    %               reduce using rule 60 (expression -> html_full .)
    *               reduce using rule 60 (expression -> html_full .)
    /               reduce using rule 60 (expression -> html_full .)
    -               reduce using rule 60 (expression -> html_full .)
    +               reduce using rule 60 (expression -> html_full .)
    .               reduce using rule 60 (expression -> html_full .)
    COLON_COLON     reduce using rule 60 (expression -> html_full .)
    ^               reduce using rule 60 (expression -> html_full .)
    [               reduce using rule 60 (expression -> html_full .)
    (               reduce using rule 60 (expression -> html_full .)
    $               reduce using rule 60 (expression -> html_full .)
    ID              reduce using rule 60 (expression -> html_full .)
    !               reduce using rule 60 (expression -> html_full .)
    ?               reduce using rule 60 (expression -> html_full .)
    HTMLSTART       reduce using rule 60 (expression -> html_full .)
    {               reduce using rule 60 (expression -> html_full .)
    STRING          reduce using rule 60 (expression -> html_full .)
    CHAR            reduce using rule 60 (expression -> html_full .)
    FALSE           reduce using rule 60 (expression -> html_full .)
    TRUE            reduce using rule 60 (expression -> html_full .)
    FLOAT           reduce using rule 60 (expression -> html_full .)
    INT             reduce using rule 60 (expression -> html_full .)
    NULL            reduce using rule 60 (expression -> html_full .)
    #               reduce using rule 60 (expression -> html_full .)
    NEW             reduce using rule 60 (expression -> html_full .)
    PYTHON_CODE_EXEC reduce using rule 60 (expression -> html_full .)
    PYTHON_CODE     reduce using rule 60 (expression -> html_full .)
    PHPSTART        reduce using rule 60 (expression -> html_full .)
    LIMPORT         reduce using rule 60 (expression -> html_full .)
    IMPORT          reduce using rule 60 (expression -> html_full .)
    RETURN          reduce using rule 60 (expression -> html_full .)
    DEL             reduce using rule 60 (expression -> html_full .)
    FOREACH         reduce using rule 60 (expression -> html_full .)
    FOR             reduce using rule 60 (expression -> html_full .)
    DEBUG           reduce using rule 60 (expression -> html_full .)
    SKIP            reduce using rule 60 (expression -> html_full .)
    BREAK           reduce using rule 60 (expression -> html_full .)
    LET             reduce using rule 60 (expression -> html_full .)
    WHILE           reduce using rule 60 (expression -> html_full .)
    NAMESPACE       reduce using rule 60 (expression -> html_full .)
    CLASS           reduce using rule 60 (expression -> html_full .)
    FUNC            reduce using rule 60 (expression -> html_full .)
    INIT            reduce using rule 60 (expression -> html_full .)
    IF              reduce using rule 60 (expression -> html_full .)
    $end            reduce using rule 60 (expression -> html_full .)
    ;               reduce using rule 60 (expression -> html_full .)
    ,               reduce using rule 60 (expression -> html_full .)
    PHPEND          reduce using rule 60 (expression -> html_full .)
    }               reduce using rule 60 (expression -> html_full .)
    )               reduce using rule 60 (expression -> html_full .)
    HTMLEND         reduce using rule 60 (expression -> html_full .)
    SARROW          reduce using rule 60 (expression -> html_full .)
    ]               reduce using rule 60 (expression -> html_full .)
    EQ_DIV          reduce using rule 60 (expression -> html_full .)
    EQ_MOD          reduce using rule 60 (expression -> html_full .)
    EQ_MUL          reduce using rule 60 (expression -> html_full .)
    EQ_SUB          reduce using rule 60 (expression -> html_full .)
    EQ_ADD          reduce using rule 60 (expression -> html_full .)
    =               reduce using rule 60 (expression -> html_full .)
    AS              reduce using rule 60 (expression -> html_full .)


state 45

    (20) sandbox -> PHPSTART . program PHPEND
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    PHPEND          reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 144
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 46

    (21) sandbox -> LIMPORT . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 145
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 47

    (140) import_statement -> IMPORT . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 146
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 48

    (69) return_statement -> RETURN . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 147
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 49

    (137) delete_statement -> DEL . ID ;
    ID              shift and go to state 148


state 50

    (107) for_loop -> FOREACH . ( expression AS expression ) { program }
    (               shift and go to state 149


state 51

    (148) _tuple -> { . positional_args , }
    (149) _tuple -> { . positional_args }
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    positional_args                shift and go to state 150
    expression                     shift and go to state 86
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 52

    (108) for_loop -> FOR . ( expression ) { program }
    (               shift and go to state 151


state 53

    (66) break_statement -> DEBUG . ;
    ;               shift and go to state 152


state 54

    (67) break_statement -> SKIP . ;
    ;               shift and go to state 153


state 55

    (68) break_statement -> BREAK . ;
    ;               shift and go to state 154


state 56

    (114) variable_assignment -> LET . get_index = expression ;
    (115) variable_assignment -> LET . ID : ID = expression ;
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 157
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 155
    expression                     shift and go to state 156
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 57

    (109) while_loop -> WHILE . ( expression ) { program }
    (               shift and go to state 158


state 58

    (128) conditional -> if_statement . else_statement
    (129) conditional -> if_statement . else_if_loop else_statement
    (130) conditional -> if_statement . else_if_loop
    (131) conditional -> if_statement .
    (136) else_statement -> . ELSE { program }
    (133) else_if_loop -> . else_if_statement
    (134) else_if_loop -> . else_if_loop else_if_statement
    (135) else_if_statement -> . ELSE IF ( expression ) { program }
    ?               reduce using rule 131 (conditional -> if_statement .)
    (               reduce using rule 131 (conditional -> if_statement .)
    !               reduce using rule 131 (conditional -> if_statement .)
    +               reduce using rule 131 (conditional -> if_statement .)
    -               reduce using rule 131 (conditional -> if_statement .)
    *               reduce using rule 131 (conditional -> if_statement .)
    &               reduce using rule 131 (conditional -> if_statement .)
    ID              reduce using rule 131 (conditional -> if_statement .)
    $               reduce using rule 131 (conditional -> if_statement .)
    HTMLSTART       reduce using rule 131 (conditional -> if_statement .)
    PHPSTART        reduce using rule 131 (conditional -> if_statement .)
    LIMPORT         reduce using rule 131 (conditional -> if_statement .)
    .               reduce using rule 131 (conditional -> if_statement .)
    IMPORT          reduce using rule 131 (conditional -> if_statement .)
    RETURN          reduce using rule 131 (conditional -> if_statement .)
    DEL             reduce using rule 131 (conditional -> if_statement .)
    FOREACH         reduce using rule 131 (conditional -> if_statement .)
    FOR             reduce using rule 131 (conditional -> if_statement .)
    DEBUG           reduce using rule 131 (conditional -> if_statement .)
    SKIP            reduce using rule 131 (conditional -> if_statement .)
    BREAK           reduce using rule 131 (conditional -> if_statement .)
    LET             reduce using rule 131 (conditional -> if_statement .)
    WHILE           reduce using rule 131 (conditional -> if_statement .)
    NAMESPACE       reduce using rule 131 (conditional -> if_statement .)
    CLASS           reduce using rule 131 (conditional -> if_statement .)
    FUNC            reduce using rule 131 (conditional -> if_statement .)
    INIT            reduce using rule 131 (conditional -> if_statement .)
    [               reduce using rule 131 (conditional -> if_statement .)
    {               reduce using rule 131 (conditional -> if_statement .)
    STRING          reduce using rule 131 (conditional -> if_statement .)
    CHAR            reduce using rule 131 (conditional -> if_statement .)
    FALSE           reduce using rule 131 (conditional -> if_statement .)
    TRUE            reduce using rule 131 (conditional -> if_statement .)
    FLOAT           reduce using rule 131 (conditional -> if_statement .)
    INT             reduce using rule 131 (conditional -> if_statement .)
    NULL            reduce using rule 131 (conditional -> if_statement .)
    #               reduce using rule 131 (conditional -> if_statement .)
    NEW             reduce using rule 131 (conditional -> if_statement .)
    PYTHON_CODE_EXEC reduce using rule 131 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 131 (conditional -> if_statement .)
    IF              reduce using rule 131 (conditional -> if_statement .)
    $end            reduce using rule 131 (conditional -> if_statement .)
    PHPEND          reduce using rule 131 (conditional -> if_statement .)
    }               reduce using rule 131 (conditional -> if_statement .)
    ELSE            shift and go to state 161

    else_statement                 shift and go to state 159
    else_if_loop                   shift and go to state 160
    else_if_statement              shift and go to state 162

state 59

    (103) class_declaration -> NAMESPACE . ID ;
    (104) class_declaration -> NAMESPACE . ID { program }
    ID              shift and go to state 163


state 60

    (105) class_declaration -> CLASS . ID EXTENDS ID { program }
    (106) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 164


state 61

    (89) function_declaration -> FUNC . ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> FUNC . ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (96) function_declaration -> FUNC . ID ( empty ) { program }
    (97) function_declaration -> FUNC . ID ( empty ) : expression { program }
    (98) function_declaration -> FUNC . ID ( function_arguments ) { program }
    (99) function_declaration -> FUNC . ID ( function_arguments ) : expression { program }
    ID              shift and go to state 165


state 62

    (91) function_declaration -> INIT . ( function_arguments ) { program } ;
    (               shift and go to state 166


state 63

    (142) assoc_array -> [ . assoc_array_items ]
    (143) assoc_array -> [ . empty ]
    (150) _list -> [ . positional_args , ]
    (151) _list -> [ . positional_args ]
    (144) assoc_array_items -> . expression SARROW expression
    (145) assoc_array_items -> . assoc_array_items , expression SARROW expression
    (169) empty -> .
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ]               reduce using rule 169 (empty -> .)
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    assoc_array_items              shift and go to state 167
    empty                          shift and go to state 168
    positional_args                shift and go to state 169
    expression                     shift and go to state 170
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 64

    (160) string -> STRING .
    >               reduce using rule 160 (string -> STRING .)
    <               reduce using rule 160 (string -> STRING .)
    &               reduce using rule 160 (string -> STRING .)
    |               reduce using rule 160 (string -> STRING .)
    EQ_GREATER      reduce using rule 160 (string -> STRING .)
    EQ_LESS         reduce using rule 160 (string -> STRING .)
    NOT_EQEQ        reduce using rule 160 (string -> STRING .)
    EQEQ            reduce using rule 160 (string -> STRING .)
    %               reduce using rule 160 (string -> STRING .)
    *               reduce using rule 160 (string -> STRING .)
    /               reduce using rule 160 (string -> STRING .)
    -               reduce using rule 160 (string -> STRING .)
    +               reduce using rule 160 (string -> STRING .)
    .               reduce using rule 160 (string -> STRING .)
    COLON_COLON     reduce using rule 160 (string -> STRING .)
    ^               reduce using rule 160 (string -> STRING .)
    [               reduce using rule 160 (string -> STRING .)
    (               reduce using rule 160 (string -> STRING .)
    $               reduce using rule 160 (string -> STRING .)
    ID              reduce using rule 160 (string -> STRING .)
    !               reduce using rule 160 (string -> STRING .)
    ?               reduce using rule 160 (string -> STRING .)
    HTMLSTART       reduce using rule 160 (string -> STRING .)
    {               reduce using rule 160 (string -> STRING .)
    STRING          reduce using rule 160 (string -> STRING .)
    CHAR            reduce using rule 160 (string -> STRING .)
    FALSE           reduce using rule 160 (string -> STRING .)
    TRUE            reduce using rule 160 (string -> STRING .)
    FLOAT           reduce using rule 160 (string -> STRING .)
    INT             reduce using rule 160 (string -> STRING .)
    NULL            reduce using rule 160 (string -> STRING .)
    #               reduce using rule 160 (string -> STRING .)
    NEW             reduce using rule 160 (string -> STRING .)
    PYTHON_CODE_EXEC reduce using rule 160 (string -> STRING .)
    PYTHON_CODE     reduce using rule 160 (string -> STRING .)
    PHPSTART        reduce using rule 160 (string -> STRING .)
    LIMPORT         reduce using rule 160 (string -> STRING .)
    IMPORT          reduce using rule 160 (string -> STRING .)
    RETURN          reduce using rule 160 (string -> STRING .)
    DEL             reduce using rule 160 (string -> STRING .)
    FOREACH         reduce using rule 160 (string -> STRING .)
    FOR             reduce using rule 160 (string -> STRING .)
    DEBUG           reduce using rule 160 (string -> STRING .)
    SKIP            reduce using rule 160 (string -> STRING .)
    BREAK           reduce using rule 160 (string -> STRING .)
    LET             reduce using rule 160 (string -> STRING .)
    WHILE           reduce using rule 160 (string -> STRING .)
    NAMESPACE       reduce using rule 160 (string -> STRING .)
    CLASS           reduce using rule 160 (string -> STRING .)
    FUNC            reduce using rule 160 (string -> STRING .)
    INIT            reduce using rule 160 (string -> STRING .)
    IF              reduce using rule 160 (string -> STRING .)
    $end            reduce using rule 160 (string -> STRING .)
    ;               reduce using rule 160 (string -> STRING .)
    ,               reduce using rule 160 (string -> STRING .)
    PHPEND          reduce using rule 160 (string -> STRING .)
    }               reduce using rule 160 (string -> STRING .)
    )               reduce using rule 160 (string -> STRING .)
    HTMLEND         reduce using rule 160 (string -> STRING .)
    SARROW          reduce using rule 160 (string -> STRING .)
    ]               reduce using rule 160 (string -> STRING .)
    EQ_DIV          reduce using rule 160 (string -> STRING .)
    EQ_MOD          reduce using rule 160 (string -> STRING .)
    EQ_MUL          reduce using rule 160 (string -> STRING .)
    EQ_SUB          reduce using rule 160 (string -> STRING .)
    EQ_ADD          reduce using rule 160 (string -> STRING .)
    =               reduce using rule 160 (string -> STRING .)
    AS              reduce using rule 160 (string -> STRING .)


state 65

    (161) string -> CHAR .
    >               reduce using rule 161 (string -> CHAR .)
    <               reduce using rule 161 (string -> CHAR .)
    &               reduce using rule 161 (string -> CHAR .)
    |               reduce using rule 161 (string -> CHAR .)
    EQ_GREATER      reduce using rule 161 (string -> CHAR .)
    EQ_LESS         reduce using rule 161 (string -> CHAR .)
    NOT_EQEQ        reduce using rule 161 (string -> CHAR .)
    EQEQ            reduce using rule 161 (string -> CHAR .)
    %               reduce using rule 161 (string -> CHAR .)
    *               reduce using rule 161 (string -> CHAR .)
    /               reduce using rule 161 (string -> CHAR .)
    -               reduce using rule 161 (string -> CHAR .)
    +               reduce using rule 161 (string -> CHAR .)
    .               reduce using rule 161 (string -> CHAR .)
    COLON_COLON     reduce using rule 161 (string -> CHAR .)
    ^               reduce using rule 161 (string -> CHAR .)
    [               reduce using rule 161 (string -> CHAR .)
    (               reduce using rule 161 (string -> CHAR .)
    $               reduce using rule 161 (string -> CHAR .)
    ID              reduce using rule 161 (string -> CHAR .)
    !               reduce using rule 161 (string -> CHAR .)
    ?               reduce using rule 161 (string -> CHAR .)
    HTMLSTART       reduce using rule 161 (string -> CHAR .)
    {               reduce using rule 161 (string -> CHAR .)
    STRING          reduce using rule 161 (string -> CHAR .)
    CHAR            reduce using rule 161 (string -> CHAR .)
    FALSE           reduce using rule 161 (string -> CHAR .)
    TRUE            reduce using rule 161 (string -> CHAR .)
    FLOAT           reduce using rule 161 (string -> CHAR .)
    INT             reduce using rule 161 (string -> CHAR .)
    NULL            reduce using rule 161 (string -> CHAR .)
    #               reduce using rule 161 (string -> CHAR .)
    NEW             reduce using rule 161 (string -> CHAR .)
    PYTHON_CODE_EXEC reduce using rule 161 (string -> CHAR .)
    PYTHON_CODE     reduce using rule 161 (string -> CHAR .)
    PHPSTART        reduce using rule 161 (string -> CHAR .)
    LIMPORT         reduce using rule 161 (string -> CHAR .)
    IMPORT          reduce using rule 161 (string -> CHAR .)
    RETURN          reduce using rule 161 (string -> CHAR .)
    DEL             reduce using rule 161 (string -> CHAR .)
    FOREACH         reduce using rule 161 (string -> CHAR .)
    FOR             reduce using rule 161 (string -> CHAR .)
    DEBUG           reduce using rule 161 (string -> CHAR .)
    SKIP            reduce using rule 161 (string -> CHAR .)
    BREAK           reduce using rule 161 (string -> CHAR .)
    LET             reduce using rule 161 (string -> CHAR .)
    WHILE           reduce using rule 161 (string -> CHAR .)
    NAMESPACE       reduce using rule 161 (string -> CHAR .)
    CLASS           reduce using rule 161 (string -> CHAR .)
    FUNC            reduce using rule 161 (string -> CHAR .)
    INIT            reduce using rule 161 (string -> CHAR .)
    IF              reduce using rule 161 (string -> CHAR .)
    $end            reduce using rule 161 (string -> CHAR .)
    ;               reduce using rule 161 (string -> CHAR .)
    ,               reduce using rule 161 (string -> CHAR .)
    PHPEND          reduce using rule 161 (string -> CHAR .)
    }               reduce using rule 161 (string -> CHAR .)
    )               reduce using rule 161 (string -> CHAR .)
    HTMLEND         reduce using rule 161 (string -> CHAR .)
    SARROW          reduce using rule 161 (string -> CHAR .)
    ]               reduce using rule 161 (string -> CHAR .)
    EQ_DIV          reduce using rule 161 (string -> CHAR .)
    EQ_MOD          reduce using rule 161 (string -> CHAR .)
    EQ_MUL          reduce using rule 161 (string -> CHAR .)
    EQ_SUB          reduce using rule 161 (string -> CHAR .)
    EQ_ADD          reduce using rule 161 (string -> CHAR .)
    =               reduce using rule 161 (string -> CHAR .)
    AS              reduce using rule 161 (string -> CHAR .)


state 66

    (163) bool -> FALSE .
    >               reduce using rule 163 (bool -> FALSE .)
    <               reduce using rule 163 (bool -> FALSE .)
    &               reduce using rule 163 (bool -> FALSE .)
    |               reduce using rule 163 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 163 (bool -> FALSE .)
    EQ_LESS         reduce using rule 163 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 163 (bool -> FALSE .)
    EQEQ            reduce using rule 163 (bool -> FALSE .)
    %               reduce using rule 163 (bool -> FALSE .)
    *               reduce using rule 163 (bool -> FALSE .)
    /               reduce using rule 163 (bool -> FALSE .)
    -               reduce using rule 163 (bool -> FALSE .)
    +               reduce using rule 163 (bool -> FALSE .)
    .               reduce using rule 163 (bool -> FALSE .)
    COLON_COLON     reduce using rule 163 (bool -> FALSE .)
    ^               reduce using rule 163 (bool -> FALSE .)
    [               reduce using rule 163 (bool -> FALSE .)
    (               reduce using rule 163 (bool -> FALSE .)
    $               reduce using rule 163 (bool -> FALSE .)
    ID              reduce using rule 163 (bool -> FALSE .)
    !               reduce using rule 163 (bool -> FALSE .)
    ?               reduce using rule 163 (bool -> FALSE .)
    HTMLSTART       reduce using rule 163 (bool -> FALSE .)
    {               reduce using rule 163 (bool -> FALSE .)
    STRING          reduce using rule 163 (bool -> FALSE .)
    CHAR            reduce using rule 163 (bool -> FALSE .)
    FALSE           reduce using rule 163 (bool -> FALSE .)
    TRUE            reduce using rule 163 (bool -> FALSE .)
    FLOAT           reduce using rule 163 (bool -> FALSE .)
    INT             reduce using rule 163 (bool -> FALSE .)
    NULL            reduce using rule 163 (bool -> FALSE .)
    #               reduce using rule 163 (bool -> FALSE .)
    NEW             reduce using rule 163 (bool -> FALSE .)
    PYTHON_CODE_EXEC reduce using rule 163 (bool -> FALSE .)
    PYTHON_CODE     reduce using rule 163 (bool -> FALSE .)
    PHPSTART        reduce using rule 163 (bool -> FALSE .)
    LIMPORT         reduce using rule 163 (bool -> FALSE .)
    IMPORT          reduce using rule 163 (bool -> FALSE .)
    RETURN          reduce using rule 163 (bool -> FALSE .)
    DEL             reduce using rule 163 (bool -> FALSE .)
    FOREACH         reduce using rule 163 (bool -> FALSE .)
    FOR             reduce using rule 163 (bool -> FALSE .)
    DEBUG           reduce using rule 163 (bool -> FALSE .)
    SKIP            reduce using rule 163 (bool -> FALSE .)
    BREAK           reduce using rule 163 (bool -> FALSE .)
    LET             reduce using rule 163 (bool -> FALSE .)
    WHILE           reduce using rule 163 (bool -> FALSE .)
    NAMESPACE       reduce using rule 163 (bool -> FALSE .)
    CLASS           reduce using rule 163 (bool -> FALSE .)
    FUNC            reduce using rule 163 (bool -> FALSE .)
    INIT            reduce using rule 163 (bool -> FALSE .)
    IF              reduce using rule 163 (bool -> FALSE .)
    $end            reduce using rule 163 (bool -> FALSE .)
    ;               reduce using rule 163 (bool -> FALSE .)
    ,               reduce using rule 163 (bool -> FALSE .)
    PHPEND          reduce using rule 163 (bool -> FALSE .)
    }               reduce using rule 163 (bool -> FALSE .)
    )               reduce using rule 163 (bool -> FALSE .)
    HTMLEND         reduce using rule 163 (bool -> FALSE .)
    SARROW          reduce using rule 163 (bool -> FALSE .)
    ]               reduce using rule 163 (bool -> FALSE .)
    EQ_DIV          reduce using rule 163 (bool -> FALSE .)
    EQ_MOD          reduce using rule 163 (bool -> FALSE .)
    EQ_MUL          reduce using rule 163 (bool -> FALSE .)
    EQ_SUB          reduce using rule 163 (bool -> FALSE .)
    EQ_ADD          reduce using rule 163 (bool -> FALSE .)
    =               reduce using rule 163 (bool -> FALSE .)
    AS              reduce using rule 163 (bool -> FALSE .)


state 67

    (164) bool -> TRUE .
    >               reduce using rule 164 (bool -> TRUE .)
    <               reduce using rule 164 (bool -> TRUE .)
    &               reduce using rule 164 (bool -> TRUE .)
    |               reduce using rule 164 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 164 (bool -> TRUE .)
    EQ_LESS         reduce using rule 164 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 164 (bool -> TRUE .)
    EQEQ            reduce using rule 164 (bool -> TRUE .)
    %               reduce using rule 164 (bool -> TRUE .)
    *               reduce using rule 164 (bool -> TRUE .)
    /               reduce using rule 164 (bool -> TRUE .)
    -               reduce using rule 164 (bool -> TRUE .)
    +               reduce using rule 164 (bool -> TRUE .)
    .               reduce using rule 164 (bool -> TRUE .)
    COLON_COLON     reduce using rule 164 (bool -> TRUE .)
    ^               reduce using rule 164 (bool -> TRUE .)
    [               reduce using rule 164 (bool -> TRUE .)
    (               reduce using rule 164 (bool -> TRUE .)
    $               reduce using rule 164 (bool -> TRUE .)
    ID              reduce using rule 164 (bool -> TRUE .)
    !               reduce using rule 164 (bool -> TRUE .)
    ?               reduce using rule 164 (bool -> TRUE .)
    HTMLSTART       reduce using rule 164 (bool -> TRUE .)
    {               reduce using rule 164 (bool -> TRUE .)
    STRING          reduce using rule 164 (bool -> TRUE .)
    CHAR            reduce using rule 164 (bool -> TRUE .)
    FALSE           reduce using rule 164 (bool -> TRUE .)
    TRUE            reduce using rule 164 (bool -> TRUE .)
    FLOAT           reduce using rule 164 (bool -> TRUE .)
    INT             reduce using rule 164 (bool -> TRUE .)
    NULL            reduce using rule 164 (bool -> TRUE .)
    #               reduce using rule 164 (bool -> TRUE .)
    NEW             reduce using rule 164 (bool -> TRUE .)
    PYTHON_CODE_EXEC reduce using rule 164 (bool -> TRUE .)
    PYTHON_CODE     reduce using rule 164 (bool -> TRUE .)
    PHPSTART        reduce using rule 164 (bool -> TRUE .)
    LIMPORT         reduce using rule 164 (bool -> TRUE .)
    IMPORT          reduce using rule 164 (bool -> TRUE .)
    RETURN          reduce using rule 164 (bool -> TRUE .)
    DEL             reduce using rule 164 (bool -> TRUE .)
    FOREACH         reduce using rule 164 (bool -> TRUE .)
    FOR             reduce using rule 164 (bool -> TRUE .)
    DEBUG           reduce using rule 164 (bool -> TRUE .)
    SKIP            reduce using rule 164 (bool -> TRUE .)
    BREAK           reduce using rule 164 (bool -> TRUE .)
    LET             reduce using rule 164 (bool -> TRUE .)
    WHILE           reduce using rule 164 (bool -> TRUE .)
    NAMESPACE       reduce using rule 164 (bool -> TRUE .)
    CLASS           reduce using rule 164 (bool -> TRUE .)
    FUNC            reduce using rule 164 (bool -> TRUE .)
    INIT            reduce using rule 164 (bool -> TRUE .)
    IF              reduce using rule 164 (bool -> TRUE .)
    $end            reduce using rule 164 (bool -> TRUE .)
    ;               reduce using rule 164 (bool -> TRUE .)
    ,               reduce using rule 164 (bool -> TRUE .)
    PHPEND          reduce using rule 164 (bool -> TRUE .)
    }               reduce using rule 164 (bool -> TRUE .)
    )               reduce using rule 164 (bool -> TRUE .)
    HTMLEND         reduce using rule 164 (bool -> TRUE .)
    SARROW          reduce using rule 164 (bool -> TRUE .)
    ]               reduce using rule 164 (bool -> TRUE .)
    EQ_DIV          reduce using rule 164 (bool -> TRUE .)
    EQ_MOD          reduce using rule 164 (bool -> TRUE .)
    EQ_MUL          reduce using rule 164 (bool -> TRUE .)
    EQ_SUB          reduce using rule 164 (bool -> TRUE .)
    EQ_ADD          reduce using rule 164 (bool -> TRUE .)
    =               reduce using rule 164 (bool -> TRUE .)
    AS              reduce using rule 164 (bool -> TRUE .)


state 68

    (162) float -> FLOAT .
    >               reduce using rule 162 (float -> FLOAT .)
    <               reduce using rule 162 (float -> FLOAT .)
    &               reduce using rule 162 (float -> FLOAT .)
    |               reduce using rule 162 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 162 (float -> FLOAT .)
    EQ_LESS         reduce using rule 162 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 162 (float -> FLOAT .)
    EQEQ            reduce using rule 162 (float -> FLOAT .)
    %               reduce using rule 162 (float -> FLOAT .)
    *               reduce using rule 162 (float -> FLOAT .)
    /               reduce using rule 162 (float -> FLOAT .)
    -               reduce using rule 162 (float -> FLOAT .)
    +               reduce using rule 162 (float -> FLOAT .)
    .               reduce using rule 162 (float -> FLOAT .)
    COLON_COLON     reduce using rule 162 (float -> FLOAT .)
    ^               reduce using rule 162 (float -> FLOAT .)
    [               reduce using rule 162 (float -> FLOAT .)
    (               reduce using rule 162 (float -> FLOAT .)
    $               reduce using rule 162 (float -> FLOAT .)
    ID              reduce using rule 162 (float -> FLOAT .)
    !               reduce using rule 162 (float -> FLOAT .)
    ?               reduce using rule 162 (float -> FLOAT .)
    HTMLSTART       reduce using rule 162 (float -> FLOAT .)
    {               reduce using rule 162 (float -> FLOAT .)
    STRING          reduce using rule 162 (float -> FLOAT .)
    CHAR            reduce using rule 162 (float -> FLOAT .)
    FALSE           reduce using rule 162 (float -> FLOAT .)
    TRUE            reduce using rule 162 (float -> FLOAT .)
    FLOAT           reduce using rule 162 (float -> FLOAT .)
    INT             reduce using rule 162 (float -> FLOAT .)
    NULL            reduce using rule 162 (float -> FLOAT .)
    #               reduce using rule 162 (float -> FLOAT .)
    NEW             reduce using rule 162 (float -> FLOAT .)
    PYTHON_CODE_EXEC reduce using rule 162 (float -> FLOAT .)
    PYTHON_CODE     reduce using rule 162 (float -> FLOAT .)
    PHPSTART        reduce using rule 162 (float -> FLOAT .)
    LIMPORT         reduce using rule 162 (float -> FLOAT .)
    IMPORT          reduce using rule 162 (float -> FLOAT .)
    RETURN          reduce using rule 162 (float -> FLOAT .)
    DEL             reduce using rule 162 (float -> FLOAT .)
    FOREACH         reduce using rule 162 (float -> FLOAT .)
    FOR             reduce using rule 162 (float -> FLOAT .)
    DEBUG           reduce using rule 162 (float -> FLOAT .)
    SKIP            reduce using rule 162 (float -> FLOAT .)
    BREAK           reduce using rule 162 (float -> FLOAT .)
    LET             reduce using rule 162 (float -> FLOAT .)
    WHILE           reduce using rule 162 (float -> FLOAT .)
    NAMESPACE       reduce using rule 162 (float -> FLOAT .)
    CLASS           reduce using rule 162 (float -> FLOAT .)
    FUNC            reduce using rule 162 (float -> FLOAT .)
    INIT            reduce using rule 162 (float -> FLOAT .)
    IF              reduce using rule 162 (float -> FLOAT .)
    $end            reduce using rule 162 (float -> FLOAT .)
    ;               reduce using rule 162 (float -> FLOAT .)
    ,               reduce using rule 162 (float -> FLOAT .)
    PHPEND          reduce using rule 162 (float -> FLOAT .)
    }               reduce using rule 162 (float -> FLOAT .)
    )               reduce using rule 162 (float -> FLOAT .)
    HTMLEND         reduce using rule 162 (float -> FLOAT .)
    SARROW          reduce using rule 162 (float -> FLOAT .)
    ]               reduce using rule 162 (float -> FLOAT .)
    EQ_DIV          reduce using rule 162 (float -> FLOAT .)
    EQ_MOD          reduce using rule 162 (float -> FLOAT .)
    EQ_MUL          reduce using rule 162 (float -> FLOAT .)
    EQ_SUB          reduce using rule 162 (float -> FLOAT .)
    EQ_ADD          reduce using rule 162 (float -> FLOAT .)
    =               reduce using rule 162 (float -> FLOAT .)
    AS              reduce using rule 162 (float -> FLOAT .)


state 69

    (159) int -> INT .
    >               reduce using rule 159 (int -> INT .)
    <               reduce using rule 159 (int -> INT .)
    &               reduce using rule 159 (int -> INT .)
    |               reduce using rule 159 (int -> INT .)
    EQ_GREATER      reduce using rule 159 (int -> INT .)
    EQ_LESS         reduce using rule 159 (int -> INT .)
    NOT_EQEQ        reduce using rule 159 (int -> INT .)
    EQEQ            reduce using rule 159 (int -> INT .)
    %               reduce using rule 159 (int -> INT .)
    *               reduce using rule 159 (int -> INT .)
    /               reduce using rule 159 (int -> INT .)
    -               reduce using rule 159 (int -> INT .)
    +               reduce using rule 159 (int -> INT .)
    .               reduce using rule 159 (int -> INT .)
    COLON_COLON     reduce using rule 159 (int -> INT .)
    ^               reduce using rule 159 (int -> INT .)
    [               reduce using rule 159 (int -> INT .)
    (               reduce using rule 159 (int -> INT .)
    $               reduce using rule 159 (int -> INT .)
    ID              reduce using rule 159 (int -> INT .)
    !               reduce using rule 159 (int -> INT .)
    ?               reduce using rule 159 (int -> INT .)
    HTMLSTART       reduce using rule 159 (int -> INT .)
    {               reduce using rule 159 (int -> INT .)
    STRING          reduce using rule 159 (int -> INT .)
    CHAR            reduce using rule 159 (int -> INT .)
    FALSE           reduce using rule 159 (int -> INT .)
    TRUE            reduce using rule 159 (int -> INT .)
    FLOAT           reduce using rule 159 (int -> INT .)
    INT             reduce using rule 159 (int -> INT .)
    NULL            reduce using rule 159 (int -> INT .)
    #               reduce using rule 159 (int -> INT .)
    NEW             reduce using rule 159 (int -> INT .)
    PYTHON_CODE_EXEC reduce using rule 159 (int -> INT .)
    PYTHON_CODE     reduce using rule 159 (int -> INT .)
    PHPSTART        reduce using rule 159 (int -> INT .)
    LIMPORT         reduce using rule 159 (int -> INT .)
    IMPORT          reduce using rule 159 (int -> INT .)
    RETURN          reduce using rule 159 (int -> INT .)
    DEL             reduce using rule 159 (int -> INT .)
    FOREACH         reduce using rule 159 (int -> INT .)
    FOR             reduce using rule 159 (int -> INT .)
    DEBUG           reduce using rule 159 (int -> INT .)
    SKIP            reduce using rule 159 (int -> INT .)
    BREAK           reduce using rule 159 (int -> INT .)
    LET             reduce using rule 159 (int -> INT .)
    WHILE           reduce using rule 159 (int -> INT .)
    NAMESPACE       reduce using rule 159 (int -> INT .)
    CLASS           reduce using rule 159 (int -> INT .)
    FUNC            reduce using rule 159 (int -> INT .)
    INIT            reduce using rule 159 (int -> INT .)
    IF              reduce using rule 159 (int -> INT .)
    $end            reduce using rule 159 (int -> INT .)
    ;               reduce using rule 159 (int -> INT .)
    ,               reduce using rule 159 (int -> INT .)
    PHPEND          reduce using rule 159 (int -> INT .)
    }               reduce using rule 159 (int -> INT .)
    )               reduce using rule 159 (int -> INT .)
    HTMLEND         reduce using rule 159 (int -> INT .)
    SARROW          reduce using rule 159 (int -> INT .)
    ]               reduce using rule 159 (int -> INT .)
    EQ_DIV          reduce using rule 159 (int -> INT .)
    EQ_MOD          reduce using rule 159 (int -> INT .)
    EQ_MUL          reduce using rule 159 (int -> INT .)
    EQ_SUB          reduce using rule 159 (int -> INT .)
    EQ_ADD          reduce using rule 159 (int -> INT .)
    =               reduce using rule 159 (int -> INT .)
    AS              reduce using rule 159 (int -> INT .)


state 70

    (141) null -> NULL .
    >               reduce using rule 141 (null -> NULL .)
    <               reduce using rule 141 (null -> NULL .)
    &               reduce using rule 141 (null -> NULL .)
    |               reduce using rule 141 (null -> NULL .)
    EQ_GREATER      reduce using rule 141 (null -> NULL .)
    EQ_LESS         reduce using rule 141 (null -> NULL .)
    NOT_EQEQ        reduce using rule 141 (null -> NULL .)
    EQEQ            reduce using rule 141 (null -> NULL .)
    %               reduce using rule 141 (null -> NULL .)
    *               reduce using rule 141 (null -> NULL .)
    /               reduce using rule 141 (null -> NULL .)
    -               reduce using rule 141 (null -> NULL .)
    +               reduce using rule 141 (null -> NULL .)
    .               reduce using rule 141 (null -> NULL .)
    COLON_COLON     reduce using rule 141 (null -> NULL .)
    ^               reduce using rule 141 (null -> NULL .)
    [               reduce using rule 141 (null -> NULL .)
    (               reduce using rule 141 (null -> NULL .)
    $               reduce using rule 141 (null -> NULL .)
    ID              reduce using rule 141 (null -> NULL .)
    !               reduce using rule 141 (null -> NULL .)
    ?               reduce using rule 141 (null -> NULL .)
    HTMLSTART       reduce using rule 141 (null -> NULL .)
    {               reduce using rule 141 (null -> NULL .)
    STRING          reduce using rule 141 (null -> NULL .)
    CHAR            reduce using rule 141 (null -> NULL .)
    FALSE           reduce using rule 141 (null -> NULL .)
    TRUE            reduce using rule 141 (null -> NULL .)
    FLOAT           reduce using rule 141 (null -> NULL .)
    INT             reduce using rule 141 (null -> NULL .)
    NULL            reduce using rule 141 (null -> NULL .)
    #               reduce using rule 141 (null -> NULL .)
    NEW             reduce using rule 141 (null -> NULL .)
    PYTHON_CODE_EXEC reduce using rule 141 (null -> NULL .)
    PYTHON_CODE     reduce using rule 141 (null -> NULL .)
    PHPSTART        reduce using rule 141 (null -> NULL .)
    LIMPORT         reduce using rule 141 (null -> NULL .)
    IMPORT          reduce using rule 141 (null -> NULL .)
    RETURN          reduce using rule 141 (null -> NULL .)
    DEL             reduce using rule 141 (null -> NULL .)
    FOREACH         reduce using rule 141 (null -> NULL .)
    FOR             reduce using rule 141 (null -> NULL .)
    DEBUG           reduce using rule 141 (null -> NULL .)
    SKIP            reduce using rule 141 (null -> NULL .)
    BREAK           reduce using rule 141 (null -> NULL .)
    LET             reduce using rule 141 (null -> NULL .)
    WHILE           reduce using rule 141 (null -> NULL .)
    NAMESPACE       reduce using rule 141 (null -> NULL .)
    CLASS           reduce using rule 141 (null -> NULL .)
    FUNC            reduce using rule 141 (null -> NULL .)
    INIT            reduce using rule 141 (null -> NULL .)
    IF              reduce using rule 141 (null -> NULL .)
    $end            reduce using rule 141 (null -> NULL .)
    ;               reduce using rule 141 (null -> NULL .)
    ,               reduce using rule 141 (null -> NULL .)
    PHPEND          reduce using rule 141 (null -> NULL .)
    }               reduce using rule 141 (null -> NULL .)
    )               reduce using rule 141 (null -> NULL .)
    HTMLEND         reduce using rule 141 (null -> NULL .)
    SARROW          reduce using rule 141 (null -> NULL .)
    ]               reduce using rule 141 (null -> NULL .)
    EQ_DIV          reduce using rule 141 (null -> NULL .)
    EQ_MOD          reduce using rule 141 (null -> NULL .)
    EQ_MUL          reduce using rule 141 (null -> NULL .)
    EQ_SUB          reduce using rule 141 (null -> NULL .)
    EQ_ADD          reduce using rule 141 (null -> NULL .)
    =               reduce using rule 141 (null -> NULL .)
    AS              reduce using rule 141 (null -> NULL .)


state 71

    (77) function_call -> # . DEPENDS expression
    (78) function_call -> # . DEFINE expression ? ID
    DEPENDS         shift and go to state 171
    DEFINE          shift and go to state 172


state 72

    (80) function_call -> NEW . expression ( empty )
    (81) function_call -> NEW . expression ( function_arguments )
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 173
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 73

    (167) python_code -> PYTHON_CODE_EXEC .
    ;               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    >               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    <               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    &               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    |               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_GREATER      reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_LESS         reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    NOT_EQEQ        reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQEQ            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    %               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    *               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    /               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    -               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    +               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    .               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    COLON_COLON     reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    ^               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    [               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    (               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    $               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    ID              reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    !               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    ?               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    HTMLSTART       reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    {               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    STRING          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    CHAR            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    FALSE           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    TRUE            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    FLOAT           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    INT             reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    NULL            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    #               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    NEW             reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE_EXEC reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE     reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    PHPSTART        reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    LIMPORT         reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    IMPORT          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    RETURN          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    DEL             reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    FOREACH         reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    FOR             reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    DEBUG           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    SKIP            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    BREAK           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    LET             reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    WHILE           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    NAMESPACE       reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    CLASS           reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    FUNC            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    INIT            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    IF              reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    $end            reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    ,               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    PHPEND          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    }               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    )               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    HTMLEND         reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    SARROW          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    ]               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_DIV          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MOD          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MUL          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_SUB          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    EQ_ADD          reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    =               reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)
    AS              reduce using rule 167 (python_code -> PYTHON_CODE_EXEC .)


state 74

    (168) python_code -> PYTHON_CODE .
    ;               reduce using rule 168 (python_code -> PYTHON_CODE .)
    >               reduce using rule 168 (python_code -> PYTHON_CODE .)
    <               reduce using rule 168 (python_code -> PYTHON_CODE .)
    &               reduce using rule 168 (python_code -> PYTHON_CODE .)
    |               reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 168 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 168 (python_code -> PYTHON_CODE .)
    %               reduce using rule 168 (python_code -> PYTHON_CODE .)
    *               reduce using rule 168 (python_code -> PYTHON_CODE .)
    /               reduce using rule 168 (python_code -> PYTHON_CODE .)
    -               reduce using rule 168 (python_code -> PYTHON_CODE .)
    +               reduce using rule 168 (python_code -> PYTHON_CODE .)
    .               reduce using rule 168 (python_code -> PYTHON_CODE .)
    COLON_COLON     reduce using rule 168 (python_code -> PYTHON_CODE .)
    ^               reduce using rule 168 (python_code -> PYTHON_CODE .)
    [               reduce using rule 168 (python_code -> PYTHON_CODE .)
    (               reduce using rule 168 (python_code -> PYTHON_CODE .)
    $               reduce using rule 168 (python_code -> PYTHON_CODE .)
    ID              reduce using rule 168 (python_code -> PYTHON_CODE .)
    !               reduce using rule 168 (python_code -> PYTHON_CODE .)
    ?               reduce using rule 168 (python_code -> PYTHON_CODE .)
    HTMLSTART       reduce using rule 168 (python_code -> PYTHON_CODE .)
    {               reduce using rule 168 (python_code -> PYTHON_CODE .)
    STRING          reduce using rule 168 (python_code -> PYTHON_CODE .)
    CHAR            reduce using rule 168 (python_code -> PYTHON_CODE .)
    FALSE           reduce using rule 168 (python_code -> PYTHON_CODE .)
    TRUE            reduce using rule 168 (python_code -> PYTHON_CODE .)
    FLOAT           reduce using rule 168 (python_code -> PYTHON_CODE .)
    INT             reduce using rule 168 (python_code -> PYTHON_CODE .)
    NULL            reduce using rule 168 (python_code -> PYTHON_CODE .)
    #               reduce using rule 168 (python_code -> PYTHON_CODE .)
    NEW             reduce using rule 168 (python_code -> PYTHON_CODE .)
    PYTHON_CODE_EXEC reduce using rule 168 (python_code -> PYTHON_CODE .)
    PYTHON_CODE     reduce using rule 168 (python_code -> PYTHON_CODE .)
    PHPSTART        reduce using rule 168 (python_code -> PYTHON_CODE .)
    LIMPORT         reduce using rule 168 (python_code -> PYTHON_CODE .)
    IMPORT          reduce using rule 168 (python_code -> PYTHON_CODE .)
    RETURN          reduce using rule 168 (python_code -> PYTHON_CODE .)
    DEL             reduce using rule 168 (python_code -> PYTHON_CODE .)
    FOREACH         reduce using rule 168 (python_code -> PYTHON_CODE .)
    FOR             reduce using rule 168 (python_code -> PYTHON_CODE .)
    DEBUG           reduce using rule 168 (python_code -> PYTHON_CODE .)
    SKIP            reduce using rule 168 (python_code -> PYTHON_CODE .)
    BREAK           reduce using rule 168 (python_code -> PYTHON_CODE .)
    LET             reduce using rule 168 (python_code -> PYTHON_CODE .)
    WHILE           reduce using rule 168 (python_code -> PYTHON_CODE .)
    NAMESPACE       reduce using rule 168 (python_code -> PYTHON_CODE .)
    CLASS           reduce using rule 168 (python_code -> PYTHON_CODE .)
    FUNC            reduce using rule 168 (python_code -> PYTHON_CODE .)
    INIT            reduce using rule 168 (python_code -> PYTHON_CODE .)
    IF              reduce using rule 168 (python_code -> PYTHON_CODE .)
    $end            reduce using rule 168 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 168 (python_code -> PYTHON_CODE .)
    PHPEND          reduce using rule 168 (python_code -> PYTHON_CODE .)
    }               reduce using rule 168 (python_code -> PYTHON_CODE .)
    )               reduce using rule 168 (python_code -> PYTHON_CODE .)
    HTMLEND         reduce using rule 168 (python_code -> PYTHON_CODE .)
    SARROW          reduce using rule 168 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_DIV          reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_MOD          reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_MUL          reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_SUB          reduce using rule 168 (python_code -> PYTHON_CODE .)
    EQ_ADD          reduce using rule 168 (python_code -> PYTHON_CODE .)
    =               reduce using rule 168 (python_code -> PYTHON_CODE .)
    AS              reduce using rule 168 (python_code -> PYTHON_CODE .)


state 75

    (132) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 174


state 76

    (3) program -> program statement .
    ?               reduce using rule 3 (program -> program statement .)
    (               reduce using rule 3 (program -> program statement .)
    !               reduce using rule 3 (program -> program statement .)
    +               reduce using rule 3 (program -> program statement .)
    -               reduce using rule 3 (program -> program statement .)
    *               reduce using rule 3 (program -> program statement .)
    &               reduce using rule 3 (program -> program statement .)
    ID              reduce using rule 3 (program -> program statement .)
    $               reduce using rule 3 (program -> program statement .)
    HTMLSTART       reduce using rule 3 (program -> program statement .)
    PHPSTART        reduce using rule 3 (program -> program statement .)
    LIMPORT         reduce using rule 3 (program -> program statement .)
    .               reduce using rule 3 (program -> program statement .)
    IMPORT          reduce using rule 3 (program -> program statement .)
    RETURN          reduce using rule 3 (program -> program statement .)
    DEL             reduce using rule 3 (program -> program statement .)
    FOREACH         reduce using rule 3 (program -> program statement .)
    FOR             reduce using rule 3 (program -> program statement .)
    DEBUG           reduce using rule 3 (program -> program statement .)
    SKIP            reduce using rule 3 (program -> program statement .)
    BREAK           reduce using rule 3 (program -> program statement .)
    LET             reduce using rule 3 (program -> program statement .)
    WHILE           reduce using rule 3 (program -> program statement .)
    NAMESPACE       reduce using rule 3 (program -> program statement .)
    CLASS           reduce using rule 3 (program -> program statement .)
    FUNC            reduce using rule 3 (program -> program statement .)
    INIT            reduce using rule 3 (program -> program statement .)
    [               reduce using rule 3 (program -> program statement .)
    {               reduce using rule 3 (program -> program statement .)
    STRING          reduce using rule 3 (program -> program statement .)
    CHAR            reduce using rule 3 (program -> program statement .)
    FALSE           reduce using rule 3 (program -> program statement .)
    TRUE            reduce using rule 3 (program -> program statement .)
    FLOAT           reduce using rule 3 (program -> program statement .)
    INT             reduce using rule 3 (program -> program statement .)
    NULL            reduce using rule 3 (program -> program statement .)
    #               reduce using rule 3 (program -> program statement .)
    NEW             reduce using rule 3 (program -> program statement .)
    PYTHON_CODE_EXEC reduce using rule 3 (program -> program statement .)
    PYTHON_CODE     reduce using rule 3 (program -> program statement .)
    IF              reduce using rule 3 (program -> program statement .)
    $end            reduce using rule 3 (program -> program statement .)
    PHPEND          reduce using rule 3 (program -> program statement .)
    }               reduce using rule 3 (program -> program statement .)


state 77

    (58) expression -> ? . HTMLEND
    HTMLEND         shift and go to state 79


state 78

    (4) statement -> ? expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 175
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 79

    (58) expression -> ? HTMLEND .
    >               reduce using rule 58 (expression -> ? HTMLEND .)
    <               reduce using rule 58 (expression -> ? HTMLEND .)
    &               reduce using rule 58 (expression -> ? HTMLEND .)
    |               reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_GREATER      reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_LESS         reduce using rule 58 (expression -> ? HTMLEND .)
    NOT_EQEQ        reduce using rule 58 (expression -> ? HTMLEND .)
    EQEQ            reduce using rule 58 (expression -> ? HTMLEND .)
    %               reduce using rule 58 (expression -> ? HTMLEND .)
    *               reduce using rule 58 (expression -> ? HTMLEND .)
    /               reduce using rule 58 (expression -> ? HTMLEND .)
    -               reduce using rule 58 (expression -> ? HTMLEND .)
    +               reduce using rule 58 (expression -> ? HTMLEND .)
    .               reduce using rule 58 (expression -> ? HTMLEND .)
    COLON_COLON     reduce using rule 58 (expression -> ? HTMLEND .)
    ^               reduce using rule 58 (expression -> ? HTMLEND .)
    [               reduce using rule 58 (expression -> ? HTMLEND .)
    (               reduce using rule 58 (expression -> ? HTMLEND .)
    $               reduce using rule 58 (expression -> ? HTMLEND .)
    ID              reduce using rule 58 (expression -> ? HTMLEND .)
    !               reduce using rule 58 (expression -> ? HTMLEND .)
    ?               reduce using rule 58 (expression -> ? HTMLEND .)
    HTMLSTART       reduce using rule 58 (expression -> ? HTMLEND .)
    {               reduce using rule 58 (expression -> ? HTMLEND .)
    STRING          reduce using rule 58 (expression -> ? HTMLEND .)
    CHAR            reduce using rule 58 (expression -> ? HTMLEND .)
    FALSE           reduce using rule 58 (expression -> ? HTMLEND .)
    TRUE            reduce using rule 58 (expression -> ? HTMLEND .)
    FLOAT           reduce using rule 58 (expression -> ? HTMLEND .)
    INT             reduce using rule 58 (expression -> ? HTMLEND .)
    NULL            reduce using rule 58 (expression -> ? HTMLEND .)
    #               reduce using rule 58 (expression -> ? HTMLEND .)
    NEW             reduce using rule 58 (expression -> ? HTMLEND .)
    PYTHON_CODE_EXEC reduce using rule 58 (expression -> ? HTMLEND .)
    PYTHON_CODE     reduce using rule 58 (expression -> ? HTMLEND .)
    PHPSTART        reduce using rule 58 (expression -> ? HTMLEND .)
    LIMPORT         reduce using rule 58 (expression -> ? HTMLEND .)
    IMPORT          reduce using rule 58 (expression -> ? HTMLEND .)
    RETURN          reduce using rule 58 (expression -> ? HTMLEND .)
    DEL             reduce using rule 58 (expression -> ? HTMLEND .)
    FOREACH         reduce using rule 58 (expression -> ? HTMLEND .)
    FOR             reduce using rule 58 (expression -> ? HTMLEND .)
    DEBUG           reduce using rule 58 (expression -> ? HTMLEND .)
    SKIP            reduce using rule 58 (expression -> ? HTMLEND .)
    BREAK           reduce using rule 58 (expression -> ? HTMLEND .)
    LET             reduce using rule 58 (expression -> ? HTMLEND .)
    WHILE           reduce using rule 58 (expression -> ? HTMLEND .)
    NAMESPACE       reduce using rule 58 (expression -> ? HTMLEND .)
    CLASS           reduce using rule 58 (expression -> ? HTMLEND .)
    FUNC            reduce using rule 58 (expression -> ? HTMLEND .)
    INIT            reduce using rule 58 (expression -> ? HTMLEND .)
    IF              reduce using rule 58 (expression -> ? HTMLEND .)
    $end            reduce using rule 58 (expression -> ? HTMLEND .)
    ;               reduce using rule 58 (expression -> ? HTMLEND .)
    ,               reduce using rule 58 (expression -> ? HTMLEND .)
    PHPEND          reduce using rule 58 (expression -> ? HTMLEND .)
    }               reduce using rule 58 (expression -> ? HTMLEND .)
    )               reduce using rule 58 (expression -> ? HTMLEND .)
    HTMLEND         reduce using rule 58 (expression -> ? HTMLEND .)
    SARROW          reduce using rule 58 (expression -> ? HTMLEND .)
    ]               reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_DIV          reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_MOD          reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_MUL          reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_SUB          reduce using rule 58 (expression -> ? HTMLEND .)
    EQ_ADD          reduce using rule 58 (expression -> ? HTMLEND .)
    =               reduce using rule 58 (expression -> ? HTMLEND .)
    AS              reduce using rule 58 (expression -> ? HTMLEND .)


state 80

    (33) expression -> get_index .
    ;               reduce using rule 33 (expression -> get_index .)
    >               reduce using rule 33 (expression -> get_index .)
    <               reduce using rule 33 (expression -> get_index .)
    &               reduce using rule 33 (expression -> get_index .)
    |               reduce using rule 33 (expression -> get_index .)
    EQ_GREATER      reduce using rule 33 (expression -> get_index .)
    EQ_LESS         reduce using rule 33 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 33 (expression -> get_index .)
    EQEQ            reduce using rule 33 (expression -> get_index .)
    %               reduce using rule 33 (expression -> get_index .)
    *               reduce using rule 33 (expression -> get_index .)
    /               reduce using rule 33 (expression -> get_index .)
    -               reduce using rule 33 (expression -> get_index .)
    +               reduce using rule 33 (expression -> get_index .)
    .               reduce using rule 33 (expression -> get_index .)
    COLON_COLON     reduce using rule 33 (expression -> get_index .)
    ^               reduce using rule 33 (expression -> get_index .)
    [               reduce using rule 33 (expression -> get_index .)
    (               reduce using rule 33 (expression -> get_index .)
    $               reduce using rule 33 (expression -> get_index .)
    ID              reduce using rule 33 (expression -> get_index .)
    !               reduce using rule 33 (expression -> get_index .)
    ?               reduce using rule 33 (expression -> get_index .)
    HTMLSTART       reduce using rule 33 (expression -> get_index .)
    {               reduce using rule 33 (expression -> get_index .)
    STRING          reduce using rule 33 (expression -> get_index .)
    CHAR            reduce using rule 33 (expression -> get_index .)
    FALSE           reduce using rule 33 (expression -> get_index .)
    TRUE            reduce using rule 33 (expression -> get_index .)
    FLOAT           reduce using rule 33 (expression -> get_index .)
    INT             reduce using rule 33 (expression -> get_index .)
    NULL            reduce using rule 33 (expression -> get_index .)
    #               reduce using rule 33 (expression -> get_index .)
    NEW             reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 33 (expression -> get_index .)
    PHPSTART        reduce using rule 33 (expression -> get_index .)
    LIMPORT         reduce using rule 33 (expression -> get_index .)
    IMPORT          reduce using rule 33 (expression -> get_index .)
    RETURN          reduce using rule 33 (expression -> get_index .)
    DEL             reduce using rule 33 (expression -> get_index .)
    FOREACH         reduce using rule 33 (expression -> get_index .)
    FOR             reduce using rule 33 (expression -> get_index .)
    DEBUG           reduce using rule 33 (expression -> get_index .)
    SKIP            reduce using rule 33 (expression -> get_index .)
    BREAK           reduce using rule 33 (expression -> get_index .)
    LET             reduce using rule 33 (expression -> get_index .)
    WHILE           reduce using rule 33 (expression -> get_index .)
    NAMESPACE       reduce using rule 33 (expression -> get_index .)
    CLASS           reduce using rule 33 (expression -> get_index .)
    FUNC            reduce using rule 33 (expression -> get_index .)
    INIT            reduce using rule 33 (expression -> get_index .)
    IF              reduce using rule 33 (expression -> get_index .)
    $end            reduce using rule 33 (expression -> get_index .)
    ,               reduce using rule 33 (expression -> get_index .)
    PHPEND          reduce using rule 33 (expression -> get_index .)
    }               reduce using rule 33 (expression -> get_index .)
    )               reduce using rule 33 (expression -> get_index .)
    HTMLEND         reduce using rule 33 (expression -> get_index .)
    SARROW          reduce using rule 33 (expression -> get_index .)
    ]               reduce using rule 33 (expression -> get_index .)
    EQ_DIV          reduce using rule 33 (expression -> get_index .)
    EQ_MOD          reduce using rule 33 (expression -> get_index .)
    EQ_MUL          reduce using rule 33 (expression -> get_index .)
    EQ_SUB          reduce using rule 33 (expression -> get_index .)
    EQ_ADD          reduce using rule 33 (expression -> get_index .)
    =               reduce using rule 33 (expression -> get_index .)
    AS              reduce using rule 33 (expression -> get_index .)


state 81

    (34) expression -> function_call .
    ;               reduce using rule 34 (expression -> function_call .)
    >               reduce using rule 34 (expression -> function_call .)
    <               reduce using rule 34 (expression -> function_call .)
    &               reduce using rule 34 (expression -> function_call .)
    |               reduce using rule 34 (expression -> function_call .)
    EQ_GREATER      reduce using rule 34 (expression -> function_call .)
    EQ_LESS         reduce using rule 34 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 34 (expression -> function_call .)
    EQEQ            reduce using rule 34 (expression -> function_call .)
    %               reduce using rule 34 (expression -> function_call .)
    *               reduce using rule 34 (expression -> function_call .)
    /               reduce using rule 34 (expression -> function_call .)
    -               reduce using rule 34 (expression -> function_call .)
    +               reduce using rule 34 (expression -> function_call .)
    .               reduce using rule 34 (expression -> function_call .)
    COLON_COLON     reduce using rule 34 (expression -> function_call .)
    ^               reduce using rule 34 (expression -> function_call .)
    [               reduce using rule 34 (expression -> function_call .)
    (               reduce using rule 34 (expression -> function_call .)
    $               reduce using rule 34 (expression -> function_call .)
    ID              reduce using rule 34 (expression -> function_call .)
    !               reduce using rule 34 (expression -> function_call .)
    ?               reduce using rule 34 (expression -> function_call .)
    HTMLSTART       reduce using rule 34 (expression -> function_call .)
    {               reduce using rule 34 (expression -> function_call .)
    STRING          reduce using rule 34 (expression -> function_call .)
    CHAR            reduce using rule 34 (expression -> function_call .)
    FALSE           reduce using rule 34 (expression -> function_call .)
    TRUE            reduce using rule 34 (expression -> function_call .)
    FLOAT           reduce using rule 34 (expression -> function_call .)
    INT             reduce using rule 34 (expression -> function_call .)
    NULL            reduce using rule 34 (expression -> function_call .)
    #               reduce using rule 34 (expression -> function_call .)
    NEW             reduce using rule 34 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 34 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 34 (expression -> function_call .)
    PHPSTART        reduce using rule 34 (expression -> function_call .)
    LIMPORT         reduce using rule 34 (expression -> function_call .)
    IMPORT          reduce using rule 34 (expression -> function_call .)
    RETURN          reduce using rule 34 (expression -> function_call .)
    DEL             reduce using rule 34 (expression -> function_call .)
    FOREACH         reduce using rule 34 (expression -> function_call .)
    FOR             reduce using rule 34 (expression -> function_call .)
    DEBUG           reduce using rule 34 (expression -> function_call .)
    SKIP            reduce using rule 34 (expression -> function_call .)
    BREAK           reduce using rule 34 (expression -> function_call .)
    LET             reduce using rule 34 (expression -> function_call .)
    WHILE           reduce using rule 34 (expression -> function_call .)
    NAMESPACE       reduce using rule 34 (expression -> function_call .)
    CLASS           reduce using rule 34 (expression -> function_call .)
    FUNC            reduce using rule 34 (expression -> function_call .)
    INIT            reduce using rule 34 (expression -> function_call .)
    IF              reduce using rule 34 (expression -> function_call .)
    $end            reduce using rule 34 (expression -> function_call .)
    ,               reduce using rule 34 (expression -> function_call .)
    PHPEND          reduce using rule 34 (expression -> function_call .)
    }               reduce using rule 34 (expression -> function_call .)
    )               reduce using rule 34 (expression -> function_call .)
    HTMLEND         reduce using rule 34 (expression -> function_call .)
    SARROW          reduce using rule 34 (expression -> function_call .)
    ]               reduce using rule 34 (expression -> function_call .)
    EQ_DIV          reduce using rule 34 (expression -> function_call .)
    EQ_MOD          reduce using rule 34 (expression -> function_call .)
    EQ_MUL          reduce using rule 34 (expression -> function_call .)
    EQ_SUB          reduce using rule 34 (expression -> function_call .)
    EQ_ADD          reduce using rule 34 (expression -> function_call .)
    =               reduce using rule 34 (expression -> function_call .)
    AS              reduce using rule 34 (expression -> function_call .)


state 82

    (35) expression -> python_code .
    ;               reduce using rule 35 (expression -> python_code .)
    >               reduce using rule 35 (expression -> python_code .)
    <               reduce using rule 35 (expression -> python_code .)
    &               reduce using rule 35 (expression -> python_code .)
    |               reduce using rule 35 (expression -> python_code .)
    EQ_GREATER      reduce using rule 35 (expression -> python_code .)
    EQ_LESS         reduce using rule 35 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 35 (expression -> python_code .)
    EQEQ            reduce using rule 35 (expression -> python_code .)
    %               reduce using rule 35 (expression -> python_code .)
    *               reduce using rule 35 (expression -> python_code .)
    /               reduce using rule 35 (expression -> python_code .)
    -               reduce using rule 35 (expression -> python_code .)
    +               reduce using rule 35 (expression -> python_code .)
    .               reduce using rule 35 (expression -> python_code .)
    COLON_COLON     reduce using rule 35 (expression -> python_code .)
    ^               reduce using rule 35 (expression -> python_code .)
    [               reduce using rule 35 (expression -> python_code .)
    (               reduce using rule 35 (expression -> python_code .)
    $               reduce using rule 35 (expression -> python_code .)
    ID              reduce using rule 35 (expression -> python_code .)
    !               reduce using rule 35 (expression -> python_code .)
    ?               reduce using rule 35 (expression -> python_code .)
    HTMLSTART       reduce using rule 35 (expression -> python_code .)
    {               reduce using rule 35 (expression -> python_code .)
    STRING          reduce using rule 35 (expression -> python_code .)
    CHAR            reduce using rule 35 (expression -> python_code .)
    FALSE           reduce using rule 35 (expression -> python_code .)
    TRUE            reduce using rule 35 (expression -> python_code .)
    FLOAT           reduce using rule 35 (expression -> python_code .)
    INT             reduce using rule 35 (expression -> python_code .)
    NULL            reduce using rule 35 (expression -> python_code .)
    #               reduce using rule 35 (expression -> python_code .)
    NEW             reduce using rule 35 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 35 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 35 (expression -> python_code .)
    PHPSTART        reduce using rule 35 (expression -> python_code .)
    LIMPORT         reduce using rule 35 (expression -> python_code .)
    IMPORT          reduce using rule 35 (expression -> python_code .)
    RETURN          reduce using rule 35 (expression -> python_code .)
    DEL             reduce using rule 35 (expression -> python_code .)
    FOREACH         reduce using rule 35 (expression -> python_code .)
    FOR             reduce using rule 35 (expression -> python_code .)
    DEBUG           reduce using rule 35 (expression -> python_code .)
    SKIP            reduce using rule 35 (expression -> python_code .)
    BREAK           reduce using rule 35 (expression -> python_code .)
    LET             reduce using rule 35 (expression -> python_code .)
    WHILE           reduce using rule 35 (expression -> python_code .)
    NAMESPACE       reduce using rule 35 (expression -> python_code .)
    CLASS           reduce using rule 35 (expression -> python_code .)
    FUNC            reduce using rule 35 (expression -> python_code .)
    INIT            reduce using rule 35 (expression -> python_code .)
    IF              reduce using rule 35 (expression -> python_code .)
    $end            reduce using rule 35 (expression -> python_code .)
    ,               reduce using rule 35 (expression -> python_code .)
    PHPEND          reduce using rule 35 (expression -> python_code .)
    }               reduce using rule 35 (expression -> python_code .)
    )               reduce using rule 35 (expression -> python_code .)
    HTMLEND         reduce using rule 35 (expression -> python_code .)
    SARROW          reduce using rule 35 (expression -> python_code .)
    ]               reduce using rule 35 (expression -> python_code .)
    EQ_DIV          reduce using rule 35 (expression -> python_code .)
    EQ_MOD          reduce using rule 35 (expression -> python_code .)
    EQ_MUL          reduce using rule 35 (expression -> python_code .)
    EQ_SUB          reduce using rule 35 (expression -> python_code .)
    EQ_ADD          reduce using rule 35 (expression -> python_code .)
    =               reduce using rule 35 (expression -> python_code .)
    AS              reduce using rule 35 (expression -> python_code .)


state 83

    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    OF              shift and go to state 126
    ;               reduce using rule 166 (id -> ID .)
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    )               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    FUNC            reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    HTMLEND         reduce using rule 166 (id -> ID .)
    SARROW          reduce using rule 166 (id -> ID .)
    ]               reduce using rule 166 (id -> ID .)
    EQ_DIV          reduce using rule 166 (id -> ID .)
    EQ_MOD          reduce using rule 166 (id -> ID .)
    EQ_MUL          reduce using rule 166 (id -> ID .)
    EQ_SUB          reduce using rule 166 (id -> ID .)
    EQ_ADD          reduce using rule 166 (id -> ID .)
    =               reduce using rule 166 (id -> ID .)
    AS              reduce using rule 166 (id -> ID .)
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 84

    (56) expression -> $ . expression
    (84) function_call -> $ . ID TARROW ID ( empty )
    (85) function_call -> $ . ID TARROW ID ( function_arguments )
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 176
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 137
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 85

    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    ENV             shift and go to state 141


state 86

    (110) positional_args -> expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    ;               reduce using rule 110 (positional_args -> expression .)
    PHPSTART        reduce using rule 110 (positional_args -> expression .)
    LIMPORT         reduce using rule 110 (positional_args -> expression .)
    IMPORT          reduce using rule 110 (positional_args -> expression .)
    RETURN          reduce using rule 110 (positional_args -> expression .)
    DEL             reduce using rule 110 (positional_args -> expression .)
    FOREACH         reduce using rule 110 (positional_args -> expression .)
    FOR             reduce using rule 110 (positional_args -> expression .)
    DEBUG           reduce using rule 110 (positional_args -> expression .)
    SKIP            reduce using rule 110 (positional_args -> expression .)
    BREAK           reduce using rule 110 (positional_args -> expression .)
    LET             reduce using rule 110 (positional_args -> expression .)
    WHILE           reduce using rule 110 (positional_args -> expression .)
    NAMESPACE       reduce using rule 110 (positional_args -> expression .)
    CLASS           reduce using rule 110 (positional_args -> expression .)
    FUNC            reduce using rule 110 (positional_args -> expression .)
    INIT            reduce using rule 110 (positional_args -> expression .)
    IF              reduce using rule 110 (positional_args -> expression .)
    $end            reduce using rule 110 (positional_args -> expression .)
    ,               reduce using rule 110 (positional_args -> expression .)
    PHPEND          reduce using rule 110 (positional_args -> expression .)
    }               reduce using rule 110 (positional_args -> expression .)
    )               reduce using rule 110 (positional_args -> expression .)
    HTMLEND         reduce using rule 110 (positional_args -> expression .)
    SARROW          reduce using rule 110 (positional_args -> expression .)
    ]               reduce using rule 110 (positional_args -> expression .)
    EQ_DIV          reduce using rule 110 (positional_args -> expression .)
    EQ_MOD          reduce using rule 110 (positional_args -> expression .)
    EQ_MUL          reduce using rule 110 (positional_args -> expression .)
    EQ_SUB          reduce using rule 110 (positional_args -> expression .)
    EQ_ADD          reduce using rule 110 (positional_args -> expression .)
    =               reduce using rule 110 (positional_args -> expression .)
    AS              reduce using rule 110 (positional_args -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 87

    (37) expression -> expression > . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 177
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 88

    (38) expression -> expression < . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 178
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 89

    (42) expression -> expression & . expression
    (54) expression -> & . ID
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 180
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 179
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 90

    (43) expression -> expression | . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 181
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 91

    (44) expression -> expression EQ_GREATER . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 182
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 92

    (45) expression -> expression EQ_LESS . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 183
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 93

    (46) expression -> expression NOT_EQEQ . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 184
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 94

    (47) expression -> expression EQEQ . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 185
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 95

    (48) expression -> expression % . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 186
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 96

    (49) expression -> expression * . expression
    (53) expression -> * . ID
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 188
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 187
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 97

    (50) expression -> expression / . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 189
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 98

    (51) expression -> expression - . expression
    (41) expression -> - . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 190
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 99

    (52) expression -> expression + . expression
    (40) expression -> + . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 191
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 100

    (57) expression -> expression . . expression
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ENV             shift and go to state 141
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 192
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 101

    (165) class_attribute -> expression COLON_COLON . ID
    ID              shift and go to state 193


state 102

    (112) kwargs -> ID . = expression
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    =               shift and go to state 194
    OF              shift and go to state 126
    ;               reduce using rule 166 (id -> ID .)
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    FUNC            reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    )               reduce using rule 166 (id -> ID .)
    HTMLEND         reduce using rule 166 (id -> ID .)
    SARROW          reduce using rule 166 (id -> ID .)
    ]               reduce using rule 166 (id -> ID .)
    EQ_DIV          reduce using rule 166 (id -> ID .)
    EQ_MOD          reduce using rule 166 (id -> ID .)
    EQ_MUL          reduce using rule 166 (id -> ID .)
    EQ_SUB          reduce using rule 166 (id -> ID .)
    EQ_ADD          reduce using rule 166 (id -> ID .)
    AS              reduce using rule 166 (id -> ID .)
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 103

    (146) get_index -> expression ^ . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 195
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 104

    (147) get_index -> expression [ . expression ]
    (142) assoc_array -> [ . assoc_array_items ]
    (143) assoc_array -> [ . empty ]
    (150) _list -> [ . positional_args , ]
    (151) _list -> [ . positional_args ]
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (144) assoc_array_items -> . expression SARROW expression
    (145) assoc_array_items -> . assoc_array_items , expression SARROW expression
    (169) empty -> .
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    ]               reduce using rule 169 (empty -> .)
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 196
    assoc_array_items              shift and go to state 167
    empty                          shift and go to state 168
    positional_args                shift and go to state 169
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 105

    (72) function_call -> expression ( . empty ) FARROW { program }
    (79) function_call -> expression ( . empty )
    (86) function_call -> expression ( . function_arguments ) FARROW { program }
    (36) expression -> ( . expression )
    (152) _numpy -> ( . , )
    (153) _numpy -> ( . )
    (154) _numpy -> ( . expression , )
    (155) _numpy -> ( . items , )
    (156) _numpy -> ( . items )
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (157) items -> . expression , expression
    (158) items -> . items , expression
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               shift and go to state 119
    )               reduce using rule 169 (empty -> .)
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 200
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 197
    empty                          shift and go to state 198
    function_arguments             shift and go to state 199
    items                          shift and go to state 120
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 106

    (88) function_call -> expression function_arguments .
    ;               reduce using rule 88 (function_call -> expression function_arguments .)
    >               reduce using rule 88 (function_call -> expression function_arguments .)
    <               reduce using rule 88 (function_call -> expression function_arguments .)
    &               reduce using rule 88 (function_call -> expression function_arguments .)
    |               reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_GREATER      reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_LESS         reduce using rule 88 (function_call -> expression function_arguments .)
    NOT_EQEQ        reduce using rule 88 (function_call -> expression function_arguments .)
    EQEQ            reduce using rule 88 (function_call -> expression function_arguments .)
    %               reduce using rule 88 (function_call -> expression function_arguments .)
    *               reduce using rule 88 (function_call -> expression function_arguments .)
    /               reduce using rule 88 (function_call -> expression function_arguments .)
    -               reduce using rule 88 (function_call -> expression function_arguments .)
    +               reduce using rule 88 (function_call -> expression function_arguments .)
    .               reduce using rule 88 (function_call -> expression function_arguments .)
    COLON_COLON     reduce using rule 88 (function_call -> expression function_arguments .)
    ^               reduce using rule 88 (function_call -> expression function_arguments .)
    [               reduce using rule 88 (function_call -> expression function_arguments .)
    (               reduce using rule 88 (function_call -> expression function_arguments .)
    $               reduce using rule 88 (function_call -> expression function_arguments .)
    ID              reduce using rule 88 (function_call -> expression function_arguments .)
    !               reduce using rule 88 (function_call -> expression function_arguments .)
    ?               reduce using rule 88 (function_call -> expression function_arguments .)
    HTMLSTART       reduce using rule 88 (function_call -> expression function_arguments .)
    {               reduce using rule 88 (function_call -> expression function_arguments .)
    STRING          reduce using rule 88 (function_call -> expression function_arguments .)
    CHAR            reduce using rule 88 (function_call -> expression function_arguments .)
    FALSE           reduce using rule 88 (function_call -> expression function_arguments .)
    TRUE            reduce using rule 88 (function_call -> expression function_arguments .)
    FLOAT           reduce using rule 88 (function_call -> expression function_arguments .)
    INT             reduce using rule 88 (function_call -> expression function_arguments .)
    NULL            reduce using rule 88 (function_call -> expression function_arguments .)
    #               reduce using rule 88 (function_call -> expression function_arguments .)
    NEW             reduce using rule 88 (function_call -> expression function_arguments .)
    PYTHON_CODE_EXEC reduce using rule 88 (function_call -> expression function_arguments .)
    PYTHON_CODE     reduce using rule 88 (function_call -> expression function_arguments .)
    PHPSTART        reduce using rule 88 (function_call -> expression function_arguments .)
    LIMPORT         reduce using rule 88 (function_call -> expression function_arguments .)
    IMPORT          reduce using rule 88 (function_call -> expression function_arguments .)
    RETURN          reduce using rule 88 (function_call -> expression function_arguments .)
    DEL             reduce using rule 88 (function_call -> expression function_arguments .)
    FOREACH         reduce using rule 88 (function_call -> expression function_arguments .)
    FOR             reduce using rule 88 (function_call -> expression function_arguments .)
    DEBUG           reduce using rule 88 (function_call -> expression function_arguments .)
    SKIP            reduce using rule 88 (function_call -> expression function_arguments .)
    BREAK           reduce using rule 88 (function_call -> expression function_arguments .)
    LET             reduce using rule 88 (function_call -> expression function_arguments .)
    WHILE           reduce using rule 88 (function_call -> expression function_arguments .)
    NAMESPACE       reduce using rule 88 (function_call -> expression function_arguments .)
    CLASS           reduce using rule 88 (function_call -> expression function_arguments .)
    FUNC            reduce using rule 88 (function_call -> expression function_arguments .)
    INIT            reduce using rule 88 (function_call -> expression function_arguments .)
    IF              reduce using rule 88 (function_call -> expression function_arguments .)
    $end            reduce using rule 88 (function_call -> expression function_arguments .)
    ,               reduce using rule 88 (function_call -> expression function_arguments .)
    PHPEND          reduce using rule 88 (function_call -> expression function_arguments .)
    }               reduce using rule 88 (function_call -> expression function_arguments .)
    )               reduce using rule 88 (function_call -> expression function_arguments .)
    HTMLEND         reduce using rule 88 (function_call -> expression function_arguments .)
    SARROW          reduce using rule 88 (function_call -> expression function_arguments .)
    ]               reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_DIV          reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_MOD          reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_MUL          reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_SUB          reduce using rule 88 (function_call -> expression function_arguments .)
    EQ_ADD          reduce using rule 88 (function_call -> expression function_arguments .)
    =               reduce using rule 88 (function_call -> expression function_arguments .)
    AS              reduce using rule 88 (function_call -> expression function_arguments .)


state 107

    (87) function_call -> expression $ . ID = expression ;
    (56) expression -> $ . expression
    (84) function_call -> $ . ID TARROW ID ( empty )
    (85) function_call -> $ . ID TARROW ID ( function_arguments )
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 201
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 137
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 108

    (100) function_arguments -> kwargs .
    (113) kwargs -> kwargs . , id = expression
  ! shift/reduce conflict for , resolved as shift
    ;               reduce using rule 100 (function_arguments -> kwargs .)
    >               reduce using rule 100 (function_arguments -> kwargs .)
    <               reduce using rule 100 (function_arguments -> kwargs .)
    &               reduce using rule 100 (function_arguments -> kwargs .)
    |               reduce using rule 100 (function_arguments -> kwargs .)
    EQ_GREATER      reduce using rule 100 (function_arguments -> kwargs .)
    EQ_LESS         reduce using rule 100 (function_arguments -> kwargs .)
    NOT_EQEQ        reduce using rule 100 (function_arguments -> kwargs .)
    EQEQ            reduce using rule 100 (function_arguments -> kwargs .)
    %               reduce using rule 100 (function_arguments -> kwargs .)
    *               reduce using rule 100 (function_arguments -> kwargs .)
    /               reduce using rule 100 (function_arguments -> kwargs .)
    -               reduce using rule 100 (function_arguments -> kwargs .)
    +               reduce using rule 100 (function_arguments -> kwargs .)
    .               reduce using rule 100 (function_arguments -> kwargs .)
    COLON_COLON     reduce using rule 100 (function_arguments -> kwargs .)
    ^               reduce using rule 100 (function_arguments -> kwargs .)
    [               reduce using rule 100 (function_arguments -> kwargs .)
    (               reduce using rule 100 (function_arguments -> kwargs .)
    $               reduce using rule 100 (function_arguments -> kwargs .)
    ID              reduce using rule 100 (function_arguments -> kwargs .)
    !               reduce using rule 100 (function_arguments -> kwargs .)
    ?               reduce using rule 100 (function_arguments -> kwargs .)
    HTMLSTART       reduce using rule 100 (function_arguments -> kwargs .)
    {               reduce using rule 100 (function_arguments -> kwargs .)
    STRING          reduce using rule 100 (function_arguments -> kwargs .)
    CHAR            reduce using rule 100 (function_arguments -> kwargs .)
    FALSE           reduce using rule 100 (function_arguments -> kwargs .)
    TRUE            reduce using rule 100 (function_arguments -> kwargs .)
    FLOAT           reduce using rule 100 (function_arguments -> kwargs .)
    INT             reduce using rule 100 (function_arguments -> kwargs .)
    NULL            reduce using rule 100 (function_arguments -> kwargs .)
    #               reduce using rule 100 (function_arguments -> kwargs .)
    NEW             reduce using rule 100 (function_arguments -> kwargs .)
    PYTHON_CODE_EXEC reduce using rule 100 (function_arguments -> kwargs .)
    PYTHON_CODE     reduce using rule 100 (function_arguments -> kwargs .)
    PHPSTART        reduce using rule 100 (function_arguments -> kwargs .)
    LIMPORT         reduce using rule 100 (function_arguments -> kwargs .)
    IMPORT          reduce using rule 100 (function_arguments -> kwargs .)
    RETURN          reduce using rule 100 (function_arguments -> kwargs .)
    DEL             reduce using rule 100 (function_arguments -> kwargs .)
    FOREACH         reduce using rule 100 (function_arguments -> kwargs .)
    FOR             reduce using rule 100 (function_arguments -> kwargs .)
    DEBUG           reduce using rule 100 (function_arguments -> kwargs .)
    SKIP            reduce using rule 100 (function_arguments -> kwargs .)
    BREAK           reduce using rule 100 (function_arguments -> kwargs .)
    LET             reduce using rule 100 (function_arguments -> kwargs .)
    WHILE           reduce using rule 100 (function_arguments -> kwargs .)
    NAMESPACE       reduce using rule 100 (function_arguments -> kwargs .)
    CLASS           reduce using rule 100 (function_arguments -> kwargs .)
    FUNC            reduce using rule 100 (function_arguments -> kwargs .)
    INIT            reduce using rule 100 (function_arguments -> kwargs .)
    IF              reduce using rule 100 (function_arguments -> kwargs .)
    $end            reduce using rule 100 (function_arguments -> kwargs .)
    PHPEND          reduce using rule 100 (function_arguments -> kwargs .)
    }               reduce using rule 100 (function_arguments -> kwargs .)
    )               reduce using rule 100 (function_arguments -> kwargs .)
    HTMLEND         reduce using rule 100 (function_arguments -> kwargs .)
    SARROW          reduce using rule 100 (function_arguments -> kwargs .)
    ]               reduce using rule 100 (function_arguments -> kwargs .)
    EQ_DIV          reduce using rule 100 (function_arguments -> kwargs .)
    EQ_MOD          reduce using rule 100 (function_arguments -> kwargs .)
    EQ_MUL          reduce using rule 100 (function_arguments -> kwargs .)
    EQ_SUB          reduce using rule 100 (function_arguments -> kwargs .)
    EQ_ADD          reduce using rule 100 (function_arguments -> kwargs .)
    =               reduce using rule 100 (function_arguments -> kwargs .)
    AS              reduce using rule 100 (function_arguments -> kwargs .)
    ,               shift and go to state 202


state 109

    (101) function_arguments -> positional_args . , kwargs
    (102) function_arguments -> positional_args .
    (111) positional_args -> positional_args . , expression
  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 203
    ;               reduce using rule 102 (function_arguments -> positional_args .)
    >               reduce using rule 102 (function_arguments -> positional_args .)
    <               reduce using rule 102 (function_arguments -> positional_args .)
    &               reduce using rule 102 (function_arguments -> positional_args .)
    |               reduce using rule 102 (function_arguments -> positional_args .)
    EQ_GREATER      reduce using rule 102 (function_arguments -> positional_args .)
    EQ_LESS         reduce using rule 102 (function_arguments -> positional_args .)
    NOT_EQEQ        reduce using rule 102 (function_arguments -> positional_args .)
    EQEQ            reduce using rule 102 (function_arguments -> positional_args .)
    %               reduce using rule 102 (function_arguments -> positional_args .)
    *               reduce using rule 102 (function_arguments -> positional_args .)
    /               reduce using rule 102 (function_arguments -> positional_args .)
    -               reduce using rule 102 (function_arguments -> positional_args .)
    +               reduce using rule 102 (function_arguments -> positional_args .)
    .               reduce using rule 102 (function_arguments -> positional_args .)
    COLON_COLON     reduce using rule 102 (function_arguments -> positional_args .)
    ^               reduce using rule 102 (function_arguments -> positional_args .)
    [               reduce using rule 102 (function_arguments -> positional_args .)
    (               reduce using rule 102 (function_arguments -> positional_args .)
    $               reduce using rule 102 (function_arguments -> positional_args .)
    ID              reduce using rule 102 (function_arguments -> positional_args .)
    !               reduce using rule 102 (function_arguments -> positional_args .)
    ?               reduce using rule 102 (function_arguments -> positional_args .)
    HTMLSTART       reduce using rule 102 (function_arguments -> positional_args .)
    {               reduce using rule 102 (function_arguments -> positional_args .)
    STRING          reduce using rule 102 (function_arguments -> positional_args .)
    CHAR            reduce using rule 102 (function_arguments -> positional_args .)
    FALSE           reduce using rule 102 (function_arguments -> positional_args .)
    TRUE            reduce using rule 102 (function_arguments -> positional_args .)
    FLOAT           reduce using rule 102 (function_arguments -> positional_args .)
    INT             reduce using rule 102 (function_arguments -> positional_args .)
    NULL            reduce using rule 102 (function_arguments -> positional_args .)
    #               reduce using rule 102 (function_arguments -> positional_args .)
    NEW             reduce using rule 102 (function_arguments -> positional_args .)
    PYTHON_CODE_EXEC reduce using rule 102 (function_arguments -> positional_args .)
    PYTHON_CODE     reduce using rule 102 (function_arguments -> positional_args .)
    PHPSTART        reduce using rule 102 (function_arguments -> positional_args .)
    LIMPORT         reduce using rule 102 (function_arguments -> positional_args .)
    IMPORT          reduce using rule 102 (function_arguments -> positional_args .)
    RETURN          reduce using rule 102 (function_arguments -> positional_args .)
    DEL             reduce using rule 102 (function_arguments -> positional_args .)
    FOREACH         reduce using rule 102 (function_arguments -> positional_args .)
    FOR             reduce using rule 102 (function_arguments -> positional_args .)
    DEBUG           reduce using rule 102 (function_arguments -> positional_args .)
    SKIP            reduce using rule 102 (function_arguments -> positional_args .)
    BREAK           reduce using rule 102 (function_arguments -> positional_args .)
    LET             reduce using rule 102 (function_arguments -> positional_args .)
    WHILE           reduce using rule 102 (function_arguments -> positional_args .)
    NAMESPACE       reduce using rule 102 (function_arguments -> positional_args .)
    CLASS           reduce using rule 102 (function_arguments -> positional_args .)
    FUNC            reduce using rule 102 (function_arguments -> positional_args .)
    INIT            reduce using rule 102 (function_arguments -> positional_args .)
    IF              reduce using rule 102 (function_arguments -> positional_args .)
    $end            reduce using rule 102 (function_arguments -> positional_args .)
    PHPEND          reduce using rule 102 (function_arguments -> positional_args .)
    }               reduce using rule 102 (function_arguments -> positional_args .)
    )               reduce using rule 102 (function_arguments -> positional_args .)
    HTMLEND         reduce using rule 102 (function_arguments -> positional_args .)
    SARROW          reduce using rule 102 (function_arguments -> positional_args .)
    ]               reduce using rule 102 (function_arguments -> positional_args .)
    EQ_DIV          reduce using rule 102 (function_arguments -> positional_args .)
    EQ_MOD          reduce using rule 102 (function_arguments -> positional_args .)
    EQ_MUL          reduce using rule 102 (function_arguments -> positional_args .)
    EQ_SUB          reduce using rule 102 (function_arguments -> positional_args .)
    EQ_ADD          reduce using rule 102 (function_arguments -> positional_args .)
    =               reduce using rule 102 (function_arguments -> positional_args .)
    AS              reduce using rule 102 (function_arguments -> positional_args .)


state 110

    (118) variable_operation -> get_index EQ_DIV . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 204
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 111

    (120) variable_operation -> get_index EQ_MOD . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 205
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 112

    (122) variable_operation -> get_index EQ_MUL . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 206
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 113

    (124) variable_operation -> get_index EQ_SUB . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 207
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 114

    (126) variable_operation -> get_index EQ_ADD . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 208
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 115

    (64) function_call_statement -> function_call ; .
    ?               reduce using rule 64 (function_call_statement -> function_call ; .)
    (               reduce using rule 64 (function_call_statement -> function_call ; .)
    !               reduce using rule 64 (function_call_statement -> function_call ; .)
    +               reduce using rule 64 (function_call_statement -> function_call ; .)
    -               reduce using rule 64 (function_call_statement -> function_call ; .)
    *               reduce using rule 64 (function_call_statement -> function_call ; .)
    &               reduce using rule 64 (function_call_statement -> function_call ; .)
    ID              reduce using rule 64 (function_call_statement -> function_call ; .)
    $               reduce using rule 64 (function_call_statement -> function_call ; .)
    HTMLSTART       reduce using rule 64 (function_call_statement -> function_call ; .)
    PHPSTART        reduce using rule 64 (function_call_statement -> function_call ; .)
    LIMPORT         reduce using rule 64 (function_call_statement -> function_call ; .)
    .               reduce using rule 64 (function_call_statement -> function_call ; .)
    IMPORT          reduce using rule 64 (function_call_statement -> function_call ; .)
    RETURN          reduce using rule 64 (function_call_statement -> function_call ; .)
    DEL             reduce using rule 64 (function_call_statement -> function_call ; .)
    FOREACH         reduce using rule 64 (function_call_statement -> function_call ; .)
    FOR             reduce using rule 64 (function_call_statement -> function_call ; .)
    DEBUG           reduce using rule 64 (function_call_statement -> function_call ; .)
    SKIP            reduce using rule 64 (function_call_statement -> function_call ; .)
    BREAK           reduce using rule 64 (function_call_statement -> function_call ; .)
    LET             reduce using rule 64 (function_call_statement -> function_call ; .)
    WHILE           reduce using rule 64 (function_call_statement -> function_call ; .)
    NAMESPACE       reduce using rule 64 (function_call_statement -> function_call ; .)
    CLASS           reduce using rule 64 (function_call_statement -> function_call ; .)
    FUNC            reduce using rule 64 (function_call_statement -> function_call ; .)
    INIT            reduce using rule 64 (function_call_statement -> function_call ; .)
    [               reduce using rule 64 (function_call_statement -> function_call ; .)
    {               reduce using rule 64 (function_call_statement -> function_call ; .)
    STRING          reduce using rule 64 (function_call_statement -> function_call ; .)
    CHAR            reduce using rule 64 (function_call_statement -> function_call ; .)
    FALSE           reduce using rule 64 (function_call_statement -> function_call ; .)
    TRUE            reduce using rule 64 (function_call_statement -> function_call ; .)
    FLOAT           reduce using rule 64 (function_call_statement -> function_call ; .)
    INT             reduce using rule 64 (function_call_statement -> function_call ; .)
    NULL            reduce using rule 64 (function_call_statement -> function_call ; .)
    #               reduce using rule 64 (function_call_statement -> function_call ; .)
    NEW             reduce using rule 64 (function_call_statement -> function_call ; .)
    PYTHON_CODE_EXEC reduce using rule 64 (function_call_statement -> function_call ; .)
    PYTHON_CODE     reduce using rule 64 (function_call_statement -> function_call ; .)
    IF              reduce using rule 64 (function_call_statement -> function_call ; .)
    $end            reduce using rule 64 (function_call_statement -> function_call ; .)
    PHPEND          reduce using rule 64 (function_call_statement -> function_call ; .)
    }               reduce using rule 64 (function_call_statement -> function_call ; .)


state 116

    (65) python_code_statement -> python_code ; .
    ?               reduce using rule 65 (python_code_statement -> python_code ; .)
    (               reduce using rule 65 (python_code_statement -> python_code ; .)
    !               reduce using rule 65 (python_code_statement -> python_code ; .)
    +               reduce using rule 65 (python_code_statement -> python_code ; .)
    -               reduce using rule 65 (python_code_statement -> python_code ; .)
    *               reduce using rule 65 (python_code_statement -> python_code ; .)
    &               reduce using rule 65 (python_code_statement -> python_code ; .)
    ID              reduce using rule 65 (python_code_statement -> python_code ; .)
    $               reduce using rule 65 (python_code_statement -> python_code ; .)
    HTMLSTART       reduce using rule 65 (python_code_statement -> python_code ; .)
    PHPSTART        reduce using rule 65 (python_code_statement -> python_code ; .)
    LIMPORT         reduce using rule 65 (python_code_statement -> python_code ; .)
    .               reduce using rule 65 (python_code_statement -> python_code ; .)
    IMPORT          reduce using rule 65 (python_code_statement -> python_code ; .)
    RETURN          reduce using rule 65 (python_code_statement -> python_code ; .)
    DEL             reduce using rule 65 (python_code_statement -> python_code ; .)
    FOREACH         reduce using rule 65 (python_code_statement -> python_code ; .)
    FOR             reduce using rule 65 (python_code_statement -> python_code ; .)
    DEBUG           reduce using rule 65 (python_code_statement -> python_code ; .)
    SKIP            reduce using rule 65 (python_code_statement -> python_code ; .)
    BREAK           reduce using rule 65 (python_code_statement -> python_code ; .)
    LET             reduce using rule 65 (python_code_statement -> python_code ; .)
    WHILE           reduce using rule 65 (python_code_statement -> python_code ; .)
    NAMESPACE       reduce using rule 65 (python_code_statement -> python_code ; .)
    CLASS           reduce using rule 65 (python_code_statement -> python_code ; .)
    FUNC            reduce using rule 65 (python_code_statement -> python_code ; .)
    INIT            reduce using rule 65 (python_code_statement -> python_code ; .)
    [               reduce using rule 65 (python_code_statement -> python_code ; .)
    {               reduce using rule 65 (python_code_statement -> python_code ; .)
    STRING          reduce using rule 65 (python_code_statement -> python_code ; .)
    CHAR            reduce using rule 65 (python_code_statement -> python_code ; .)
    FALSE           reduce using rule 65 (python_code_statement -> python_code ; .)
    TRUE            reduce using rule 65 (python_code_statement -> python_code ; .)
    FLOAT           reduce using rule 65 (python_code_statement -> python_code ; .)
    INT             reduce using rule 65 (python_code_statement -> python_code ; .)
    NULL            reduce using rule 65 (python_code_statement -> python_code ; .)
    #               reduce using rule 65 (python_code_statement -> python_code ; .)
    NEW             reduce using rule 65 (python_code_statement -> python_code ; .)
    PYTHON_CODE_EXEC reduce using rule 65 (python_code_statement -> python_code ; .)
    PYTHON_CODE     reduce using rule 65 (python_code_statement -> python_code ; .)
    IF              reduce using rule 65 (python_code_statement -> python_code ; .)
    $end            reduce using rule 65 (python_code_statement -> python_code ; .)
    PHPEND          reduce using rule 65 (python_code_statement -> python_code ; .)
    }               reduce using rule 65 (python_code_statement -> python_code ; .)


state 117

    (36) expression -> ( expression . )
    (154) _numpy -> ( expression . , )
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (157) items -> expression . , expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 209
    ,               shift and go to state 210
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 118

    (153) _numpy -> ( ) .
    >               reduce using rule 153 (_numpy -> ( ) .)
    <               reduce using rule 153 (_numpy -> ( ) .)
    &               reduce using rule 153 (_numpy -> ( ) .)
    |               reduce using rule 153 (_numpy -> ( ) .)
    EQ_GREATER      reduce using rule 153 (_numpy -> ( ) .)
    EQ_LESS         reduce using rule 153 (_numpy -> ( ) .)
    NOT_EQEQ        reduce using rule 153 (_numpy -> ( ) .)
    EQEQ            reduce using rule 153 (_numpy -> ( ) .)
    %               reduce using rule 153 (_numpy -> ( ) .)
    *               reduce using rule 153 (_numpy -> ( ) .)
    /               reduce using rule 153 (_numpy -> ( ) .)
    -               reduce using rule 153 (_numpy -> ( ) .)
    +               reduce using rule 153 (_numpy -> ( ) .)
    .               reduce using rule 153 (_numpy -> ( ) .)
    COLON_COLON     reduce using rule 153 (_numpy -> ( ) .)
    ^               reduce using rule 153 (_numpy -> ( ) .)
    [               reduce using rule 153 (_numpy -> ( ) .)
    (               reduce using rule 153 (_numpy -> ( ) .)
    $               reduce using rule 153 (_numpy -> ( ) .)
    ID              reduce using rule 153 (_numpy -> ( ) .)
    !               reduce using rule 153 (_numpy -> ( ) .)
    ?               reduce using rule 153 (_numpy -> ( ) .)
    HTMLSTART       reduce using rule 153 (_numpy -> ( ) .)
    {               reduce using rule 153 (_numpy -> ( ) .)
    STRING          reduce using rule 153 (_numpy -> ( ) .)
    CHAR            reduce using rule 153 (_numpy -> ( ) .)
    FALSE           reduce using rule 153 (_numpy -> ( ) .)
    TRUE            reduce using rule 153 (_numpy -> ( ) .)
    FLOAT           reduce using rule 153 (_numpy -> ( ) .)
    INT             reduce using rule 153 (_numpy -> ( ) .)
    NULL            reduce using rule 153 (_numpy -> ( ) .)
    #               reduce using rule 153 (_numpy -> ( ) .)
    NEW             reduce using rule 153 (_numpy -> ( ) .)
    PYTHON_CODE_EXEC reduce using rule 153 (_numpy -> ( ) .)
    PYTHON_CODE     reduce using rule 153 (_numpy -> ( ) .)
    PHPSTART        reduce using rule 153 (_numpy -> ( ) .)
    LIMPORT         reduce using rule 153 (_numpy -> ( ) .)
    IMPORT          reduce using rule 153 (_numpy -> ( ) .)
    RETURN          reduce using rule 153 (_numpy -> ( ) .)
    DEL             reduce using rule 153 (_numpy -> ( ) .)
    FOREACH         reduce using rule 153 (_numpy -> ( ) .)
    FOR             reduce using rule 153 (_numpy -> ( ) .)
    DEBUG           reduce using rule 153 (_numpy -> ( ) .)
    SKIP            reduce using rule 153 (_numpy -> ( ) .)
    BREAK           reduce using rule 153 (_numpy -> ( ) .)
    LET             reduce using rule 153 (_numpy -> ( ) .)
    WHILE           reduce using rule 153 (_numpy -> ( ) .)
    NAMESPACE       reduce using rule 153 (_numpy -> ( ) .)
    CLASS           reduce using rule 153 (_numpy -> ( ) .)
    FUNC            reduce using rule 153 (_numpy -> ( ) .)
    INIT            reduce using rule 153 (_numpy -> ( ) .)
    IF              reduce using rule 153 (_numpy -> ( ) .)
    $end            reduce using rule 153 (_numpy -> ( ) .)
    ;               reduce using rule 153 (_numpy -> ( ) .)
    ,               reduce using rule 153 (_numpy -> ( ) .)
    PHPEND          reduce using rule 153 (_numpy -> ( ) .)
    }               reduce using rule 153 (_numpy -> ( ) .)
    )               reduce using rule 153 (_numpy -> ( ) .)
    HTMLEND         reduce using rule 153 (_numpy -> ( ) .)
    SARROW          reduce using rule 153 (_numpy -> ( ) .)
    ]               reduce using rule 153 (_numpy -> ( ) .)
    EQ_DIV          reduce using rule 153 (_numpy -> ( ) .)
    EQ_MOD          reduce using rule 153 (_numpy -> ( ) .)
    EQ_MUL          reduce using rule 153 (_numpy -> ( ) .)
    EQ_SUB          reduce using rule 153 (_numpy -> ( ) .)
    EQ_ADD          reduce using rule 153 (_numpy -> ( ) .)
    =               reduce using rule 153 (_numpy -> ( ) .)
    AS              reduce using rule 153 (_numpy -> ( ) .)


state 119

    (152) _numpy -> ( , . )
    )               shift and go to state 211


state 120

    (155) _numpy -> ( items . , )
    (156) _numpy -> ( items . )
    (158) items -> items . , expression
    ,               shift and go to state 212
    )               shift and go to state 213


state 121

    (39) expression -> ! expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 39 (expression -> ! expression .)
    <               reduce using rule 39 (expression -> ! expression .)
    &               reduce using rule 39 (expression -> ! expression .)
    |               reduce using rule 39 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 39 (expression -> ! expression .)
    EQ_LESS         reduce using rule 39 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 39 (expression -> ! expression .)
    EQEQ            reduce using rule 39 (expression -> ! expression .)
    %               reduce using rule 39 (expression -> ! expression .)
    *               reduce using rule 39 (expression -> ! expression .)
    /               reduce using rule 39 (expression -> ! expression .)
    -               reduce using rule 39 (expression -> ! expression .)
    +               reduce using rule 39 (expression -> ! expression .)
    .               reduce using rule 39 (expression -> ! expression .)
    ^               reduce using rule 39 (expression -> ! expression .)
    [               reduce using rule 39 (expression -> ! expression .)
    (               reduce using rule 39 (expression -> ! expression .)
    $               reduce using rule 39 (expression -> ! expression .)
    ID              reduce using rule 39 (expression -> ! expression .)
    ?               reduce using rule 39 (expression -> ! expression .)
    HTMLSTART       reduce using rule 39 (expression -> ! expression .)
    {               reduce using rule 39 (expression -> ! expression .)
    STRING          reduce using rule 39 (expression -> ! expression .)
    CHAR            reduce using rule 39 (expression -> ! expression .)
    FALSE           reduce using rule 39 (expression -> ! expression .)
    TRUE            reduce using rule 39 (expression -> ! expression .)
    FLOAT           reduce using rule 39 (expression -> ! expression .)
    INT             reduce using rule 39 (expression -> ! expression .)
    NULL            reduce using rule 39 (expression -> ! expression .)
    #               reduce using rule 39 (expression -> ! expression .)
    NEW             reduce using rule 39 (expression -> ! expression .)
    PYTHON_CODE_EXEC reduce using rule 39 (expression -> ! expression .)
    PYTHON_CODE     reduce using rule 39 (expression -> ! expression .)
    PHPSTART        reduce using rule 39 (expression -> ! expression .)
    LIMPORT         reduce using rule 39 (expression -> ! expression .)
    IMPORT          reduce using rule 39 (expression -> ! expression .)
    RETURN          reduce using rule 39 (expression -> ! expression .)
    DEL             reduce using rule 39 (expression -> ! expression .)
    FOREACH         reduce using rule 39 (expression -> ! expression .)
    FOR             reduce using rule 39 (expression -> ! expression .)
    DEBUG           reduce using rule 39 (expression -> ! expression .)
    SKIP            reduce using rule 39 (expression -> ! expression .)
    BREAK           reduce using rule 39 (expression -> ! expression .)
    LET             reduce using rule 39 (expression -> ! expression .)
    WHILE           reduce using rule 39 (expression -> ! expression .)
    NAMESPACE       reduce using rule 39 (expression -> ! expression .)
    CLASS           reduce using rule 39 (expression -> ! expression .)
    FUNC            reduce using rule 39 (expression -> ! expression .)
    INIT            reduce using rule 39 (expression -> ! expression .)
    IF              reduce using rule 39 (expression -> ! expression .)
    $end            reduce using rule 39 (expression -> ! expression .)
    ;               reduce using rule 39 (expression -> ! expression .)
    ,               reduce using rule 39 (expression -> ! expression .)
    PHPEND          reduce using rule 39 (expression -> ! expression .)
    }               reduce using rule 39 (expression -> ! expression .)
    )               reduce using rule 39 (expression -> ! expression .)
    HTMLEND         reduce using rule 39 (expression -> ! expression .)
    SARROW          reduce using rule 39 (expression -> ! expression .)
    ]               reduce using rule 39 (expression -> ! expression .)
    EQ_DIV          reduce using rule 39 (expression -> ! expression .)
    EQ_MOD          reduce using rule 39 (expression -> ! expression .)
    EQ_MUL          reduce using rule 39 (expression -> ! expression .)
    EQ_SUB          reduce using rule 39 (expression -> ! expression .)
    EQ_ADD          reduce using rule 39 (expression -> ! expression .)
    =               reduce using rule 39 (expression -> ! expression .)
    AS              reduce using rule 39 (expression -> ! expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 122

    (40) expression -> + expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 40 (expression -> + expression .)
    <               reduce using rule 40 (expression -> + expression .)
    &               reduce using rule 40 (expression -> + expression .)
    |               reduce using rule 40 (expression -> + expression .)
    EQ_GREATER      reduce using rule 40 (expression -> + expression .)
    EQ_LESS         reduce using rule 40 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 40 (expression -> + expression .)
    EQEQ            reduce using rule 40 (expression -> + expression .)
    %               reduce using rule 40 (expression -> + expression .)
    *               reduce using rule 40 (expression -> + expression .)
    /               reduce using rule 40 (expression -> + expression .)
    -               reduce using rule 40 (expression -> + expression .)
    +               reduce using rule 40 (expression -> + expression .)
    .               reduce using rule 40 (expression -> + expression .)
    ^               reduce using rule 40 (expression -> + expression .)
    [               reduce using rule 40 (expression -> + expression .)
    (               reduce using rule 40 (expression -> + expression .)
    $               reduce using rule 40 (expression -> + expression .)
    ID              reduce using rule 40 (expression -> + expression .)
    ?               reduce using rule 40 (expression -> + expression .)
    HTMLSTART       reduce using rule 40 (expression -> + expression .)
    {               reduce using rule 40 (expression -> + expression .)
    STRING          reduce using rule 40 (expression -> + expression .)
    CHAR            reduce using rule 40 (expression -> + expression .)
    FALSE           reduce using rule 40 (expression -> + expression .)
    TRUE            reduce using rule 40 (expression -> + expression .)
    FLOAT           reduce using rule 40 (expression -> + expression .)
    INT             reduce using rule 40 (expression -> + expression .)
    NULL            reduce using rule 40 (expression -> + expression .)
    #               reduce using rule 40 (expression -> + expression .)
    NEW             reduce using rule 40 (expression -> + expression .)
    PYTHON_CODE_EXEC reduce using rule 40 (expression -> + expression .)
    PYTHON_CODE     reduce using rule 40 (expression -> + expression .)
    PHPSTART        reduce using rule 40 (expression -> + expression .)
    LIMPORT         reduce using rule 40 (expression -> + expression .)
    IMPORT          reduce using rule 40 (expression -> + expression .)
    RETURN          reduce using rule 40 (expression -> + expression .)
    DEL             reduce using rule 40 (expression -> + expression .)
    FOREACH         reduce using rule 40 (expression -> + expression .)
    FOR             reduce using rule 40 (expression -> + expression .)
    DEBUG           reduce using rule 40 (expression -> + expression .)
    SKIP            reduce using rule 40 (expression -> + expression .)
    BREAK           reduce using rule 40 (expression -> + expression .)
    LET             reduce using rule 40 (expression -> + expression .)
    WHILE           reduce using rule 40 (expression -> + expression .)
    NAMESPACE       reduce using rule 40 (expression -> + expression .)
    CLASS           reduce using rule 40 (expression -> + expression .)
    FUNC            reduce using rule 40 (expression -> + expression .)
    INIT            reduce using rule 40 (expression -> + expression .)
    IF              reduce using rule 40 (expression -> + expression .)
    $end            reduce using rule 40 (expression -> + expression .)
    ;               reduce using rule 40 (expression -> + expression .)
    )               reduce using rule 40 (expression -> + expression .)
    ,               reduce using rule 40 (expression -> + expression .)
    PHPEND          reduce using rule 40 (expression -> + expression .)
    }               reduce using rule 40 (expression -> + expression .)
    HTMLEND         reduce using rule 40 (expression -> + expression .)
    SARROW          reduce using rule 40 (expression -> + expression .)
    ]               reduce using rule 40 (expression -> + expression .)
    EQ_DIV          reduce using rule 40 (expression -> + expression .)
    EQ_MOD          reduce using rule 40 (expression -> + expression .)
    EQ_MUL          reduce using rule 40 (expression -> + expression .)
    EQ_SUB          reduce using rule 40 (expression -> + expression .)
    EQ_ADD          reduce using rule 40 (expression -> + expression .)
    =               reduce using rule 40 (expression -> + expression .)
    AS              reduce using rule 40 (expression -> + expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 123

    (41) expression -> - expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 41 (expression -> - expression .)
    <               reduce using rule 41 (expression -> - expression .)
    &               reduce using rule 41 (expression -> - expression .)
    |               reduce using rule 41 (expression -> - expression .)
    EQ_GREATER      reduce using rule 41 (expression -> - expression .)
    EQ_LESS         reduce using rule 41 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 41 (expression -> - expression .)
    EQEQ            reduce using rule 41 (expression -> - expression .)
    %               reduce using rule 41 (expression -> - expression .)
    *               reduce using rule 41 (expression -> - expression .)
    /               reduce using rule 41 (expression -> - expression .)
    -               reduce using rule 41 (expression -> - expression .)
    +               reduce using rule 41 (expression -> - expression .)
    .               reduce using rule 41 (expression -> - expression .)
    ^               reduce using rule 41 (expression -> - expression .)
    [               reduce using rule 41 (expression -> - expression .)
    (               reduce using rule 41 (expression -> - expression .)
    $               reduce using rule 41 (expression -> - expression .)
    ID              reduce using rule 41 (expression -> - expression .)
    ?               reduce using rule 41 (expression -> - expression .)
    HTMLSTART       reduce using rule 41 (expression -> - expression .)
    {               reduce using rule 41 (expression -> - expression .)
    STRING          reduce using rule 41 (expression -> - expression .)
    CHAR            reduce using rule 41 (expression -> - expression .)
    FALSE           reduce using rule 41 (expression -> - expression .)
    TRUE            reduce using rule 41 (expression -> - expression .)
    FLOAT           reduce using rule 41 (expression -> - expression .)
    INT             reduce using rule 41 (expression -> - expression .)
    NULL            reduce using rule 41 (expression -> - expression .)
    #               reduce using rule 41 (expression -> - expression .)
    NEW             reduce using rule 41 (expression -> - expression .)
    PYTHON_CODE_EXEC reduce using rule 41 (expression -> - expression .)
    PYTHON_CODE     reduce using rule 41 (expression -> - expression .)
    PHPSTART        reduce using rule 41 (expression -> - expression .)
    LIMPORT         reduce using rule 41 (expression -> - expression .)
    IMPORT          reduce using rule 41 (expression -> - expression .)
    RETURN          reduce using rule 41 (expression -> - expression .)
    DEL             reduce using rule 41 (expression -> - expression .)
    FOREACH         reduce using rule 41 (expression -> - expression .)
    FOR             reduce using rule 41 (expression -> - expression .)
    DEBUG           reduce using rule 41 (expression -> - expression .)
    SKIP            reduce using rule 41 (expression -> - expression .)
    BREAK           reduce using rule 41 (expression -> - expression .)
    LET             reduce using rule 41 (expression -> - expression .)
    WHILE           reduce using rule 41 (expression -> - expression .)
    NAMESPACE       reduce using rule 41 (expression -> - expression .)
    CLASS           reduce using rule 41 (expression -> - expression .)
    FUNC            reduce using rule 41 (expression -> - expression .)
    INIT            reduce using rule 41 (expression -> - expression .)
    IF              reduce using rule 41 (expression -> - expression .)
    $end            reduce using rule 41 (expression -> - expression .)
    ;               reduce using rule 41 (expression -> - expression .)
    )               reduce using rule 41 (expression -> - expression .)
    ,               reduce using rule 41 (expression -> - expression .)
    PHPEND          reduce using rule 41 (expression -> - expression .)
    }               reduce using rule 41 (expression -> - expression .)
    HTMLEND         reduce using rule 41 (expression -> - expression .)
    SARROW          reduce using rule 41 (expression -> - expression .)
    ]               reduce using rule 41 (expression -> - expression .)
    EQ_DIV          reduce using rule 41 (expression -> - expression .)
    EQ_MOD          reduce using rule 41 (expression -> - expression .)
    EQ_MUL          reduce using rule 41 (expression -> - expression .)
    EQ_SUB          reduce using rule 41 (expression -> - expression .)
    EQ_ADD          reduce using rule 41 (expression -> - expression .)
    =               reduce using rule 41 (expression -> - expression .)
    AS              reduce using rule 41 (expression -> - expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 124

    (54) expression -> & ID .
    >               reduce using rule 54 (expression -> & ID .)
    <               reduce using rule 54 (expression -> & ID .)
    &               reduce using rule 54 (expression -> & ID .)
    |               reduce using rule 54 (expression -> & ID .)
    EQ_GREATER      reduce using rule 54 (expression -> & ID .)
    EQ_LESS         reduce using rule 54 (expression -> & ID .)
    NOT_EQEQ        reduce using rule 54 (expression -> & ID .)
    EQEQ            reduce using rule 54 (expression -> & ID .)
    %               reduce using rule 54 (expression -> & ID .)
    *               reduce using rule 54 (expression -> & ID .)
    /               reduce using rule 54 (expression -> & ID .)
    -               reduce using rule 54 (expression -> & ID .)
    +               reduce using rule 54 (expression -> & ID .)
    .               reduce using rule 54 (expression -> & ID .)
    COLON_COLON     reduce using rule 54 (expression -> & ID .)
    ^               reduce using rule 54 (expression -> & ID .)
    [               reduce using rule 54 (expression -> & ID .)
    (               reduce using rule 54 (expression -> & ID .)
    $               reduce using rule 54 (expression -> & ID .)
    ID              reduce using rule 54 (expression -> & ID .)
    !               reduce using rule 54 (expression -> & ID .)
    ?               reduce using rule 54 (expression -> & ID .)
    HTMLSTART       reduce using rule 54 (expression -> & ID .)
    {               reduce using rule 54 (expression -> & ID .)
    STRING          reduce using rule 54 (expression -> & ID .)
    CHAR            reduce using rule 54 (expression -> & ID .)
    FALSE           reduce using rule 54 (expression -> & ID .)
    TRUE            reduce using rule 54 (expression -> & ID .)
    FLOAT           reduce using rule 54 (expression -> & ID .)
    INT             reduce using rule 54 (expression -> & ID .)
    NULL            reduce using rule 54 (expression -> & ID .)
    #               reduce using rule 54 (expression -> & ID .)
    NEW             reduce using rule 54 (expression -> & ID .)
    PYTHON_CODE_EXEC reduce using rule 54 (expression -> & ID .)
    PYTHON_CODE     reduce using rule 54 (expression -> & ID .)
    PHPSTART        reduce using rule 54 (expression -> & ID .)
    LIMPORT         reduce using rule 54 (expression -> & ID .)
    IMPORT          reduce using rule 54 (expression -> & ID .)
    RETURN          reduce using rule 54 (expression -> & ID .)
    DEL             reduce using rule 54 (expression -> & ID .)
    FOREACH         reduce using rule 54 (expression -> & ID .)
    FOR             reduce using rule 54 (expression -> & ID .)
    DEBUG           reduce using rule 54 (expression -> & ID .)
    SKIP            reduce using rule 54 (expression -> & ID .)
    BREAK           reduce using rule 54 (expression -> & ID .)
    LET             reduce using rule 54 (expression -> & ID .)
    WHILE           reduce using rule 54 (expression -> & ID .)
    NAMESPACE       reduce using rule 54 (expression -> & ID .)
    CLASS           reduce using rule 54 (expression -> & ID .)
    FUNC            reduce using rule 54 (expression -> & ID .)
    INIT            reduce using rule 54 (expression -> & ID .)
    IF              reduce using rule 54 (expression -> & ID .)
    $end            reduce using rule 54 (expression -> & ID .)
    ;               reduce using rule 54 (expression -> & ID .)
    )               reduce using rule 54 (expression -> & ID .)
    ,               reduce using rule 54 (expression -> & ID .)
    PHPEND          reduce using rule 54 (expression -> & ID .)
    }               reduce using rule 54 (expression -> & ID .)
    HTMLEND         reduce using rule 54 (expression -> & ID .)
    SARROW          reduce using rule 54 (expression -> & ID .)
    ]               reduce using rule 54 (expression -> & ID .)
    EQ_DIV          reduce using rule 54 (expression -> & ID .)
    EQ_MOD          reduce using rule 54 (expression -> & ID .)
    EQ_MUL          reduce using rule 54 (expression -> & ID .)
    EQ_SUB          reduce using rule 54 (expression -> & ID .)
    EQ_ADD          reduce using rule 54 (expression -> & ID .)
    =               reduce using rule 54 (expression -> & ID .)
    AS              reduce using rule 54 (expression -> & ID .)


state 125

    (53) expression -> * ID .
    >               reduce using rule 53 (expression -> * ID .)
    <               reduce using rule 53 (expression -> * ID .)
    &               reduce using rule 53 (expression -> * ID .)
    |               reduce using rule 53 (expression -> * ID .)
    EQ_GREATER      reduce using rule 53 (expression -> * ID .)
    EQ_LESS         reduce using rule 53 (expression -> * ID .)
    NOT_EQEQ        reduce using rule 53 (expression -> * ID .)
    EQEQ            reduce using rule 53 (expression -> * ID .)
    %               reduce using rule 53 (expression -> * ID .)
    *               reduce using rule 53 (expression -> * ID .)
    /               reduce using rule 53 (expression -> * ID .)
    -               reduce using rule 53 (expression -> * ID .)
    +               reduce using rule 53 (expression -> * ID .)
    .               reduce using rule 53 (expression -> * ID .)
    COLON_COLON     reduce using rule 53 (expression -> * ID .)
    ^               reduce using rule 53 (expression -> * ID .)
    [               reduce using rule 53 (expression -> * ID .)
    (               reduce using rule 53 (expression -> * ID .)
    $               reduce using rule 53 (expression -> * ID .)
    ID              reduce using rule 53 (expression -> * ID .)
    !               reduce using rule 53 (expression -> * ID .)
    ?               reduce using rule 53 (expression -> * ID .)
    HTMLSTART       reduce using rule 53 (expression -> * ID .)
    {               reduce using rule 53 (expression -> * ID .)
    STRING          reduce using rule 53 (expression -> * ID .)
    CHAR            reduce using rule 53 (expression -> * ID .)
    FALSE           reduce using rule 53 (expression -> * ID .)
    TRUE            reduce using rule 53 (expression -> * ID .)
    FLOAT           reduce using rule 53 (expression -> * ID .)
    INT             reduce using rule 53 (expression -> * ID .)
    NULL            reduce using rule 53 (expression -> * ID .)
    #               reduce using rule 53 (expression -> * ID .)
    NEW             reduce using rule 53 (expression -> * ID .)
    PYTHON_CODE_EXEC reduce using rule 53 (expression -> * ID .)
    PYTHON_CODE     reduce using rule 53 (expression -> * ID .)
    PHPSTART        reduce using rule 53 (expression -> * ID .)
    LIMPORT         reduce using rule 53 (expression -> * ID .)
    IMPORT          reduce using rule 53 (expression -> * ID .)
    RETURN          reduce using rule 53 (expression -> * ID .)
    DEL             reduce using rule 53 (expression -> * ID .)
    FOREACH         reduce using rule 53 (expression -> * ID .)
    FOR             reduce using rule 53 (expression -> * ID .)
    DEBUG           reduce using rule 53 (expression -> * ID .)
    SKIP            reduce using rule 53 (expression -> * ID .)
    BREAK           reduce using rule 53 (expression -> * ID .)
    LET             reduce using rule 53 (expression -> * ID .)
    WHILE           reduce using rule 53 (expression -> * ID .)
    NAMESPACE       reduce using rule 53 (expression -> * ID .)
    CLASS           reduce using rule 53 (expression -> * ID .)
    FUNC            reduce using rule 53 (expression -> * ID .)
    INIT            reduce using rule 53 (expression -> * ID .)
    IF              reduce using rule 53 (expression -> * ID .)
    $end            reduce using rule 53 (expression -> * ID .)
    ;               reduce using rule 53 (expression -> * ID .)
    )               reduce using rule 53 (expression -> * ID .)
    ,               reduce using rule 53 (expression -> * ID .)
    PHPEND          reduce using rule 53 (expression -> * ID .)
    }               reduce using rule 53 (expression -> * ID .)
    HTMLEND         reduce using rule 53 (expression -> * ID .)
    SARROW          reduce using rule 53 (expression -> * ID .)
    ]               reduce using rule 53 (expression -> * ID .)
    EQ_DIV          reduce using rule 53 (expression -> * ID .)
    EQ_MOD          reduce using rule 53 (expression -> * ID .)
    EQ_MUL          reduce using rule 53 (expression -> * ID .)
    EQ_SUB          reduce using rule 53 (expression -> * ID .)
    EQ_ADD          reduce using rule 53 (expression -> * ID .)
    =               reduce using rule 53 (expression -> * ID .)
    AS              reduce using rule 53 (expression -> * ID .)


state 126

    (55) expression -> ID OF . ID
    ID              shift and go to state 214


state 127

    (119) variable_operation -> ID EQ_DIV . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 215
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 128

    (121) variable_operation -> ID EQ_MOD . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 216
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 129

    (123) variable_operation -> ID EQ_MUL . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 217
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 130

    (125) variable_operation -> ID EQ_SUB . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 218
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 131

    (127) variable_operation -> ID EQ_ADD . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 219
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 132

    (92) function_declaration -> ID FUNC . ID ( empty ) { program }
    (93) function_declaration -> ID FUNC . ID ( function_arguments ) { program }
    (94) function_declaration -> ID FUNC . ID ( empty ) : expression { program }
    (95) function_declaration -> ID FUNC . ID ( function_arguments ) : expression { program }
    ID              shift and go to state 220


state 133

    (73) function_call -> ID TARROW . ID ( function_arguments )
    (76) function_call -> ID TARROW . ID
    ID              shift and go to state 221


state 134

    (74) function_call -> ID \ . ID
    ID              shift and go to state 222


state 135

    (75) function_call -> ID / . ID
    ID              shift and go to state 223


state 136

    (82) function_call -> ID COLON_COLON . ID ( empty )
    (83) function_call -> ID COLON_COLON . ID ( function_arguments )
    ID              shift and go to state 224


state 137

    (56) expression -> $ expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    PHPSTART        reduce using rule 56 (expression -> $ expression .)
    LIMPORT         reduce using rule 56 (expression -> $ expression .)
    IMPORT          reduce using rule 56 (expression -> $ expression .)
    RETURN          reduce using rule 56 (expression -> $ expression .)
    DEL             reduce using rule 56 (expression -> $ expression .)
    FOREACH         reduce using rule 56 (expression -> $ expression .)
    FOR             reduce using rule 56 (expression -> $ expression .)
    DEBUG           reduce using rule 56 (expression -> $ expression .)
    SKIP            reduce using rule 56 (expression -> $ expression .)
    BREAK           reduce using rule 56 (expression -> $ expression .)
    LET             reduce using rule 56 (expression -> $ expression .)
    WHILE           reduce using rule 56 (expression -> $ expression .)
    NAMESPACE       reduce using rule 56 (expression -> $ expression .)
    CLASS           reduce using rule 56 (expression -> $ expression .)
    FUNC            reduce using rule 56 (expression -> $ expression .)
    INIT            reduce using rule 56 (expression -> $ expression .)
    IF              reduce using rule 56 (expression -> $ expression .)
    $end            reduce using rule 56 (expression -> $ expression .)
    ;               reduce using rule 56 (expression -> $ expression .)
    ,               reduce using rule 56 (expression -> $ expression .)
    PHPEND          reduce using rule 56 (expression -> $ expression .)
    }               reduce using rule 56 (expression -> $ expression .)
    )               reduce using rule 56 (expression -> $ expression .)
    HTMLEND         reduce using rule 56 (expression -> $ expression .)
    SARROW          reduce using rule 56 (expression -> $ expression .)
    ]               reduce using rule 56 (expression -> $ expression .)
    EQ_DIV          reduce using rule 56 (expression -> $ expression .)
    EQ_MOD          reduce using rule 56 (expression -> $ expression .)
    EQ_MUL          reduce using rule 56 (expression -> $ expression .)
    EQ_SUB          reduce using rule 56 (expression -> $ expression .)
    EQ_ADD          reduce using rule 56 (expression -> $ expression .)
    =               reduce using rule 56 (expression -> $ expression .)
    AS              reduce using rule 56 (expression -> $ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 138

    (116) variable_assignment -> $ ID . TARROW ID = expression ;
    (117) variable_assignment -> $ ID . = expression ;
    (84) function_call -> $ ID . TARROW ID ( empty )
    (85) function_call -> $ ID . TARROW ID ( function_arguments )
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    TARROW          shift and go to state 225
    =               shift and go to state 226
    OF              shift and go to state 126
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    FUNC            reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 139

    (138) import_statement -> . SELFISH . ;
    ;               shift and go to state 227


state 140

    (139) import_statement -> . GLOBAL . ;
    ;               shift and go to state 228


state 141

    (70) function_call -> . ENV . FROM ID { program }
    (71) function_call -> . ENV . { program }
    FROM            shift and go to state 229
    {               shift and go to state 230


state 142

    (61) html_full -> HTMLSTART empty . HTMLEND
    HTMLEND         shift and go to state 231


state 143

    (62) html_full -> HTMLSTART expression . HTMLEND
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    HTMLEND         shift and go to state 232
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 144

    (20) sandbox -> PHPSTART program . PHPEND
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    PHPEND          shift and go to state 233
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 145

    (21) sandbox -> LIMPORT expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 234
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 146

    (140) import_statement -> IMPORT expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 235
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 147

    (69) return_statement -> RETURN expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 236
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 148

    (137) delete_statement -> DEL ID . ;
    ;               shift and go to state 237


state 149

    (107) for_loop -> FOREACH ( . expression AS expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 238
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 150

    (148) _tuple -> { positional_args . , }
    (149) _tuple -> { positional_args . }
    (111) positional_args -> positional_args . , expression
    ,               shift and go to state 239
    }               shift and go to state 240


state 151

    (108) for_loop -> FOR ( . expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 241
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 152

    (66) break_statement -> DEBUG ; .
    ?               reduce using rule 66 (break_statement -> DEBUG ; .)
    (               reduce using rule 66 (break_statement -> DEBUG ; .)
    !               reduce using rule 66 (break_statement -> DEBUG ; .)
    +               reduce using rule 66 (break_statement -> DEBUG ; .)
    -               reduce using rule 66 (break_statement -> DEBUG ; .)
    *               reduce using rule 66 (break_statement -> DEBUG ; .)
    &               reduce using rule 66 (break_statement -> DEBUG ; .)
    ID              reduce using rule 66 (break_statement -> DEBUG ; .)
    $               reduce using rule 66 (break_statement -> DEBUG ; .)
    HTMLSTART       reduce using rule 66 (break_statement -> DEBUG ; .)
    PHPSTART        reduce using rule 66 (break_statement -> DEBUG ; .)
    LIMPORT         reduce using rule 66 (break_statement -> DEBUG ; .)
    .               reduce using rule 66 (break_statement -> DEBUG ; .)
    IMPORT          reduce using rule 66 (break_statement -> DEBUG ; .)
    RETURN          reduce using rule 66 (break_statement -> DEBUG ; .)
    DEL             reduce using rule 66 (break_statement -> DEBUG ; .)
    FOREACH         reduce using rule 66 (break_statement -> DEBUG ; .)
    FOR             reduce using rule 66 (break_statement -> DEBUG ; .)
    DEBUG           reduce using rule 66 (break_statement -> DEBUG ; .)
    SKIP            reduce using rule 66 (break_statement -> DEBUG ; .)
    BREAK           reduce using rule 66 (break_statement -> DEBUG ; .)
    LET             reduce using rule 66 (break_statement -> DEBUG ; .)
    WHILE           reduce using rule 66 (break_statement -> DEBUG ; .)
    NAMESPACE       reduce using rule 66 (break_statement -> DEBUG ; .)
    CLASS           reduce using rule 66 (break_statement -> DEBUG ; .)
    FUNC            reduce using rule 66 (break_statement -> DEBUG ; .)
    INIT            reduce using rule 66 (break_statement -> DEBUG ; .)
    [               reduce using rule 66 (break_statement -> DEBUG ; .)
    {               reduce using rule 66 (break_statement -> DEBUG ; .)
    STRING          reduce using rule 66 (break_statement -> DEBUG ; .)
    CHAR            reduce using rule 66 (break_statement -> DEBUG ; .)
    FALSE           reduce using rule 66 (break_statement -> DEBUG ; .)
    TRUE            reduce using rule 66 (break_statement -> DEBUG ; .)
    FLOAT           reduce using rule 66 (break_statement -> DEBUG ; .)
    INT             reduce using rule 66 (break_statement -> DEBUG ; .)
    NULL            reduce using rule 66 (break_statement -> DEBUG ; .)
    #               reduce using rule 66 (break_statement -> DEBUG ; .)
    NEW             reduce using rule 66 (break_statement -> DEBUG ; .)
    PYTHON_CODE_EXEC reduce using rule 66 (break_statement -> DEBUG ; .)
    PYTHON_CODE     reduce using rule 66 (break_statement -> DEBUG ; .)
    IF              reduce using rule 66 (break_statement -> DEBUG ; .)
    $end            reduce using rule 66 (break_statement -> DEBUG ; .)
    PHPEND          reduce using rule 66 (break_statement -> DEBUG ; .)
    }               reduce using rule 66 (break_statement -> DEBUG ; .)


state 153

    (67) break_statement -> SKIP ; .
    ?               reduce using rule 67 (break_statement -> SKIP ; .)
    (               reduce using rule 67 (break_statement -> SKIP ; .)
    !               reduce using rule 67 (break_statement -> SKIP ; .)
    +               reduce using rule 67 (break_statement -> SKIP ; .)
    -               reduce using rule 67 (break_statement -> SKIP ; .)
    *               reduce using rule 67 (break_statement -> SKIP ; .)
    &               reduce using rule 67 (break_statement -> SKIP ; .)
    ID              reduce using rule 67 (break_statement -> SKIP ; .)
    $               reduce using rule 67 (break_statement -> SKIP ; .)
    HTMLSTART       reduce using rule 67 (break_statement -> SKIP ; .)
    PHPSTART        reduce using rule 67 (break_statement -> SKIP ; .)
    LIMPORT         reduce using rule 67 (break_statement -> SKIP ; .)
    .               reduce using rule 67 (break_statement -> SKIP ; .)
    IMPORT          reduce using rule 67 (break_statement -> SKIP ; .)
    RETURN          reduce using rule 67 (break_statement -> SKIP ; .)
    DEL             reduce using rule 67 (break_statement -> SKIP ; .)
    FOREACH         reduce using rule 67 (break_statement -> SKIP ; .)
    FOR             reduce using rule 67 (break_statement -> SKIP ; .)
    DEBUG           reduce using rule 67 (break_statement -> SKIP ; .)
    SKIP            reduce using rule 67 (break_statement -> SKIP ; .)
    BREAK           reduce using rule 67 (break_statement -> SKIP ; .)
    LET             reduce using rule 67 (break_statement -> SKIP ; .)
    WHILE           reduce using rule 67 (break_statement -> SKIP ; .)
    NAMESPACE       reduce using rule 67 (break_statement -> SKIP ; .)
    CLASS           reduce using rule 67 (break_statement -> SKIP ; .)
    FUNC            reduce using rule 67 (break_statement -> SKIP ; .)
    INIT            reduce using rule 67 (break_statement -> SKIP ; .)
    [               reduce using rule 67 (break_statement -> SKIP ; .)
    {               reduce using rule 67 (break_statement -> SKIP ; .)
    STRING          reduce using rule 67 (break_statement -> SKIP ; .)
    CHAR            reduce using rule 67 (break_statement -> SKIP ; .)
    FALSE           reduce using rule 67 (break_statement -> SKIP ; .)
    TRUE            reduce using rule 67 (break_statement -> SKIP ; .)
    FLOAT           reduce using rule 67 (break_statement -> SKIP ; .)
    INT             reduce using rule 67 (break_statement -> SKIP ; .)
    NULL            reduce using rule 67 (break_statement -> SKIP ; .)
    #               reduce using rule 67 (break_statement -> SKIP ; .)
    NEW             reduce using rule 67 (break_statement -> SKIP ; .)
    PYTHON_CODE_EXEC reduce using rule 67 (break_statement -> SKIP ; .)
    PYTHON_CODE     reduce using rule 67 (break_statement -> SKIP ; .)
    IF              reduce using rule 67 (break_statement -> SKIP ; .)
    $end            reduce using rule 67 (break_statement -> SKIP ; .)
    PHPEND          reduce using rule 67 (break_statement -> SKIP ; .)
    }               reduce using rule 67 (break_statement -> SKIP ; .)


state 154

    (68) break_statement -> BREAK ; .
    ?               reduce using rule 68 (break_statement -> BREAK ; .)
    (               reduce using rule 68 (break_statement -> BREAK ; .)
    !               reduce using rule 68 (break_statement -> BREAK ; .)
    +               reduce using rule 68 (break_statement -> BREAK ; .)
    -               reduce using rule 68 (break_statement -> BREAK ; .)
    *               reduce using rule 68 (break_statement -> BREAK ; .)
    &               reduce using rule 68 (break_statement -> BREAK ; .)
    ID              reduce using rule 68 (break_statement -> BREAK ; .)
    $               reduce using rule 68 (break_statement -> BREAK ; .)
    HTMLSTART       reduce using rule 68 (break_statement -> BREAK ; .)
    PHPSTART        reduce using rule 68 (break_statement -> BREAK ; .)
    LIMPORT         reduce using rule 68 (break_statement -> BREAK ; .)
    .               reduce using rule 68 (break_statement -> BREAK ; .)
    IMPORT          reduce using rule 68 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 68 (break_statement -> BREAK ; .)
    DEL             reduce using rule 68 (break_statement -> BREAK ; .)
    FOREACH         reduce using rule 68 (break_statement -> BREAK ; .)
    FOR             reduce using rule 68 (break_statement -> BREAK ; .)
    DEBUG           reduce using rule 68 (break_statement -> BREAK ; .)
    SKIP            reduce using rule 68 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 68 (break_statement -> BREAK ; .)
    LET             reduce using rule 68 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 68 (break_statement -> BREAK ; .)
    NAMESPACE       reduce using rule 68 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 68 (break_statement -> BREAK ; .)
    FUNC            reduce using rule 68 (break_statement -> BREAK ; .)
    INIT            reduce using rule 68 (break_statement -> BREAK ; .)
    [               reduce using rule 68 (break_statement -> BREAK ; .)
    {               reduce using rule 68 (break_statement -> BREAK ; .)
    STRING          reduce using rule 68 (break_statement -> BREAK ; .)
    CHAR            reduce using rule 68 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 68 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 68 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 68 (break_statement -> BREAK ; .)
    INT             reduce using rule 68 (break_statement -> BREAK ; .)
    NULL            reduce using rule 68 (break_statement -> BREAK ; .)
    #               reduce using rule 68 (break_statement -> BREAK ; .)
    NEW             reduce using rule 68 (break_statement -> BREAK ; .)
    PYTHON_CODE_EXEC reduce using rule 68 (break_statement -> BREAK ; .)
    PYTHON_CODE     reduce using rule 68 (break_statement -> BREAK ; .)
    IF              reduce using rule 68 (break_statement -> BREAK ; .)
    $end            reduce using rule 68 (break_statement -> BREAK ; .)
    PHPEND          reduce using rule 68 (break_statement -> BREAK ; .)
    }               reduce using rule 68 (break_statement -> BREAK ; .)


state 155

    (114) variable_assignment -> LET get_index . = expression ;
    (33) expression -> get_index .
    =               shift and go to state 242
    ^               reduce using rule 33 (expression -> get_index .)
    [               reduce using rule 33 (expression -> get_index .)
    >               reduce using rule 33 (expression -> get_index .)
    <               reduce using rule 33 (expression -> get_index .)
    &               reduce using rule 33 (expression -> get_index .)
    |               reduce using rule 33 (expression -> get_index .)
    EQ_GREATER      reduce using rule 33 (expression -> get_index .)
    EQ_LESS         reduce using rule 33 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 33 (expression -> get_index .)
    EQEQ            reduce using rule 33 (expression -> get_index .)
    %               reduce using rule 33 (expression -> get_index .)
    *               reduce using rule 33 (expression -> get_index .)
    /               reduce using rule 33 (expression -> get_index .)
    -               reduce using rule 33 (expression -> get_index .)
    +               reduce using rule 33 (expression -> get_index .)
    .               reduce using rule 33 (expression -> get_index .)
    COLON_COLON     reduce using rule 33 (expression -> get_index .)
    (               reduce using rule 33 (expression -> get_index .)
    $               reduce using rule 33 (expression -> get_index .)
    ID              reduce using rule 33 (expression -> get_index .)
    !               reduce using rule 33 (expression -> get_index .)
    ?               reduce using rule 33 (expression -> get_index .)
    HTMLSTART       reduce using rule 33 (expression -> get_index .)
    {               reduce using rule 33 (expression -> get_index .)
    STRING          reduce using rule 33 (expression -> get_index .)
    CHAR            reduce using rule 33 (expression -> get_index .)
    FALSE           reduce using rule 33 (expression -> get_index .)
    TRUE            reduce using rule 33 (expression -> get_index .)
    FLOAT           reduce using rule 33 (expression -> get_index .)
    INT             reduce using rule 33 (expression -> get_index .)
    NULL            reduce using rule 33 (expression -> get_index .)
    #               reduce using rule 33 (expression -> get_index .)
    NEW             reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 33 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 33 (expression -> get_index .)


state 156

    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ^               shift and go to state 103
    [               shift and go to state 104
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 157

    (115) variable_assignment -> LET ID . : ID = expression ;
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    :               shift and go to state 243
    OF              shift and go to state 126
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 158

    (109) while_loop -> WHILE ( . expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 244
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 159

    (128) conditional -> if_statement else_statement .
    ?               reduce using rule 128 (conditional -> if_statement else_statement .)
    (               reduce using rule 128 (conditional -> if_statement else_statement .)
    !               reduce using rule 128 (conditional -> if_statement else_statement .)
    +               reduce using rule 128 (conditional -> if_statement else_statement .)
    -               reduce using rule 128 (conditional -> if_statement else_statement .)
    *               reduce using rule 128 (conditional -> if_statement else_statement .)
    &               reduce using rule 128 (conditional -> if_statement else_statement .)
    ID              reduce using rule 128 (conditional -> if_statement else_statement .)
    $               reduce using rule 128 (conditional -> if_statement else_statement .)
    HTMLSTART       reduce using rule 128 (conditional -> if_statement else_statement .)
    PHPSTART        reduce using rule 128 (conditional -> if_statement else_statement .)
    LIMPORT         reduce using rule 128 (conditional -> if_statement else_statement .)
    .               reduce using rule 128 (conditional -> if_statement else_statement .)
    IMPORT          reduce using rule 128 (conditional -> if_statement else_statement .)
    RETURN          reduce using rule 128 (conditional -> if_statement else_statement .)
    DEL             reduce using rule 128 (conditional -> if_statement else_statement .)
    FOREACH         reduce using rule 128 (conditional -> if_statement else_statement .)
    FOR             reduce using rule 128 (conditional -> if_statement else_statement .)
    DEBUG           reduce using rule 128 (conditional -> if_statement else_statement .)
    SKIP            reduce using rule 128 (conditional -> if_statement else_statement .)
    BREAK           reduce using rule 128 (conditional -> if_statement else_statement .)
    LET             reduce using rule 128 (conditional -> if_statement else_statement .)
    WHILE           reduce using rule 128 (conditional -> if_statement else_statement .)
    NAMESPACE       reduce using rule 128 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 128 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 128 (conditional -> if_statement else_statement .)
    INIT            reduce using rule 128 (conditional -> if_statement else_statement .)
    [               reduce using rule 128 (conditional -> if_statement else_statement .)
    {               reduce using rule 128 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 128 (conditional -> if_statement else_statement .)
    CHAR            reduce using rule 128 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 128 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 128 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 128 (conditional -> if_statement else_statement .)
    INT             reduce using rule 128 (conditional -> if_statement else_statement .)
    NULL            reduce using rule 128 (conditional -> if_statement else_statement .)
    #               reduce using rule 128 (conditional -> if_statement else_statement .)
    NEW             reduce using rule 128 (conditional -> if_statement else_statement .)
    PYTHON_CODE_EXEC reduce using rule 128 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 128 (conditional -> if_statement else_statement .)
    IF              reduce using rule 128 (conditional -> if_statement else_statement .)
    $end            reduce using rule 128 (conditional -> if_statement else_statement .)
    PHPEND          reduce using rule 128 (conditional -> if_statement else_statement .)
    }               reduce using rule 128 (conditional -> if_statement else_statement .)


state 160

    (129) conditional -> if_statement else_if_loop . else_statement
    (130) conditional -> if_statement else_if_loop .
    (134) else_if_loop -> else_if_loop . else_if_statement
    (136) else_statement -> . ELSE { program }
    (135) else_if_statement -> . ELSE IF ( expression ) { program }
    ?               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    *               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    &               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 130 (conditional -> if_statement else_if_loop .)
    $               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    HTMLSTART       reduce using rule 130 (conditional -> if_statement else_if_loop .)
    PHPSTART        reduce using rule 130 (conditional -> if_statement else_if_loop .)
    LIMPORT         reduce using rule 130 (conditional -> if_statement else_if_loop .)
    .               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    IMPORT          reduce using rule 130 (conditional -> if_statement else_if_loop .)
    RETURN          reduce using rule 130 (conditional -> if_statement else_if_loop .)
    DEL             reduce using rule 130 (conditional -> if_statement else_if_loop .)
    FOREACH         reduce using rule 130 (conditional -> if_statement else_if_loop .)
    FOR             reduce using rule 130 (conditional -> if_statement else_if_loop .)
    DEBUG           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    SKIP            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    BREAK           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    LET             reduce using rule 130 (conditional -> if_statement else_if_loop .)
    WHILE           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    NAMESPACE       reduce using rule 130 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    INIT            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 130 (conditional -> if_statement else_if_loop .)
    CHAR            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 130 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 130 (conditional -> if_statement else_if_loop .)
    NULL            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    #               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    NEW             reduce using rule 130 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE_EXEC reduce using rule 130 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 130 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 130 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 130 (conditional -> if_statement else_if_loop .)
    PHPEND          reduce using rule 130 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 130 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 161

    else_statement                 shift and go to state 245
    else_if_statement              shift and go to state 246

state 161

    (136) else_statement -> ELSE . { program }
    (135) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 247
    IF              shift and go to state 248


state 162

    (133) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 133 (else_if_loop -> else_if_statement .)
    ?               reduce using rule 133 (else_if_loop -> else_if_statement .)
    (               reduce using rule 133 (else_if_loop -> else_if_statement .)
    !               reduce using rule 133 (else_if_loop -> else_if_statement .)
    +               reduce using rule 133 (else_if_loop -> else_if_statement .)
    -               reduce using rule 133 (else_if_loop -> else_if_statement .)
    *               reduce using rule 133 (else_if_loop -> else_if_statement .)
    &               reduce using rule 133 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 133 (else_if_loop -> else_if_statement .)
    $               reduce using rule 133 (else_if_loop -> else_if_statement .)
    HTMLSTART       reduce using rule 133 (else_if_loop -> else_if_statement .)
    PHPSTART        reduce using rule 133 (else_if_loop -> else_if_statement .)
    LIMPORT         reduce using rule 133 (else_if_loop -> else_if_statement .)
    .               reduce using rule 133 (else_if_loop -> else_if_statement .)
    IMPORT          reduce using rule 133 (else_if_loop -> else_if_statement .)
    RETURN          reduce using rule 133 (else_if_loop -> else_if_statement .)
    DEL             reduce using rule 133 (else_if_loop -> else_if_statement .)
    FOREACH         reduce using rule 133 (else_if_loop -> else_if_statement .)
    FOR             reduce using rule 133 (else_if_loop -> else_if_statement .)
    DEBUG           reduce using rule 133 (else_if_loop -> else_if_statement .)
    SKIP            reduce using rule 133 (else_if_loop -> else_if_statement .)
    BREAK           reduce using rule 133 (else_if_loop -> else_if_statement .)
    LET             reduce using rule 133 (else_if_loop -> else_if_statement .)
    WHILE           reduce using rule 133 (else_if_loop -> else_if_statement .)
    NAMESPACE       reduce using rule 133 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 133 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 133 (else_if_loop -> else_if_statement .)
    INIT            reduce using rule 133 (else_if_loop -> else_if_statement .)
    [               reduce using rule 133 (else_if_loop -> else_if_statement .)
    {               reduce using rule 133 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 133 (else_if_loop -> else_if_statement .)
    CHAR            reduce using rule 133 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 133 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 133 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 133 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 133 (else_if_loop -> else_if_statement .)
    NULL            reduce using rule 133 (else_if_loop -> else_if_statement .)
    #               reduce using rule 133 (else_if_loop -> else_if_statement .)
    NEW             reduce using rule 133 (else_if_loop -> else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 133 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 133 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 133 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 133 (else_if_loop -> else_if_statement .)
    PHPEND          reduce using rule 133 (else_if_loop -> else_if_statement .)
    }               reduce using rule 133 (else_if_loop -> else_if_statement .)


state 163

    (103) class_declaration -> NAMESPACE ID . ;
    (104) class_declaration -> NAMESPACE ID . { program }
    ;               shift and go to state 249
    {               shift and go to state 250


state 164

    (105) class_declaration -> CLASS ID . EXTENDS ID { program }
    (106) class_declaration -> CLASS ID . { program }
    EXTENDS         shift and go to state 251
    {               shift and go to state 252


state 165

    (89) function_declaration -> FUNC ID . COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> FUNC ID . COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (96) function_declaration -> FUNC ID . ( empty ) { program }
    (97) function_declaration -> FUNC ID . ( empty ) : expression { program }
    (98) function_declaration -> FUNC ID . ( function_arguments ) { program }
    (99) function_declaration -> FUNC ID . ( function_arguments ) : expression { program }
    COLON_COLON     shift and go to state 253
    (               shift and go to state 254


state 166

    (91) function_declaration -> INIT ( . function_arguments ) { program } ;
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    function_arguments             shift and go to state 255
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    expression                     shift and go to state 86
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 167

    (142) assoc_array -> [ assoc_array_items . ]
    (145) assoc_array_items -> assoc_array_items . , expression SARROW expression
    ]               shift and go to state 256
    ,               shift and go to state 257


state 168

    (143) assoc_array -> [ empty . ]
    ]               shift and go to state 258


state 169

    (150) _list -> [ positional_args . , ]
    (151) _list -> [ positional_args . ]
    (111) positional_args -> positional_args . , expression
    ,               shift and go to state 259
    ]               shift and go to state 260


state 170

    (144) assoc_array_items -> expression . SARROW expression
    (110) positional_args -> expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    SARROW          shift and go to state 261
    ,               reduce using rule 110 (positional_args -> expression .)
    ]               reduce using rule 110 (positional_args -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 171

    (77) function_call -> # DEPENDS . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 262
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 172

    (78) function_call -> # DEFINE . expression ? ID
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 263
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 173

    (80) function_call -> NEW expression . ( empty )
    (81) function_call -> NEW expression . ( function_arguments )
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 264
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 174

    (132) if_statement -> IF ( . expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 265
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 175

    (4) statement -> ? expression ; .
    ?               reduce using rule 4 (statement -> ? expression ; .)
    (               reduce using rule 4 (statement -> ? expression ; .)
    !               reduce using rule 4 (statement -> ? expression ; .)
    +               reduce using rule 4 (statement -> ? expression ; .)
    -               reduce using rule 4 (statement -> ? expression ; .)
    *               reduce using rule 4 (statement -> ? expression ; .)
    &               reduce using rule 4 (statement -> ? expression ; .)
    ID              reduce using rule 4 (statement -> ? expression ; .)
    $               reduce using rule 4 (statement -> ? expression ; .)
    HTMLSTART       reduce using rule 4 (statement -> ? expression ; .)
    PHPSTART        reduce using rule 4 (statement -> ? expression ; .)
    LIMPORT         reduce using rule 4 (statement -> ? expression ; .)
    .               reduce using rule 4 (statement -> ? expression ; .)
    IMPORT          reduce using rule 4 (statement -> ? expression ; .)
    RETURN          reduce using rule 4 (statement -> ? expression ; .)
    DEL             reduce using rule 4 (statement -> ? expression ; .)
    FOREACH         reduce using rule 4 (statement -> ? expression ; .)
    FOR             reduce using rule 4 (statement -> ? expression ; .)
    DEBUG           reduce using rule 4 (statement -> ? expression ; .)
    SKIP            reduce using rule 4 (statement -> ? expression ; .)
    BREAK           reduce using rule 4 (statement -> ? expression ; .)
    LET             reduce using rule 4 (statement -> ? expression ; .)
    WHILE           reduce using rule 4 (statement -> ? expression ; .)
    NAMESPACE       reduce using rule 4 (statement -> ? expression ; .)
    CLASS           reduce using rule 4 (statement -> ? expression ; .)
    FUNC            reduce using rule 4 (statement -> ? expression ; .)
    INIT            reduce using rule 4 (statement -> ? expression ; .)
    [               reduce using rule 4 (statement -> ? expression ; .)
    {               reduce using rule 4 (statement -> ? expression ; .)
    STRING          reduce using rule 4 (statement -> ? expression ; .)
    CHAR            reduce using rule 4 (statement -> ? expression ; .)
    FALSE           reduce using rule 4 (statement -> ? expression ; .)
    TRUE            reduce using rule 4 (statement -> ? expression ; .)
    FLOAT           reduce using rule 4 (statement -> ? expression ; .)
    INT             reduce using rule 4 (statement -> ? expression ; .)
    NULL            reduce using rule 4 (statement -> ? expression ; .)
    #               reduce using rule 4 (statement -> ? expression ; .)
    NEW             reduce using rule 4 (statement -> ? expression ; .)
    PYTHON_CODE_EXEC reduce using rule 4 (statement -> ? expression ; .)
    PYTHON_CODE     reduce using rule 4 (statement -> ? expression ; .)
    IF              reduce using rule 4 (statement -> ? expression ; .)
    $end            reduce using rule 4 (statement -> ? expression ; .)
    PHPEND          reduce using rule 4 (statement -> ? expression ; .)
    }               reduce using rule 4 (statement -> ? expression ; .)


state 176

    (84) function_call -> $ ID . TARROW ID ( empty )
    (85) function_call -> $ ID . TARROW ID ( function_arguments )
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    TARROW          shift and go to state 266
    OF              shift and go to state 126
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    FUNC            reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    ;               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    )               reduce using rule 166 (id -> ID .)
    HTMLEND         reduce using rule 166 (id -> ID .)
    SARROW          reduce using rule 166 (id -> ID .)
    ]               reduce using rule 166 (id -> ID .)
    EQ_DIV          reduce using rule 166 (id -> ID .)
    EQ_MOD          reduce using rule 166 (id -> ID .)
    EQ_MUL          reduce using rule 166 (id -> ID .)
    EQ_SUB          reduce using rule 166 (id -> ID .)
    EQ_ADD          reduce using rule 166 (id -> ID .)
    =               reduce using rule 166 (id -> ID .)
    AS              reduce using rule 166 (id -> ID .)
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 177

    (37) expression -> expression > expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 37 (expression -> expression > expression .)
    <               reduce using rule 37 (expression -> expression > expression .)
    &               reduce using rule 37 (expression -> expression > expression .)
    |               reduce using rule 37 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 37 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 37 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 37 (expression -> expression > expression .)
    EQEQ            reduce using rule 37 (expression -> expression > expression .)
    .               reduce using rule 37 (expression -> expression > expression .)
    ^               reduce using rule 37 (expression -> expression > expression .)
    [               reduce using rule 37 (expression -> expression > expression .)
    (               reduce using rule 37 (expression -> expression > expression .)
    $               reduce using rule 37 (expression -> expression > expression .)
    ID              reduce using rule 37 (expression -> expression > expression .)
    ?               reduce using rule 37 (expression -> expression > expression .)
    HTMLSTART       reduce using rule 37 (expression -> expression > expression .)
    {               reduce using rule 37 (expression -> expression > expression .)
    STRING          reduce using rule 37 (expression -> expression > expression .)
    CHAR            reduce using rule 37 (expression -> expression > expression .)
    FALSE           reduce using rule 37 (expression -> expression > expression .)
    TRUE            reduce using rule 37 (expression -> expression > expression .)
    FLOAT           reduce using rule 37 (expression -> expression > expression .)
    INT             reduce using rule 37 (expression -> expression > expression .)
    NULL            reduce using rule 37 (expression -> expression > expression .)
    #               reduce using rule 37 (expression -> expression > expression .)
    NEW             reduce using rule 37 (expression -> expression > expression .)
    PYTHON_CODE_EXEC reduce using rule 37 (expression -> expression > expression .)
    PYTHON_CODE     reduce using rule 37 (expression -> expression > expression .)
    PHPSTART        reduce using rule 37 (expression -> expression > expression .)
    LIMPORT         reduce using rule 37 (expression -> expression > expression .)
    IMPORT          reduce using rule 37 (expression -> expression > expression .)
    RETURN          reduce using rule 37 (expression -> expression > expression .)
    DEL             reduce using rule 37 (expression -> expression > expression .)
    FOREACH         reduce using rule 37 (expression -> expression > expression .)
    FOR             reduce using rule 37 (expression -> expression > expression .)
    DEBUG           reduce using rule 37 (expression -> expression > expression .)
    SKIP            reduce using rule 37 (expression -> expression > expression .)
    BREAK           reduce using rule 37 (expression -> expression > expression .)
    LET             reduce using rule 37 (expression -> expression > expression .)
    WHILE           reduce using rule 37 (expression -> expression > expression .)
    NAMESPACE       reduce using rule 37 (expression -> expression > expression .)
    CLASS           reduce using rule 37 (expression -> expression > expression .)
    FUNC            reduce using rule 37 (expression -> expression > expression .)
    INIT            reduce using rule 37 (expression -> expression > expression .)
    IF              reduce using rule 37 (expression -> expression > expression .)
    $end            reduce using rule 37 (expression -> expression > expression .)
    ;               reduce using rule 37 (expression -> expression > expression .)
    ,               reduce using rule 37 (expression -> expression > expression .)
    PHPEND          reduce using rule 37 (expression -> expression > expression .)
    }               reduce using rule 37 (expression -> expression > expression .)
    )               reduce using rule 37 (expression -> expression > expression .)
    HTMLEND         reduce using rule 37 (expression -> expression > expression .)
    SARROW          reduce using rule 37 (expression -> expression > expression .)
    ]               reduce using rule 37 (expression -> expression > expression .)
    EQ_DIV          reduce using rule 37 (expression -> expression > expression .)
    EQ_MOD          reduce using rule 37 (expression -> expression > expression .)
    EQ_MUL          reduce using rule 37 (expression -> expression > expression .)
    EQ_SUB          reduce using rule 37 (expression -> expression > expression .)
    EQ_ADD          reduce using rule 37 (expression -> expression > expression .)
    =               reduce using rule 37 (expression -> expression > expression .)
    AS              reduce using rule 37 (expression -> expression > expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 178

    (38) expression -> expression < expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 38 (expression -> expression < expression .)
    <               reduce using rule 38 (expression -> expression < expression .)
    &               reduce using rule 38 (expression -> expression < expression .)
    |               reduce using rule 38 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 38 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 38 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 38 (expression -> expression < expression .)
    EQEQ            reduce using rule 38 (expression -> expression < expression .)
    .               reduce using rule 38 (expression -> expression < expression .)
    ^               reduce using rule 38 (expression -> expression < expression .)
    [               reduce using rule 38 (expression -> expression < expression .)
    (               reduce using rule 38 (expression -> expression < expression .)
    $               reduce using rule 38 (expression -> expression < expression .)
    ID              reduce using rule 38 (expression -> expression < expression .)
    ?               reduce using rule 38 (expression -> expression < expression .)
    HTMLSTART       reduce using rule 38 (expression -> expression < expression .)
    {               reduce using rule 38 (expression -> expression < expression .)
    STRING          reduce using rule 38 (expression -> expression < expression .)
    CHAR            reduce using rule 38 (expression -> expression < expression .)
    FALSE           reduce using rule 38 (expression -> expression < expression .)
    TRUE            reduce using rule 38 (expression -> expression < expression .)
    FLOAT           reduce using rule 38 (expression -> expression < expression .)
    INT             reduce using rule 38 (expression -> expression < expression .)
    NULL            reduce using rule 38 (expression -> expression < expression .)
    #               reduce using rule 38 (expression -> expression < expression .)
    NEW             reduce using rule 38 (expression -> expression < expression .)
    PYTHON_CODE_EXEC reduce using rule 38 (expression -> expression < expression .)
    PYTHON_CODE     reduce using rule 38 (expression -> expression < expression .)
    PHPSTART        reduce using rule 38 (expression -> expression < expression .)
    LIMPORT         reduce using rule 38 (expression -> expression < expression .)
    IMPORT          reduce using rule 38 (expression -> expression < expression .)
    RETURN          reduce using rule 38 (expression -> expression < expression .)
    DEL             reduce using rule 38 (expression -> expression < expression .)
    FOREACH         reduce using rule 38 (expression -> expression < expression .)
    FOR             reduce using rule 38 (expression -> expression < expression .)
    DEBUG           reduce using rule 38 (expression -> expression < expression .)
    SKIP            reduce using rule 38 (expression -> expression < expression .)
    BREAK           reduce using rule 38 (expression -> expression < expression .)
    LET             reduce using rule 38 (expression -> expression < expression .)
    WHILE           reduce using rule 38 (expression -> expression < expression .)
    NAMESPACE       reduce using rule 38 (expression -> expression < expression .)
    CLASS           reduce using rule 38 (expression -> expression < expression .)
    FUNC            reduce using rule 38 (expression -> expression < expression .)
    INIT            reduce using rule 38 (expression -> expression < expression .)
    IF              reduce using rule 38 (expression -> expression < expression .)
    $end            reduce using rule 38 (expression -> expression < expression .)
    ;               reduce using rule 38 (expression -> expression < expression .)
    ,               reduce using rule 38 (expression -> expression < expression .)
    PHPEND          reduce using rule 38 (expression -> expression < expression .)
    }               reduce using rule 38 (expression -> expression < expression .)
    )               reduce using rule 38 (expression -> expression < expression .)
    HTMLEND         reduce using rule 38 (expression -> expression < expression .)
    SARROW          reduce using rule 38 (expression -> expression < expression .)
    ]               reduce using rule 38 (expression -> expression < expression .)
    EQ_DIV          reduce using rule 38 (expression -> expression < expression .)
    EQ_MOD          reduce using rule 38 (expression -> expression < expression .)
    EQ_MUL          reduce using rule 38 (expression -> expression < expression .)
    EQ_SUB          reduce using rule 38 (expression -> expression < expression .)
    EQ_ADD          reduce using rule 38 (expression -> expression < expression .)
    =               reduce using rule 38 (expression -> expression < expression .)
    AS              reduce using rule 38 (expression -> expression < expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 179

    (42) expression -> expression & expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    &               reduce using rule 42 (expression -> expression & expression .)
    |               reduce using rule 42 (expression -> expression & expression .)
    .               reduce using rule 42 (expression -> expression & expression .)
    ^               reduce using rule 42 (expression -> expression & expression .)
    [               reduce using rule 42 (expression -> expression & expression .)
    (               reduce using rule 42 (expression -> expression & expression .)
    $               reduce using rule 42 (expression -> expression & expression .)
    ID              reduce using rule 42 (expression -> expression & expression .)
    ?               reduce using rule 42 (expression -> expression & expression .)
    HTMLSTART       reduce using rule 42 (expression -> expression & expression .)
    {               reduce using rule 42 (expression -> expression & expression .)
    STRING          reduce using rule 42 (expression -> expression & expression .)
    CHAR            reduce using rule 42 (expression -> expression & expression .)
    FALSE           reduce using rule 42 (expression -> expression & expression .)
    TRUE            reduce using rule 42 (expression -> expression & expression .)
    FLOAT           reduce using rule 42 (expression -> expression & expression .)
    INT             reduce using rule 42 (expression -> expression & expression .)
    NULL            reduce using rule 42 (expression -> expression & expression .)
    #               reduce using rule 42 (expression -> expression & expression .)
    NEW             reduce using rule 42 (expression -> expression & expression .)
    PYTHON_CODE_EXEC reduce using rule 42 (expression -> expression & expression .)
    PYTHON_CODE     reduce using rule 42 (expression -> expression & expression .)
    PHPSTART        reduce using rule 42 (expression -> expression & expression .)
    LIMPORT         reduce using rule 42 (expression -> expression & expression .)
    IMPORT          reduce using rule 42 (expression -> expression & expression .)
    RETURN          reduce using rule 42 (expression -> expression & expression .)
    DEL             reduce using rule 42 (expression -> expression & expression .)
    FOREACH         reduce using rule 42 (expression -> expression & expression .)
    FOR             reduce using rule 42 (expression -> expression & expression .)
    DEBUG           reduce using rule 42 (expression -> expression & expression .)
    SKIP            reduce using rule 42 (expression -> expression & expression .)
    BREAK           reduce using rule 42 (expression -> expression & expression .)
    LET             reduce using rule 42 (expression -> expression & expression .)
    WHILE           reduce using rule 42 (expression -> expression & expression .)
    NAMESPACE       reduce using rule 42 (expression -> expression & expression .)
    CLASS           reduce using rule 42 (expression -> expression & expression .)
    FUNC            reduce using rule 42 (expression -> expression & expression .)
    INIT            reduce using rule 42 (expression -> expression & expression .)
    IF              reduce using rule 42 (expression -> expression & expression .)
    $end            reduce using rule 42 (expression -> expression & expression .)
    ;               reduce using rule 42 (expression -> expression & expression .)
    ,               reduce using rule 42 (expression -> expression & expression .)
    PHPEND          reduce using rule 42 (expression -> expression & expression .)
    }               reduce using rule 42 (expression -> expression & expression .)
    )               reduce using rule 42 (expression -> expression & expression .)
    HTMLEND         reduce using rule 42 (expression -> expression & expression .)
    SARROW          reduce using rule 42 (expression -> expression & expression .)
    ]               reduce using rule 42 (expression -> expression & expression .)
    EQ_DIV          reduce using rule 42 (expression -> expression & expression .)
    EQ_MOD          reduce using rule 42 (expression -> expression & expression .)
    EQ_MUL          reduce using rule 42 (expression -> expression & expression .)
    EQ_SUB          reduce using rule 42 (expression -> expression & expression .)
    EQ_ADD          reduce using rule 42 (expression -> expression & expression .)
    =               reduce using rule 42 (expression -> expression & expression .)
    AS              reduce using rule 42 (expression -> expression & expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 180

    (54) expression -> & ID .
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! reduce/reduce conflict for > resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for < resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for & resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for | resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQEQ resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for % resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for * resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for / resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for - resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for + resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for . resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ^ resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for [ resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ( resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for $ resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ID resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ! resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ? resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for { resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for STRING resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for CHAR resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for INT resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for NULL resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for # resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for NEW resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for PHPSTART resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for LIMPORT resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for IMPORT resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for DEL resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for FOREACH resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for DEBUG resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for SKIP resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for BREAK resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for LET resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for CLASS resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for INIT resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for IF resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for $end resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ; resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for , resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for PHPEND resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for } resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ) resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for HTMLEND resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for SARROW resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for ] resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_MOD resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_MUL resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_SUB resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for EQ_ADD resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for = resolved using rule 54 (expression -> & ID .)
  ! reduce/reduce conflict for AS resolved using rule 54 (expression -> & ID .)
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    ;               reduce using rule 54 (expression -> & ID .)
    >               reduce using rule 54 (expression -> & ID .)
    <               reduce using rule 54 (expression -> & ID .)
    &               reduce using rule 54 (expression -> & ID .)
    |               reduce using rule 54 (expression -> & ID .)
    EQ_GREATER      reduce using rule 54 (expression -> & ID .)
    EQ_LESS         reduce using rule 54 (expression -> & ID .)
    NOT_EQEQ        reduce using rule 54 (expression -> & ID .)
    EQEQ            reduce using rule 54 (expression -> & ID .)
    %               reduce using rule 54 (expression -> & ID .)
    *               reduce using rule 54 (expression -> & ID .)
    -               reduce using rule 54 (expression -> & ID .)
    +               reduce using rule 54 (expression -> & ID .)
    .               reduce using rule 54 (expression -> & ID .)
    ^               reduce using rule 54 (expression -> & ID .)
    [               reduce using rule 54 (expression -> & ID .)
    (               reduce using rule 54 (expression -> & ID .)
    $               reduce using rule 54 (expression -> & ID .)
    ID              reduce using rule 54 (expression -> & ID .)
    !               reduce using rule 54 (expression -> & ID .)
    ?               reduce using rule 54 (expression -> & ID .)
    HTMLSTART       reduce using rule 54 (expression -> & ID .)
    {               reduce using rule 54 (expression -> & ID .)
    STRING          reduce using rule 54 (expression -> & ID .)
    CHAR            reduce using rule 54 (expression -> & ID .)
    FALSE           reduce using rule 54 (expression -> & ID .)
    TRUE            reduce using rule 54 (expression -> & ID .)
    FLOAT           reduce using rule 54 (expression -> & ID .)
    INT             reduce using rule 54 (expression -> & ID .)
    NULL            reduce using rule 54 (expression -> & ID .)
    #               reduce using rule 54 (expression -> & ID .)
    NEW             reduce using rule 54 (expression -> & ID .)
    PYTHON_CODE_EXEC reduce using rule 54 (expression -> & ID .)
    PYTHON_CODE     reduce using rule 54 (expression -> & ID .)
    PHPSTART        reduce using rule 54 (expression -> & ID .)
    LIMPORT         reduce using rule 54 (expression -> & ID .)
    IMPORT          reduce using rule 54 (expression -> & ID .)
    RETURN          reduce using rule 54 (expression -> & ID .)
    DEL             reduce using rule 54 (expression -> & ID .)
    FOREACH         reduce using rule 54 (expression -> & ID .)
    FOR             reduce using rule 54 (expression -> & ID .)
    DEBUG           reduce using rule 54 (expression -> & ID .)
    SKIP            reduce using rule 54 (expression -> & ID .)
    BREAK           reduce using rule 54 (expression -> & ID .)
    LET             reduce using rule 54 (expression -> & ID .)
    WHILE           reduce using rule 54 (expression -> & ID .)
    NAMESPACE       reduce using rule 54 (expression -> & ID .)
    CLASS           reduce using rule 54 (expression -> & ID .)
    FUNC            reduce using rule 54 (expression -> & ID .)
    INIT            reduce using rule 54 (expression -> & ID .)
    IF              reduce using rule 54 (expression -> & ID .)
    $end            reduce using rule 54 (expression -> & ID .)
    ,               reduce using rule 54 (expression -> & ID .)
    PHPEND          reduce using rule 54 (expression -> & ID .)
    }               reduce using rule 54 (expression -> & ID .)
    )               reduce using rule 54 (expression -> & ID .)
    HTMLEND         reduce using rule 54 (expression -> & ID .)
    SARROW          reduce using rule 54 (expression -> & ID .)
    ]               reduce using rule 54 (expression -> & ID .)
    EQ_DIV          reduce using rule 54 (expression -> & ID .)
    EQ_MOD          reduce using rule 54 (expression -> & ID .)
    EQ_MUL          reduce using rule 54 (expression -> & ID .)
    EQ_SUB          reduce using rule 54 (expression -> & ID .)
    EQ_ADD          reduce using rule 54 (expression -> & ID .)
    =               reduce using rule 54 (expression -> & ID .)
    AS              reduce using rule 54 (expression -> & ID .)
    OF              shift and go to state 126
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 181

    (43) expression -> expression | expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    |               reduce using rule 43 (expression -> expression | expression .)
    .               reduce using rule 43 (expression -> expression | expression .)
    ^               reduce using rule 43 (expression -> expression | expression .)
    [               reduce using rule 43 (expression -> expression | expression .)
    (               reduce using rule 43 (expression -> expression | expression .)
    $               reduce using rule 43 (expression -> expression | expression .)
    ID              reduce using rule 43 (expression -> expression | expression .)
    ?               reduce using rule 43 (expression -> expression | expression .)
    HTMLSTART       reduce using rule 43 (expression -> expression | expression .)
    {               reduce using rule 43 (expression -> expression | expression .)
    STRING          reduce using rule 43 (expression -> expression | expression .)
    CHAR            reduce using rule 43 (expression -> expression | expression .)
    FALSE           reduce using rule 43 (expression -> expression | expression .)
    TRUE            reduce using rule 43 (expression -> expression | expression .)
    FLOAT           reduce using rule 43 (expression -> expression | expression .)
    INT             reduce using rule 43 (expression -> expression | expression .)
    NULL            reduce using rule 43 (expression -> expression | expression .)
    #               reduce using rule 43 (expression -> expression | expression .)
    NEW             reduce using rule 43 (expression -> expression | expression .)
    PYTHON_CODE_EXEC reduce using rule 43 (expression -> expression | expression .)
    PYTHON_CODE     reduce using rule 43 (expression -> expression | expression .)
    PHPSTART        reduce using rule 43 (expression -> expression | expression .)
    LIMPORT         reduce using rule 43 (expression -> expression | expression .)
    IMPORT          reduce using rule 43 (expression -> expression | expression .)
    RETURN          reduce using rule 43 (expression -> expression | expression .)
    DEL             reduce using rule 43 (expression -> expression | expression .)
    FOREACH         reduce using rule 43 (expression -> expression | expression .)
    FOR             reduce using rule 43 (expression -> expression | expression .)
    DEBUG           reduce using rule 43 (expression -> expression | expression .)
    SKIP            reduce using rule 43 (expression -> expression | expression .)
    BREAK           reduce using rule 43 (expression -> expression | expression .)
    LET             reduce using rule 43 (expression -> expression | expression .)
    WHILE           reduce using rule 43 (expression -> expression | expression .)
    NAMESPACE       reduce using rule 43 (expression -> expression | expression .)
    CLASS           reduce using rule 43 (expression -> expression | expression .)
    FUNC            reduce using rule 43 (expression -> expression | expression .)
    INIT            reduce using rule 43 (expression -> expression | expression .)
    IF              reduce using rule 43 (expression -> expression | expression .)
    $end            reduce using rule 43 (expression -> expression | expression .)
    ;               reduce using rule 43 (expression -> expression | expression .)
    ,               reduce using rule 43 (expression -> expression | expression .)
    PHPEND          reduce using rule 43 (expression -> expression | expression .)
    }               reduce using rule 43 (expression -> expression | expression .)
    )               reduce using rule 43 (expression -> expression | expression .)
    HTMLEND         reduce using rule 43 (expression -> expression | expression .)
    SARROW          reduce using rule 43 (expression -> expression | expression .)
    ]               reduce using rule 43 (expression -> expression | expression .)
    EQ_DIV          reduce using rule 43 (expression -> expression | expression .)
    EQ_MOD          reduce using rule 43 (expression -> expression | expression .)
    EQ_MUL          reduce using rule 43 (expression -> expression | expression .)
    EQ_SUB          reduce using rule 43 (expression -> expression | expression .)
    EQ_ADD          reduce using rule 43 (expression -> expression | expression .)
    =               reduce using rule 43 (expression -> expression | expression .)
    AS              reduce using rule 43 (expression -> expression | expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 182

    (44) expression -> expression EQ_GREATER expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    .               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ^               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    [               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    (               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    $               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ID              reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ?               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    HTMLSTART       reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    {               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    STRING          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    CHAR            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    FALSE           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    TRUE            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    FLOAT           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    INT             reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    NULL            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    #               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    NEW             reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE_EXEC reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE     reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    PHPSTART        reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    LIMPORT         reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    IMPORT          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    RETURN          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    DEL             reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    FOREACH         reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    FOR             reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    DEBUG           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    SKIP            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    BREAK           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    LET             reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    WHILE           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    NAMESPACE       reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    CLASS           reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    FUNC            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    INIT            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    IF              reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    $end            reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    PHPEND          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    HTMLEND         reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    SARROW          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_DIV          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_MOD          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_MUL          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_SUB          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    EQ_ADD          reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    =               reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    AS              reduce using rule 44 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 183

    (45) expression -> expression EQ_LESS expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 45 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    .               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ^               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    [               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    (               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    $               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ID              reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ?               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    HTMLSTART       reduce using rule 45 (expression -> expression EQ_LESS expression .)
    {               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    STRING          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    CHAR            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    FALSE           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    TRUE            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    FLOAT           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    INT             reduce using rule 45 (expression -> expression EQ_LESS expression .)
    NULL            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    #               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    NEW             reduce using rule 45 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE_EXEC reduce using rule 45 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE     reduce using rule 45 (expression -> expression EQ_LESS expression .)
    PHPSTART        reduce using rule 45 (expression -> expression EQ_LESS expression .)
    LIMPORT         reduce using rule 45 (expression -> expression EQ_LESS expression .)
    IMPORT          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    RETURN          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    DEL             reduce using rule 45 (expression -> expression EQ_LESS expression .)
    FOREACH         reduce using rule 45 (expression -> expression EQ_LESS expression .)
    FOR             reduce using rule 45 (expression -> expression EQ_LESS expression .)
    DEBUG           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    SKIP            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    BREAK           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    LET             reduce using rule 45 (expression -> expression EQ_LESS expression .)
    WHILE           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    NAMESPACE       reduce using rule 45 (expression -> expression EQ_LESS expression .)
    CLASS           reduce using rule 45 (expression -> expression EQ_LESS expression .)
    FUNC            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    INIT            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    IF              reduce using rule 45 (expression -> expression EQ_LESS expression .)
    $end            reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    PHPEND          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    HTMLEND         reduce using rule 45 (expression -> expression EQ_LESS expression .)
    SARROW          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_DIV          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_MOD          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_MUL          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_SUB          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    EQ_ADD          reduce using rule 45 (expression -> expression EQ_LESS expression .)
    =               reduce using rule 45 (expression -> expression EQ_LESS expression .)
    AS              reduce using rule 45 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 184

    (46) expression -> expression NOT_EQEQ expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    &               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    .               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ^               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    [               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    (               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    $               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ID              reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ?               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    HTMLSTART       reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    {               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    STRING          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    CHAR            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    FALSE           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    TRUE            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    FLOAT           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    INT             reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    NULL            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    #               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    NEW             reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE     reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    PHPSTART        reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    LIMPORT         reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    IMPORT          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    RETURN          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    DEL             reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    FOREACH         reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    FOR             reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    DEBUG           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    SKIP            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    BREAK           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    LET             reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    WHILE           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    NAMESPACE       reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    CLASS           reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    FUNC            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    INIT            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    IF              reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    $end            reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    PHPEND          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    HTMLEND         reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    SARROW          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQ_DIV          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQ_MOD          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQ_MUL          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQ_SUB          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    EQ_ADD          reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    =               reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    AS              reduce using rule 46 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 185

    (47) expression -> expression EQEQ expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    &               reduce using rule 47 (expression -> expression EQEQ expression .)
    |               reduce using rule 47 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 47 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 47 (expression -> expression EQEQ expression .)
    .               reduce using rule 47 (expression -> expression EQEQ expression .)
    ^               reduce using rule 47 (expression -> expression EQEQ expression .)
    [               reduce using rule 47 (expression -> expression EQEQ expression .)
    (               reduce using rule 47 (expression -> expression EQEQ expression .)
    $               reduce using rule 47 (expression -> expression EQEQ expression .)
    ID              reduce using rule 47 (expression -> expression EQEQ expression .)
    ?               reduce using rule 47 (expression -> expression EQEQ expression .)
    HTMLSTART       reduce using rule 47 (expression -> expression EQEQ expression .)
    {               reduce using rule 47 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 47 (expression -> expression EQEQ expression .)
    CHAR            reduce using rule 47 (expression -> expression EQEQ expression .)
    FALSE           reduce using rule 47 (expression -> expression EQEQ expression .)
    TRUE            reduce using rule 47 (expression -> expression EQEQ expression .)
    FLOAT           reduce using rule 47 (expression -> expression EQEQ expression .)
    INT             reduce using rule 47 (expression -> expression EQEQ expression .)
    NULL            reduce using rule 47 (expression -> expression EQEQ expression .)
    #               reduce using rule 47 (expression -> expression EQEQ expression .)
    NEW             reduce using rule 47 (expression -> expression EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 47 (expression -> expression EQEQ expression .)
    PYTHON_CODE     reduce using rule 47 (expression -> expression EQEQ expression .)
    PHPSTART        reduce using rule 47 (expression -> expression EQEQ expression .)
    LIMPORT         reduce using rule 47 (expression -> expression EQEQ expression .)
    IMPORT          reduce using rule 47 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 47 (expression -> expression EQEQ expression .)
    DEL             reduce using rule 47 (expression -> expression EQEQ expression .)
    FOREACH         reduce using rule 47 (expression -> expression EQEQ expression .)
    FOR             reduce using rule 47 (expression -> expression EQEQ expression .)
    DEBUG           reduce using rule 47 (expression -> expression EQEQ expression .)
    SKIP            reduce using rule 47 (expression -> expression EQEQ expression .)
    BREAK           reduce using rule 47 (expression -> expression EQEQ expression .)
    LET             reduce using rule 47 (expression -> expression EQEQ expression .)
    WHILE           reduce using rule 47 (expression -> expression EQEQ expression .)
    NAMESPACE       reduce using rule 47 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 47 (expression -> expression EQEQ expression .)
    FUNC            reduce using rule 47 (expression -> expression EQEQ expression .)
    INIT            reduce using rule 47 (expression -> expression EQEQ expression .)
    IF              reduce using rule 47 (expression -> expression EQEQ expression .)
    $end            reduce using rule 47 (expression -> expression EQEQ expression .)
    ;               reduce using rule 47 (expression -> expression EQEQ expression .)
    ,               reduce using rule 47 (expression -> expression EQEQ expression .)
    PHPEND          reduce using rule 47 (expression -> expression EQEQ expression .)
    }               reduce using rule 47 (expression -> expression EQEQ expression .)
    )               reduce using rule 47 (expression -> expression EQEQ expression .)
    HTMLEND         reduce using rule 47 (expression -> expression EQEQ expression .)
    SARROW          reduce using rule 47 (expression -> expression EQEQ expression .)
    ]               reduce using rule 47 (expression -> expression EQEQ expression .)
    EQ_DIV          reduce using rule 47 (expression -> expression EQEQ expression .)
    EQ_MOD          reduce using rule 47 (expression -> expression EQEQ expression .)
    EQ_MUL          reduce using rule 47 (expression -> expression EQEQ expression .)
    EQ_SUB          reduce using rule 47 (expression -> expression EQEQ expression .)
    EQ_ADD          reduce using rule 47 (expression -> expression EQEQ expression .)
    =               reduce using rule 47 (expression -> expression EQEQ expression .)
    AS              reduce using rule 47 (expression -> expression EQEQ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 186

    (48) expression -> expression % expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 48 (expression -> expression % expression .)
    <               reduce using rule 48 (expression -> expression % expression .)
    &               reduce using rule 48 (expression -> expression % expression .)
    |               reduce using rule 48 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 48 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 48 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 48 (expression -> expression % expression .)
    EQEQ            reduce using rule 48 (expression -> expression % expression .)
    %               reduce using rule 48 (expression -> expression % expression .)
    *               reduce using rule 48 (expression -> expression % expression .)
    /               reduce using rule 48 (expression -> expression % expression .)
    -               reduce using rule 48 (expression -> expression % expression .)
    +               reduce using rule 48 (expression -> expression % expression .)
    .               reduce using rule 48 (expression -> expression % expression .)
    ^               reduce using rule 48 (expression -> expression % expression .)
    [               reduce using rule 48 (expression -> expression % expression .)
    (               reduce using rule 48 (expression -> expression % expression .)
    $               reduce using rule 48 (expression -> expression % expression .)
    ID              reduce using rule 48 (expression -> expression % expression .)
    ?               reduce using rule 48 (expression -> expression % expression .)
    HTMLSTART       reduce using rule 48 (expression -> expression % expression .)
    {               reduce using rule 48 (expression -> expression % expression .)
    STRING          reduce using rule 48 (expression -> expression % expression .)
    CHAR            reduce using rule 48 (expression -> expression % expression .)
    FALSE           reduce using rule 48 (expression -> expression % expression .)
    TRUE            reduce using rule 48 (expression -> expression % expression .)
    FLOAT           reduce using rule 48 (expression -> expression % expression .)
    INT             reduce using rule 48 (expression -> expression % expression .)
    NULL            reduce using rule 48 (expression -> expression % expression .)
    #               reduce using rule 48 (expression -> expression % expression .)
    NEW             reduce using rule 48 (expression -> expression % expression .)
    PYTHON_CODE_EXEC reduce using rule 48 (expression -> expression % expression .)
    PYTHON_CODE     reduce using rule 48 (expression -> expression % expression .)
    PHPSTART        reduce using rule 48 (expression -> expression % expression .)
    LIMPORT         reduce using rule 48 (expression -> expression % expression .)
    IMPORT          reduce using rule 48 (expression -> expression % expression .)
    RETURN          reduce using rule 48 (expression -> expression % expression .)
    DEL             reduce using rule 48 (expression -> expression % expression .)
    FOREACH         reduce using rule 48 (expression -> expression % expression .)
    FOR             reduce using rule 48 (expression -> expression % expression .)
    DEBUG           reduce using rule 48 (expression -> expression % expression .)
    SKIP            reduce using rule 48 (expression -> expression % expression .)
    BREAK           reduce using rule 48 (expression -> expression % expression .)
    LET             reduce using rule 48 (expression -> expression % expression .)
    WHILE           reduce using rule 48 (expression -> expression % expression .)
    NAMESPACE       reduce using rule 48 (expression -> expression % expression .)
    CLASS           reduce using rule 48 (expression -> expression % expression .)
    FUNC            reduce using rule 48 (expression -> expression % expression .)
    INIT            reduce using rule 48 (expression -> expression % expression .)
    IF              reduce using rule 48 (expression -> expression % expression .)
    $end            reduce using rule 48 (expression -> expression % expression .)
    ;               reduce using rule 48 (expression -> expression % expression .)
    ,               reduce using rule 48 (expression -> expression % expression .)
    PHPEND          reduce using rule 48 (expression -> expression % expression .)
    }               reduce using rule 48 (expression -> expression % expression .)
    )               reduce using rule 48 (expression -> expression % expression .)
    HTMLEND         reduce using rule 48 (expression -> expression % expression .)
    SARROW          reduce using rule 48 (expression -> expression % expression .)
    ]               reduce using rule 48 (expression -> expression % expression .)
    EQ_DIV          reduce using rule 48 (expression -> expression % expression .)
    EQ_MOD          reduce using rule 48 (expression -> expression % expression .)
    EQ_MUL          reduce using rule 48 (expression -> expression % expression .)
    EQ_SUB          reduce using rule 48 (expression -> expression % expression .)
    EQ_ADD          reduce using rule 48 (expression -> expression % expression .)
    =               reduce using rule 48 (expression -> expression % expression .)
    AS              reduce using rule 48 (expression -> expression % expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 187

    (49) expression -> expression * expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 49 (expression -> expression * expression .)
    <               reduce using rule 49 (expression -> expression * expression .)
    &               reduce using rule 49 (expression -> expression * expression .)
    |               reduce using rule 49 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 49 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 49 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 49 (expression -> expression * expression .)
    EQEQ            reduce using rule 49 (expression -> expression * expression .)
    %               reduce using rule 49 (expression -> expression * expression .)
    *               reduce using rule 49 (expression -> expression * expression .)
    /               reduce using rule 49 (expression -> expression * expression .)
    -               reduce using rule 49 (expression -> expression * expression .)
    +               reduce using rule 49 (expression -> expression * expression .)
    .               reduce using rule 49 (expression -> expression * expression .)
    ^               reduce using rule 49 (expression -> expression * expression .)
    [               reduce using rule 49 (expression -> expression * expression .)
    (               reduce using rule 49 (expression -> expression * expression .)
    $               reduce using rule 49 (expression -> expression * expression .)
    ID              reduce using rule 49 (expression -> expression * expression .)
    ?               reduce using rule 49 (expression -> expression * expression .)
    HTMLSTART       reduce using rule 49 (expression -> expression * expression .)
    {               reduce using rule 49 (expression -> expression * expression .)
    STRING          reduce using rule 49 (expression -> expression * expression .)
    CHAR            reduce using rule 49 (expression -> expression * expression .)
    FALSE           reduce using rule 49 (expression -> expression * expression .)
    TRUE            reduce using rule 49 (expression -> expression * expression .)
    FLOAT           reduce using rule 49 (expression -> expression * expression .)
    INT             reduce using rule 49 (expression -> expression * expression .)
    NULL            reduce using rule 49 (expression -> expression * expression .)
    #               reduce using rule 49 (expression -> expression * expression .)
    NEW             reduce using rule 49 (expression -> expression * expression .)
    PYTHON_CODE_EXEC reduce using rule 49 (expression -> expression * expression .)
    PYTHON_CODE     reduce using rule 49 (expression -> expression * expression .)
    PHPSTART        reduce using rule 49 (expression -> expression * expression .)
    LIMPORT         reduce using rule 49 (expression -> expression * expression .)
    IMPORT          reduce using rule 49 (expression -> expression * expression .)
    RETURN          reduce using rule 49 (expression -> expression * expression .)
    DEL             reduce using rule 49 (expression -> expression * expression .)
    FOREACH         reduce using rule 49 (expression -> expression * expression .)
    FOR             reduce using rule 49 (expression -> expression * expression .)
    DEBUG           reduce using rule 49 (expression -> expression * expression .)
    SKIP            reduce using rule 49 (expression -> expression * expression .)
    BREAK           reduce using rule 49 (expression -> expression * expression .)
    LET             reduce using rule 49 (expression -> expression * expression .)
    WHILE           reduce using rule 49 (expression -> expression * expression .)
    NAMESPACE       reduce using rule 49 (expression -> expression * expression .)
    CLASS           reduce using rule 49 (expression -> expression * expression .)
    FUNC            reduce using rule 49 (expression -> expression * expression .)
    INIT            reduce using rule 49 (expression -> expression * expression .)
    IF              reduce using rule 49 (expression -> expression * expression .)
    $end            reduce using rule 49 (expression -> expression * expression .)
    ;               reduce using rule 49 (expression -> expression * expression .)
    ,               reduce using rule 49 (expression -> expression * expression .)
    PHPEND          reduce using rule 49 (expression -> expression * expression .)
    }               reduce using rule 49 (expression -> expression * expression .)
    )               reduce using rule 49 (expression -> expression * expression .)
    HTMLEND         reduce using rule 49 (expression -> expression * expression .)
    SARROW          reduce using rule 49 (expression -> expression * expression .)
    ]               reduce using rule 49 (expression -> expression * expression .)
    EQ_DIV          reduce using rule 49 (expression -> expression * expression .)
    EQ_MOD          reduce using rule 49 (expression -> expression * expression .)
    EQ_MUL          reduce using rule 49 (expression -> expression * expression .)
    EQ_SUB          reduce using rule 49 (expression -> expression * expression .)
    EQ_ADD          reduce using rule 49 (expression -> expression * expression .)
    =               reduce using rule 49 (expression -> expression * expression .)
    AS              reduce using rule 49 (expression -> expression * expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 188

    (53) expression -> * ID .
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! reduce/reduce conflict for > resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for < resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for & resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for | resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQEQ resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for % resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for * resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for / resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for - resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for + resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for . resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ^ resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for [ resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ( resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for $ resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ID resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ! resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ? resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for { resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for STRING resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for CHAR resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for INT resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for NULL resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for # resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for NEW resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for PHPSTART resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for LIMPORT resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for IMPORT resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for DEL resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for FOREACH resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for DEBUG resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for SKIP resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for BREAK resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for LET resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for CLASS resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for INIT resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for IF resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for $end resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ; resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for , resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for PHPEND resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for } resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ) resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for HTMLEND resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for SARROW resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for ] resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_MOD resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_MUL resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_SUB resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for EQ_ADD resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for = resolved using rule 53 (expression -> * ID .)
  ! reduce/reduce conflict for AS resolved using rule 53 (expression -> * ID .)
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    ;               reduce using rule 53 (expression -> * ID .)
    >               reduce using rule 53 (expression -> * ID .)
    <               reduce using rule 53 (expression -> * ID .)
    &               reduce using rule 53 (expression -> * ID .)
    |               reduce using rule 53 (expression -> * ID .)
    EQ_GREATER      reduce using rule 53 (expression -> * ID .)
    EQ_LESS         reduce using rule 53 (expression -> * ID .)
    NOT_EQEQ        reduce using rule 53 (expression -> * ID .)
    EQEQ            reduce using rule 53 (expression -> * ID .)
    %               reduce using rule 53 (expression -> * ID .)
    *               reduce using rule 53 (expression -> * ID .)
    -               reduce using rule 53 (expression -> * ID .)
    +               reduce using rule 53 (expression -> * ID .)
    .               reduce using rule 53 (expression -> * ID .)
    ^               reduce using rule 53 (expression -> * ID .)
    [               reduce using rule 53 (expression -> * ID .)
    (               reduce using rule 53 (expression -> * ID .)
    $               reduce using rule 53 (expression -> * ID .)
    ID              reduce using rule 53 (expression -> * ID .)
    !               reduce using rule 53 (expression -> * ID .)
    ?               reduce using rule 53 (expression -> * ID .)
    HTMLSTART       reduce using rule 53 (expression -> * ID .)
    {               reduce using rule 53 (expression -> * ID .)
    STRING          reduce using rule 53 (expression -> * ID .)
    CHAR            reduce using rule 53 (expression -> * ID .)
    FALSE           reduce using rule 53 (expression -> * ID .)
    TRUE            reduce using rule 53 (expression -> * ID .)
    FLOAT           reduce using rule 53 (expression -> * ID .)
    INT             reduce using rule 53 (expression -> * ID .)
    NULL            reduce using rule 53 (expression -> * ID .)
    #               reduce using rule 53 (expression -> * ID .)
    NEW             reduce using rule 53 (expression -> * ID .)
    PYTHON_CODE_EXEC reduce using rule 53 (expression -> * ID .)
    PYTHON_CODE     reduce using rule 53 (expression -> * ID .)
    PHPSTART        reduce using rule 53 (expression -> * ID .)
    LIMPORT         reduce using rule 53 (expression -> * ID .)
    IMPORT          reduce using rule 53 (expression -> * ID .)
    RETURN          reduce using rule 53 (expression -> * ID .)
    DEL             reduce using rule 53 (expression -> * ID .)
    FOREACH         reduce using rule 53 (expression -> * ID .)
    FOR             reduce using rule 53 (expression -> * ID .)
    DEBUG           reduce using rule 53 (expression -> * ID .)
    SKIP            reduce using rule 53 (expression -> * ID .)
    BREAK           reduce using rule 53 (expression -> * ID .)
    LET             reduce using rule 53 (expression -> * ID .)
    WHILE           reduce using rule 53 (expression -> * ID .)
    NAMESPACE       reduce using rule 53 (expression -> * ID .)
    CLASS           reduce using rule 53 (expression -> * ID .)
    FUNC            reduce using rule 53 (expression -> * ID .)
    INIT            reduce using rule 53 (expression -> * ID .)
    IF              reduce using rule 53 (expression -> * ID .)
    $end            reduce using rule 53 (expression -> * ID .)
    ,               reduce using rule 53 (expression -> * ID .)
    PHPEND          reduce using rule 53 (expression -> * ID .)
    }               reduce using rule 53 (expression -> * ID .)
    )               reduce using rule 53 (expression -> * ID .)
    HTMLEND         reduce using rule 53 (expression -> * ID .)
    SARROW          reduce using rule 53 (expression -> * ID .)
    ]               reduce using rule 53 (expression -> * ID .)
    EQ_DIV          reduce using rule 53 (expression -> * ID .)
    EQ_MOD          reduce using rule 53 (expression -> * ID .)
    EQ_MUL          reduce using rule 53 (expression -> * ID .)
    EQ_SUB          reduce using rule 53 (expression -> * ID .)
    EQ_ADD          reduce using rule 53 (expression -> * ID .)
    =               reduce using rule 53 (expression -> * ID .)
    AS              reduce using rule 53 (expression -> * ID .)
    OF              shift and go to state 126
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 189

    (50) expression -> expression / expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    >               reduce using rule 50 (expression -> expression / expression .)
    <               reduce using rule 50 (expression -> expression / expression .)
    &               reduce using rule 50 (expression -> expression / expression .)
    |               reduce using rule 50 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 50 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 50 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 50 (expression -> expression / expression .)
    EQEQ            reduce using rule 50 (expression -> expression / expression .)
    %               reduce using rule 50 (expression -> expression / expression .)
    *               reduce using rule 50 (expression -> expression / expression .)
    /               reduce using rule 50 (expression -> expression / expression .)
    -               reduce using rule 50 (expression -> expression / expression .)
    +               reduce using rule 50 (expression -> expression / expression .)
    .               reduce using rule 50 (expression -> expression / expression .)
    ^               reduce using rule 50 (expression -> expression / expression .)
    [               reduce using rule 50 (expression -> expression / expression .)
    (               reduce using rule 50 (expression -> expression / expression .)
    $               reduce using rule 50 (expression -> expression / expression .)
    ID              reduce using rule 50 (expression -> expression / expression .)
    ?               reduce using rule 50 (expression -> expression / expression .)
    HTMLSTART       reduce using rule 50 (expression -> expression / expression .)
    {               reduce using rule 50 (expression -> expression / expression .)
    STRING          reduce using rule 50 (expression -> expression / expression .)
    CHAR            reduce using rule 50 (expression -> expression / expression .)
    FALSE           reduce using rule 50 (expression -> expression / expression .)
    TRUE            reduce using rule 50 (expression -> expression / expression .)
    FLOAT           reduce using rule 50 (expression -> expression / expression .)
    INT             reduce using rule 50 (expression -> expression / expression .)
    NULL            reduce using rule 50 (expression -> expression / expression .)
    #               reduce using rule 50 (expression -> expression / expression .)
    NEW             reduce using rule 50 (expression -> expression / expression .)
    PYTHON_CODE_EXEC reduce using rule 50 (expression -> expression / expression .)
    PYTHON_CODE     reduce using rule 50 (expression -> expression / expression .)
    PHPSTART        reduce using rule 50 (expression -> expression / expression .)
    LIMPORT         reduce using rule 50 (expression -> expression / expression .)
    IMPORT          reduce using rule 50 (expression -> expression / expression .)
    RETURN          reduce using rule 50 (expression -> expression / expression .)
    DEL             reduce using rule 50 (expression -> expression / expression .)
    FOREACH         reduce using rule 50 (expression -> expression / expression .)
    FOR             reduce using rule 50 (expression -> expression / expression .)
    DEBUG           reduce using rule 50 (expression -> expression / expression .)
    SKIP            reduce using rule 50 (expression -> expression / expression .)
    BREAK           reduce using rule 50 (expression -> expression / expression .)
    LET             reduce using rule 50 (expression -> expression / expression .)
    WHILE           reduce using rule 50 (expression -> expression / expression .)
    NAMESPACE       reduce using rule 50 (expression -> expression / expression .)
    CLASS           reduce using rule 50 (expression -> expression / expression .)
    FUNC            reduce using rule 50 (expression -> expression / expression .)
    INIT            reduce using rule 50 (expression -> expression / expression .)
    IF              reduce using rule 50 (expression -> expression / expression .)
    $end            reduce using rule 50 (expression -> expression / expression .)
    ;               reduce using rule 50 (expression -> expression / expression .)
    ,               reduce using rule 50 (expression -> expression / expression .)
    PHPEND          reduce using rule 50 (expression -> expression / expression .)
    }               reduce using rule 50 (expression -> expression / expression .)
    )               reduce using rule 50 (expression -> expression / expression .)
    HTMLEND         reduce using rule 50 (expression -> expression / expression .)
    SARROW          reduce using rule 50 (expression -> expression / expression .)
    ]               reduce using rule 50 (expression -> expression / expression .)
    EQ_DIV          reduce using rule 50 (expression -> expression / expression .)
    EQ_MOD          reduce using rule 50 (expression -> expression / expression .)
    EQ_MUL          reduce using rule 50 (expression -> expression / expression .)
    EQ_SUB          reduce using rule 50 (expression -> expression / expression .)
    EQ_ADD          reduce using rule 50 (expression -> expression / expression .)
    =               reduce using rule 50 (expression -> expression / expression .)
    AS              reduce using rule 50 (expression -> expression / expression .)
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 190

    (51) expression -> expression - expression .
    (41) expression -> - expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! reduce/reduce conflict for ; resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for > resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for < resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for & resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for | resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQEQ resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for % resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for * resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for / resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for - resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for + resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for . resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ^ resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for [ resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ( resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for $ resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ID resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ! resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ? resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for { resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for STRING resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for INT resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for NULL resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for # resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for NEW resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for PHPSTART resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for LIMPORT resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for DEL resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for FOREACH resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for FOR resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for DEBUG resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for SKIP resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for LET resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for FUNC resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for INIT resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for IF resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for $end resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for , resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for PHPEND resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for } resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ) resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for HTMLEND resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for SARROW resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for ] resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_MOD resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_MUL resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_SUB resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for EQ_ADD resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for = resolved using rule 51 (expression -> expression - expression .)
  ! reduce/reduce conflict for AS resolved using rule 51 (expression -> expression - expression .)
    >               reduce using rule 51 (expression -> expression - expression .)
    <               reduce using rule 51 (expression -> expression - expression .)
    &               reduce using rule 51 (expression -> expression - expression .)
    |               reduce using rule 51 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 51 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 51 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 51 (expression -> expression - expression .)
    EQEQ            reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    +               reduce using rule 51 (expression -> expression - expression .)
    .               reduce using rule 51 (expression -> expression - expression .)
    ^               reduce using rule 51 (expression -> expression - expression .)
    [               reduce using rule 51 (expression -> expression - expression .)
    (               reduce using rule 51 (expression -> expression - expression .)
    $               reduce using rule 51 (expression -> expression - expression .)
    ID              reduce using rule 51 (expression -> expression - expression .)
    ?               reduce using rule 51 (expression -> expression - expression .)
    HTMLSTART       reduce using rule 51 (expression -> expression - expression .)
    {               reduce using rule 51 (expression -> expression - expression .)
    STRING          reduce using rule 51 (expression -> expression - expression .)
    CHAR            reduce using rule 51 (expression -> expression - expression .)
    FALSE           reduce using rule 51 (expression -> expression - expression .)
    TRUE            reduce using rule 51 (expression -> expression - expression .)
    FLOAT           reduce using rule 51 (expression -> expression - expression .)
    INT             reduce using rule 51 (expression -> expression - expression .)
    NULL            reduce using rule 51 (expression -> expression - expression .)
    #               reduce using rule 51 (expression -> expression - expression .)
    NEW             reduce using rule 51 (expression -> expression - expression .)
    PYTHON_CODE_EXEC reduce using rule 51 (expression -> expression - expression .)
    PYTHON_CODE     reduce using rule 51 (expression -> expression - expression .)
    PHPSTART        reduce using rule 51 (expression -> expression - expression .)
    LIMPORT         reduce using rule 51 (expression -> expression - expression .)
    IMPORT          reduce using rule 51 (expression -> expression - expression .)
    RETURN          reduce using rule 51 (expression -> expression - expression .)
    DEL             reduce using rule 51 (expression -> expression - expression .)
    FOREACH         reduce using rule 51 (expression -> expression - expression .)
    FOR             reduce using rule 51 (expression -> expression - expression .)
    DEBUG           reduce using rule 51 (expression -> expression - expression .)
    SKIP            reduce using rule 51 (expression -> expression - expression .)
    BREAK           reduce using rule 51 (expression -> expression - expression .)
    LET             reduce using rule 51 (expression -> expression - expression .)
    WHILE           reduce using rule 51 (expression -> expression - expression .)
    NAMESPACE       reduce using rule 51 (expression -> expression - expression .)
    CLASS           reduce using rule 51 (expression -> expression - expression .)
    FUNC            reduce using rule 51 (expression -> expression - expression .)
    INIT            reduce using rule 51 (expression -> expression - expression .)
    IF              reduce using rule 51 (expression -> expression - expression .)
    $end            reduce using rule 51 (expression -> expression - expression .)
    ;               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    PHPEND          reduce using rule 51 (expression -> expression - expression .)
    }               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    HTMLEND         reduce using rule 51 (expression -> expression - expression .)
    SARROW          reduce using rule 51 (expression -> expression - expression .)
    ]               reduce using rule 51 (expression -> expression - expression .)
    EQ_DIV          reduce using rule 51 (expression -> expression - expression .)
    EQ_MOD          reduce using rule 51 (expression -> expression - expression .)
    EQ_MUL          reduce using rule 51 (expression -> expression - expression .)
    EQ_SUB          reduce using rule 51 (expression -> expression - expression .)
    EQ_ADD          reduce using rule 51 (expression -> expression - expression .)
    =               reduce using rule 51 (expression -> expression - expression .)
    AS              reduce using rule 51 (expression -> expression - expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 191

    (52) expression -> expression + expression .
    (40) expression -> + expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! reduce/reduce conflict for ; resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for > resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for < resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for & resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for | resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQEQ resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for % resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for * resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for / resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for - resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for + resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for . resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ^ resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for [ resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ( resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for $ resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ID resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ! resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ? resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for { resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for STRING resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for CHAR resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for INT resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for NULL resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for # resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for NEW resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for PHPSTART resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for LIMPORT resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for DEL resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for FOREACH resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for DEBUG resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for SKIP resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for LET resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for FUNC resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for INIT resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for IF resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for $end resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for , resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for PHPEND resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for } resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ) resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for HTMLEND resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for SARROW resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for ] resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_MOD resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_MUL resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_SUB resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for EQ_ADD resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for = resolved using rule 52 (expression -> expression + expression .)
  ! reduce/reduce conflict for AS resolved using rule 52 (expression -> expression + expression .)
    >               reduce using rule 52 (expression -> expression + expression .)
    <               reduce using rule 52 (expression -> expression + expression .)
    &               reduce using rule 52 (expression -> expression + expression .)
    |               reduce using rule 52 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 52 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 52 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 52 (expression -> expression + expression .)
    EQEQ            reduce using rule 52 (expression -> expression + expression .)
    -               reduce using rule 52 (expression -> expression + expression .)
    +               reduce using rule 52 (expression -> expression + expression .)
    .               reduce using rule 52 (expression -> expression + expression .)
    ^               reduce using rule 52 (expression -> expression + expression .)
    [               reduce using rule 52 (expression -> expression + expression .)
    (               reduce using rule 52 (expression -> expression + expression .)
    $               reduce using rule 52 (expression -> expression + expression .)
    ID              reduce using rule 52 (expression -> expression + expression .)
    ?               reduce using rule 52 (expression -> expression + expression .)
    HTMLSTART       reduce using rule 52 (expression -> expression + expression .)
    {               reduce using rule 52 (expression -> expression + expression .)
    STRING          reduce using rule 52 (expression -> expression + expression .)
    CHAR            reduce using rule 52 (expression -> expression + expression .)
    FALSE           reduce using rule 52 (expression -> expression + expression .)
    TRUE            reduce using rule 52 (expression -> expression + expression .)
    FLOAT           reduce using rule 52 (expression -> expression + expression .)
    INT             reduce using rule 52 (expression -> expression + expression .)
    NULL            reduce using rule 52 (expression -> expression + expression .)
    #               reduce using rule 52 (expression -> expression + expression .)
    NEW             reduce using rule 52 (expression -> expression + expression .)
    PYTHON_CODE_EXEC reduce using rule 52 (expression -> expression + expression .)
    PYTHON_CODE     reduce using rule 52 (expression -> expression + expression .)
    PHPSTART        reduce using rule 52 (expression -> expression + expression .)
    LIMPORT         reduce using rule 52 (expression -> expression + expression .)
    IMPORT          reduce using rule 52 (expression -> expression + expression .)
    RETURN          reduce using rule 52 (expression -> expression + expression .)
    DEL             reduce using rule 52 (expression -> expression + expression .)
    FOREACH         reduce using rule 52 (expression -> expression + expression .)
    FOR             reduce using rule 52 (expression -> expression + expression .)
    DEBUG           reduce using rule 52 (expression -> expression + expression .)
    SKIP            reduce using rule 52 (expression -> expression + expression .)
    BREAK           reduce using rule 52 (expression -> expression + expression .)
    LET             reduce using rule 52 (expression -> expression + expression .)
    WHILE           reduce using rule 52 (expression -> expression + expression .)
    NAMESPACE       reduce using rule 52 (expression -> expression + expression .)
    CLASS           reduce using rule 52 (expression -> expression + expression .)
    FUNC            reduce using rule 52 (expression -> expression + expression .)
    INIT            reduce using rule 52 (expression -> expression + expression .)
    IF              reduce using rule 52 (expression -> expression + expression .)
    $end            reduce using rule 52 (expression -> expression + expression .)
    ;               reduce using rule 52 (expression -> expression + expression .)
    ,               reduce using rule 52 (expression -> expression + expression .)
    PHPEND          reduce using rule 52 (expression -> expression + expression .)
    }               reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    HTMLEND         reduce using rule 52 (expression -> expression + expression .)
    SARROW          reduce using rule 52 (expression -> expression + expression .)
    ]               reduce using rule 52 (expression -> expression + expression .)
    EQ_DIV          reduce using rule 52 (expression -> expression + expression .)
    EQ_MOD          reduce using rule 52 (expression -> expression + expression .)
    EQ_MUL          reduce using rule 52 (expression -> expression + expression .)
    EQ_SUB          reduce using rule 52 (expression -> expression + expression .)
    EQ_ADD          reduce using rule 52 (expression -> expression + expression .)
    =               reduce using rule 52 (expression -> expression + expression .)
    AS              reduce using rule 52 (expression -> expression + expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 192

    (57) expression -> expression . expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    PHPSTART        reduce using rule 57 (expression -> expression . expression .)
    LIMPORT         reduce using rule 57 (expression -> expression . expression .)
    IMPORT          reduce using rule 57 (expression -> expression . expression .)
    RETURN          reduce using rule 57 (expression -> expression . expression .)
    DEL             reduce using rule 57 (expression -> expression . expression .)
    FOREACH         reduce using rule 57 (expression -> expression . expression .)
    FOR             reduce using rule 57 (expression -> expression . expression .)
    DEBUG           reduce using rule 57 (expression -> expression . expression .)
    SKIP            reduce using rule 57 (expression -> expression . expression .)
    BREAK           reduce using rule 57 (expression -> expression . expression .)
    LET             reduce using rule 57 (expression -> expression . expression .)
    WHILE           reduce using rule 57 (expression -> expression . expression .)
    NAMESPACE       reduce using rule 57 (expression -> expression . expression .)
    CLASS           reduce using rule 57 (expression -> expression . expression .)
    FUNC            reduce using rule 57 (expression -> expression . expression .)
    INIT            reduce using rule 57 (expression -> expression . expression .)
    IF              reduce using rule 57 (expression -> expression . expression .)
    $end            reduce using rule 57 (expression -> expression . expression .)
    ;               reduce using rule 57 (expression -> expression . expression .)
    ,               reduce using rule 57 (expression -> expression . expression .)
    PHPEND          reduce using rule 57 (expression -> expression . expression .)
    }               reduce using rule 57 (expression -> expression . expression .)
    )               reduce using rule 57 (expression -> expression . expression .)
    HTMLEND         reduce using rule 57 (expression -> expression . expression .)
    SARROW          reduce using rule 57 (expression -> expression . expression .)
    ]               reduce using rule 57 (expression -> expression . expression .)
    EQ_DIV          reduce using rule 57 (expression -> expression . expression .)
    EQ_MOD          reduce using rule 57 (expression -> expression . expression .)
    EQ_MUL          reduce using rule 57 (expression -> expression . expression .)
    EQ_SUB          reduce using rule 57 (expression -> expression . expression .)
    EQ_ADD          reduce using rule 57 (expression -> expression . expression .)
    =               reduce using rule 57 (expression -> expression . expression .)
    AS              reduce using rule 57 (expression -> expression . expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 193

    (165) class_attribute -> expression COLON_COLON ID .
    >               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    <               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    &               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    |               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_GREATER      reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_LESS         reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    NOT_EQEQ        reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQEQ            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    %               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    *               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    /               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    -               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    +               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    .               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    COLON_COLON     reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ^               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    [               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    (               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    $               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ID              reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    !               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ?               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    HTMLSTART       reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    {               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    STRING          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    CHAR            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    FALSE           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    TRUE            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    FLOAT           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    INT             reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    NULL            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    #               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    NEW             reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE_EXEC reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE     reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    PHPSTART        reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    LIMPORT         reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    IMPORT          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    RETURN          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    DEL             reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    FOREACH         reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    FOR             reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    DEBUG           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    SKIP            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    BREAK           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    LET             reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    WHILE           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    NAMESPACE       reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    CLASS           reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    FUNC            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    INIT            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    IF              reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    $end            reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ;               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ,               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    PHPEND          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    }               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    )               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    HTMLEND         reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    SARROW          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    ]               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_DIV          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_MOD          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_MUL          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_SUB          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    EQ_ADD          reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    =               reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)
    AS              reduce using rule 165 (class_attribute -> expression COLON_COLON ID .)


state 194

    (112) kwargs -> ID = . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 267
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 195

    (146) get_index -> expression ^ expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    EQ_DIV          reduce using rule 146 (get_index -> expression ^ expression .)
    EQ_MOD          reduce using rule 146 (get_index -> expression ^ expression .)
    EQ_MUL          reduce using rule 146 (get_index -> expression ^ expression .)
    EQ_SUB          reduce using rule 146 (get_index -> expression ^ expression .)
    EQ_ADD          reduce using rule 146 (get_index -> expression ^ expression .)
    PHPSTART        reduce using rule 146 (get_index -> expression ^ expression .)
    LIMPORT         reduce using rule 146 (get_index -> expression ^ expression .)
    IMPORT          reduce using rule 146 (get_index -> expression ^ expression .)
    RETURN          reduce using rule 146 (get_index -> expression ^ expression .)
    DEL             reduce using rule 146 (get_index -> expression ^ expression .)
    FOREACH         reduce using rule 146 (get_index -> expression ^ expression .)
    FOR             reduce using rule 146 (get_index -> expression ^ expression .)
    DEBUG           reduce using rule 146 (get_index -> expression ^ expression .)
    SKIP            reduce using rule 146 (get_index -> expression ^ expression .)
    BREAK           reduce using rule 146 (get_index -> expression ^ expression .)
    LET             reduce using rule 146 (get_index -> expression ^ expression .)
    WHILE           reduce using rule 146 (get_index -> expression ^ expression .)
    NAMESPACE       reduce using rule 146 (get_index -> expression ^ expression .)
    CLASS           reduce using rule 146 (get_index -> expression ^ expression .)
    FUNC            reduce using rule 146 (get_index -> expression ^ expression .)
    INIT            reduce using rule 146 (get_index -> expression ^ expression .)
    IF              reduce using rule 146 (get_index -> expression ^ expression .)
    $end            reduce using rule 146 (get_index -> expression ^ expression .)
    ;               reduce using rule 146 (get_index -> expression ^ expression .)
    ,               reduce using rule 146 (get_index -> expression ^ expression .)
    PHPEND          reduce using rule 146 (get_index -> expression ^ expression .)
    }               reduce using rule 146 (get_index -> expression ^ expression .)
    )               reduce using rule 146 (get_index -> expression ^ expression .)
    HTMLEND         reduce using rule 146 (get_index -> expression ^ expression .)
    SARROW          reduce using rule 146 (get_index -> expression ^ expression .)
    ]               reduce using rule 146 (get_index -> expression ^ expression .)
    =               reduce using rule 146 (get_index -> expression ^ expression .)
    AS              reduce using rule 146 (get_index -> expression ^ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 196

    (147) get_index -> expression [ expression . ]
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (144) assoc_array_items -> expression . SARROW expression
    (110) positional_args -> expression .
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 268
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    SARROW          shift and go to state 261
    ,               reduce using rule 110 (positional_args -> expression .)
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 197

    (36) expression -> ( expression . )
    (154) _numpy -> ( expression . , )
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (157) items -> expression . , expression
    (110) positional_args -> expression .
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 209
    ,               shift and go to state 210
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 198

    (72) function_call -> expression ( empty . ) FARROW { program }
    (79) function_call -> expression ( empty . )
    )               shift and go to state 269


state 199

    (86) function_call -> expression ( function_arguments . ) FARROW { program }
    )               shift and go to state 270


state 200

    (55) expression -> ID . OF ID
    (112) kwargs -> ID . = expression
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    OF              shift and go to state 126
    =               shift and go to state 194
    )               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    TARROW          shift and go to state 133
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 201

    (87) function_call -> expression $ ID . = expression ;
    (84) function_call -> $ ID . TARROW ID ( empty )
    (85) function_call -> $ ID . TARROW ID ( function_arguments )
    (55) expression -> ID . OF ID
    (166) id -> ID .
    (73) function_call -> ID . TARROW ID ( function_arguments )
    (74) function_call -> ID . \ ID
    (75) function_call -> ID . / ID
    (76) function_call -> ID . TARROW ID
    (82) function_call -> ID . COLON_COLON ID ( empty )
    (83) function_call -> ID . COLON_COLON ID ( function_arguments )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
    =               shift and go to state 271
    TARROW          shift and go to state 266
    OF              shift and go to state 126
    >               reduce using rule 166 (id -> ID .)
    <               reduce using rule 166 (id -> ID .)
    &               reduce using rule 166 (id -> ID .)
    |               reduce using rule 166 (id -> ID .)
    EQ_GREATER      reduce using rule 166 (id -> ID .)
    EQ_LESS         reduce using rule 166 (id -> ID .)
    NOT_EQEQ        reduce using rule 166 (id -> ID .)
    EQEQ            reduce using rule 166 (id -> ID .)
    %               reduce using rule 166 (id -> ID .)
    *               reduce using rule 166 (id -> ID .)
    -               reduce using rule 166 (id -> ID .)
    +               reduce using rule 166 (id -> ID .)
    .               reduce using rule 166 (id -> ID .)
    ^               reduce using rule 166 (id -> ID .)
    [               reduce using rule 166 (id -> ID .)
    (               reduce using rule 166 (id -> ID .)
    $               reduce using rule 166 (id -> ID .)
    ID              reduce using rule 166 (id -> ID .)
    !               reduce using rule 166 (id -> ID .)
    ?               reduce using rule 166 (id -> ID .)
    HTMLSTART       reduce using rule 166 (id -> ID .)
    {               reduce using rule 166 (id -> ID .)
    STRING          reduce using rule 166 (id -> ID .)
    CHAR            reduce using rule 166 (id -> ID .)
    FALSE           reduce using rule 166 (id -> ID .)
    TRUE            reduce using rule 166 (id -> ID .)
    FLOAT           reduce using rule 166 (id -> ID .)
    INT             reduce using rule 166 (id -> ID .)
    NULL            reduce using rule 166 (id -> ID .)
    #               reduce using rule 166 (id -> ID .)
    NEW             reduce using rule 166 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 166 (id -> ID .)
    PYTHON_CODE     reduce using rule 166 (id -> ID .)
    PHPSTART        reduce using rule 166 (id -> ID .)
    LIMPORT         reduce using rule 166 (id -> ID .)
    IMPORT          reduce using rule 166 (id -> ID .)
    RETURN          reduce using rule 166 (id -> ID .)
    DEL             reduce using rule 166 (id -> ID .)
    FOREACH         reduce using rule 166 (id -> ID .)
    FOR             reduce using rule 166 (id -> ID .)
    DEBUG           reduce using rule 166 (id -> ID .)
    SKIP            reduce using rule 166 (id -> ID .)
    BREAK           reduce using rule 166 (id -> ID .)
    LET             reduce using rule 166 (id -> ID .)
    WHILE           reduce using rule 166 (id -> ID .)
    NAMESPACE       reduce using rule 166 (id -> ID .)
    CLASS           reduce using rule 166 (id -> ID .)
    FUNC            reduce using rule 166 (id -> ID .)
    INIT            reduce using rule 166 (id -> ID .)
    IF              reduce using rule 166 (id -> ID .)
    $end            reduce using rule 166 (id -> ID .)
    ;               reduce using rule 166 (id -> ID .)
    ,               reduce using rule 166 (id -> ID .)
    PHPEND          reduce using rule 166 (id -> ID .)
    }               reduce using rule 166 (id -> ID .)
    )               reduce using rule 166 (id -> ID .)
    HTMLEND         reduce using rule 166 (id -> ID .)
    SARROW          reduce using rule 166 (id -> ID .)
    ]               reduce using rule 166 (id -> ID .)
    EQ_DIV          reduce using rule 166 (id -> ID .)
    EQ_MOD          reduce using rule 166 (id -> ID .)
    EQ_MUL          reduce using rule 166 (id -> ID .)
    EQ_SUB          reduce using rule 166 (id -> ID .)
    EQ_ADD          reduce using rule 166 (id -> ID .)
    AS              reduce using rule 166 (id -> ID .)
    \               shift and go to state 134
    /               shift and go to state 135
    COLON_COLON     shift and go to state 136


state 202

    (113) kwargs -> kwargs , . id = expression
    (166) id -> . ID
    ID              shift and go to state 273

    id                             shift and go to state 272

state 203

    (101) function_arguments -> positional_args , . kwargs
    (111) positional_args -> positional_args , . expression
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    kwargs                         shift and go to state 274
    expression                     shift and go to state 275
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 204

    (118) variable_operation -> get_index EQ_DIV expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 276
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 205

    (120) variable_operation -> get_index EQ_MOD expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 277
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 206

    (122) variable_operation -> get_index EQ_MUL expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 278
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 207

    (124) variable_operation -> get_index EQ_SUB expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 279
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 208

    (126) variable_operation -> get_index EQ_ADD expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 280
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 209

    (36) expression -> ( expression ) .
    >               reduce using rule 36 (expression -> ( expression ) .)
    <               reduce using rule 36 (expression -> ( expression ) .)
    &               reduce using rule 36 (expression -> ( expression ) .)
    |               reduce using rule 36 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 36 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 36 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 36 (expression -> ( expression ) .)
    EQEQ            reduce using rule 36 (expression -> ( expression ) .)
    %               reduce using rule 36 (expression -> ( expression ) .)
    *               reduce using rule 36 (expression -> ( expression ) .)
    /               reduce using rule 36 (expression -> ( expression ) .)
    -               reduce using rule 36 (expression -> ( expression ) .)
    +               reduce using rule 36 (expression -> ( expression ) .)
    .               reduce using rule 36 (expression -> ( expression ) .)
    COLON_COLON     reduce using rule 36 (expression -> ( expression ) .)
    ^               reduce using rule 36 (expression -> ( expression ) .)
    [               reduce using rule 36 (expression -> ( expression ) .)
    (               reduce using rule 36 (expression -> ( expression ) .)
    $               reduce using rule 36 (expression -> ( expression ) .)
    ID              reduce using rule 36 (expression -> ( expression ) .)
    !               reduce using rule 36 (expression -> ( expression ) .)
    ?               reduce using rule 36 (expression -> ( expression ) .)
    HTMLSTART       reduce using rule 36 (expression -> ( expression ) .)
    {               reduce using rule 36 (expression -> ( expression ) .)
    STRING          reduce using rule 36 (expression -> ( expression ) .)
    CHAR            reduce using rule 36 (expression -> ( expression ) .)
    FALSE           reduce using rule 36 (expression -> ( expression ) .)
    TRUE            reduce using rule 36 (expression -> ( expression ) .)
    FLOAT           reduce using rule 36 (expression -> ( expression ) .)
    INT             reduce using rule 36 (expression -> ( expression ) .)
    NULL            reduce using rule 36 (expression -> ( expression ) .)
    #               reduce using rule 36 (expression -> ( expression ) .)
    NEW             reduce using rule 36 (expression -> ( expression ) .)
    PYTHON_CODE_EXEC reduce using rule 36 (expression -> ( expression ) .)
    PYTHON_CODE     reduce using rule 36 (expression -> ( expression ) .)
    PHPSTART        reduce using rule 36 (expression -> ( expression ) .)
    LIMPORT         reduce using rule 36 (expression -> ( expression ) .)
    IMPORT          reduce using rule 36 (expression -> ( expression ) .)
    RETURN          reduce using rule 36 (expression -> ( expression ) .)
    DEL             reduce using rule 36 (expression -> ( expression ) .)
    FOREACH         reduce using rule 36 (expression -> ( expression ) .)
    FOR             reduce using rule 36 (expression -> ( expression ) .)
    DEBUG           reduce using rule 36 (expression -> ( expression ) .)
    SKIP            reduce using rule 36 (expression -> ( expression ) .)
    BREAK           reduce using rule 36 (expression -> ( expression ) .)
    LET             reduce using rule 36 (expression -> ( expression ) .)
    WHILE           reduce using rule 36 (expression -> ( expression ) .)
    NAMESPACE       reduce using rule 36 (expression -> ( expression ) .)
    CLASS           reduce using rule 36 (expression -> ( expression ) .)
    FUNC            reduce using rule 36 (expression -> ( expression ) .)
    INIT            reduce using rule 36 (expression -> ( expression ) .)
    IF              reduce using rule 36 (expression -> ( expression ) .)
    $end            reduce using rule 36 (expression -> ( expression ) .)
    ;               reduce using rule 36 (expression -> ( expression ) .)
    ,               reduce using rule 36 (expression -> ( expression ) .)
    PHPEND          reduce using rule 36 (expression -> ( expression ) .)
    }               reduce using rule 36 (expression -> ( expression ) .)
    )               reduce using rule 36 (expression -> ( expression ) .)
    HTMLEND         reduce using rule 36 (expression -> ( expression ) .)
    SARROW          reduce using rule 36 (expression -> ( expression ) .)
    ]               reduce using rule 36 (expression -> ( expression ) .)
    EQ_DIV          reduce using rule 36 (expression -> ( expression ) .)
    EQ_MOD          reduce using rule 36 (expression -> ( expression ) .)
    EQ_MUL          reduce using rule 36 (expression -> ( expression ) .)
    EQ_SUB          reduce using rule 36 (expression -> ( expression ) .)
    EQ_ADD          reduce using rule 36 (expression -> ( expression ) .)
    =               reduce using rule 36 (expression -> ( expression ) .)
    AS              reduce using rule 36 (expression -> ( expression ) .)


state 210

    (154) _numpy -> ( expression , . )
    (157) items -> expression , . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 282
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 281
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 211

    (152) _numpy -> ( , ) .
    >               reduce using rule 152 (_numpy -> ( , ) .)
    <               reduce using rule 152 (_numpy -> ( , ) .)
    &               reduce using rule 152 (_numpy -> ( , ) .)
    |               reduce using rule 152 (_numpy -> ( , ) .)
    EQ_GREATER      reduce using rule 152 (_numpy -> ( , ) .)
    EQ_LESS         reduce using rule 152 (_numpy -> ( , ) .)
    NOT_EQEQ        reduce using rule 152 (_numpy -> ( , ) .)
    EQEQ            reduce using rule 152 (_numpy -> ( , ) .)
    %               reduce using rule 152 (_numpy -> ( , ) .)
    *               reduce using rule 152 (_numpy -> ( , ) .)
    /               reduce using rule 152 (_numpy -> ( , ) .)
    -               reduce using rule 152 (_numpy -> ( , ) .)
    +               reduce using rule 152 (_numpy -> ( , ) .)
    .               reduce using rule 152 (_numpy -> ( , ) .)
    COLON_COLON     reduce using rule 152 (_numpy -> ( , ) .)
    ^               reduce using rule 152 (_numpy -> ( , ) .)
    [               reduce using rule 152 (_numpy -> ( , ) .)
    (               reduce using rule 152 (_numpy -> ( , ) .)
    $               reduce using rule 152 (_numpy -> ( , ) .)
    ID              reduce using rule 152 (_numpy -> ( , ) .)
    !               reduce using rule 152 (_numpy -> ( , ) .)
    ?               reduce using rule 152 (_numpy -> ( , ) .)
    HTMLSTART       reduce using rule 152 (_numpy -> ( , ) .)
    {               reduce using rule 152 (_numpy -> ( , ) .)
    STRING          reduce using rule 152 (_numpy -> ( , ) .)
    CHAR            reduce using rule 152 (_numpy -> ( , ) .)
    FALSE           reduce using rule 152 (_numpy -> ( , ) .)
    TRUE            reduce using rule 152 (_numpy -> ( , ) .)
    FLOAT           reduce using rule 152 (_numpy -> ( , ) .)
    INT             reduce using rule 152 (_numpy -> ( , ) .)
    NULL            reduce using rule 152 (_numpy -> ( , ) .)
    #               reduce using rule 152 (_numpy -> ( , ) .)
    NEW             reduce using rule 152 (_numpy -> ( , ) .)
    PYTHON_CODE_EXEC reduce using rule 152 (_numpy -> ( , ) .)
    PYTHON_CODE     reduce using rule 152 (_numpy -> ( , ) .)
    PHPSTART        reduce using rule 152 (_numpy -> ( , ) .)
    LIMPORT         reduce using rule 152 (_numpy -> ( , ) .)
    IMPORT          reduce using rule 152 (_numpy -> ( , ) .)
    RETURN          reduce using rule 152 (_numpy -> ( , ) .)
    DEL             reduce using rule 152 (_numpy -> ( , ) .)
    FOREACH         reduce using rule 152 (_numpy -> ( , ) .)
    FOR             reduce using rule 152 (_numpy -> ( , ) .)
    DEBUG           reduce using rule 152 (_numpy -> ( , ) .)
    SKIP            reduce using rule 152 (_numpy -> ( , ) .)
    BREAK           reduce using rule 152 (_numpy -> ( , ) .)
    LET             reduce using rule 152 (_numpy -> ( , ) .)
    WHILE           reduce using rule 152 (_numpy -> ( , ) .)
    NAMESPACE       reduce using rule 152 (_numpy -> ( , ) .)
    CLASS           reduce using rule 152 (_numpy -> ( , ) .)
    FUNC            reduce using rule 152 (_numpy -> ( , ) .)
    INIT            reduce using rule 152 (_numpy -> ( , ) .)
    IF              reduce using rule 152 (_numpy -> ( , ) .)
    $end            reduce using rule 152 (_numpy -> ( , ) .)
    ;               reduce using rule 152 (_numpy -> ( , ) .)
    ,               reduce using rule 152 (_numpy -> ( , ) .)
    PHPEND          reduce using rule 152 (_numpy -> ( , ) .)
    }               reduce using rule 152 (_numpy -> ( , ) .)
    )               reduce using rule 152 (_numpy -> ( , ) .)
    HTMLEND         reduce using rule 152 (_numpy -> ( , ) .)
    SARROW          reduce using rule 152 (_numpy -> ( , ) .)
    ]               reduce using rule 152 (_numpy -> ( , ) .)
    EQ_DIV          reduce using rule 152 (_numpy -> ( , ) .)
    EQ_MOD          reduce using rule 152 (_numpy -> ( , ) .)
    EQ_MUL          reduce using rule 152 (_numpy -> ( , ) .)
    EQ_SUB          reduce using rule 152 (_numpy -> ( , ) .)
    EQ_ADD          reduce using rule 152 (_numpy -> ( , ) .)
    =               reduce using rule 152 (_numpy -> ( , ) .)
    AS              reduce using rule 152 (_numpy -> ( , ) .)


state 212

    (155) _numpy -> ( items , . )
    (158) items -> items , . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 283
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 284
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 213

    (156) _numpy -> ( items ) .
    >               reduce using rule 156 (_numpy -> ( items ) .)
    <               reduce using rule 156 (_numpy -> ( items ) .)
    &               reduce using rule 156 (_numpy -> ( items ) .)
    |               reduce using rule 156 (_numpy -> ( items ) .)
    EQ_GREATER      reduce using rule 156 (_numpy -> ( items ) .)
    EQ_LESS         reduce using rule 156 (_numpy -> ( items ) .)
    NOT_EQEQ        reduce using rule 156 (_numpy -> ( items ) .)
    EQEQ            reduce using rule 156 (_numpy -> ( items ) .)
    %               reduce using rule 156 (_numpy -> ( items ) .)
    *               reduce using rule 156 (_numpy -> ( items ) .)
    /               reduce using rule 156 (_numpy -> ( items ) .)
    -               reduce using rule 156 (_numpy -> ( items ) .)
    +               reduce using rule 156 (_numpy -> ( items ) .)
    .               reduce using rule 156 (_numpy -> ( items ) .)
    COLON_COLON     reduce using rule 156 (_numpy -> ( items ) .)
    ^               reduce using rule 156 (_numpy -> ( items ) .)
    [               reduce using rule 156 (_numpy -> ( items ) .)
    (               reduce using rule 156 (_numpy -> ( items ) .)
    $               reduce using rule 156 (_numpy -> ( items ) .)
    ID              reduce using rule 156 (_numpy -> ( items ) .)
    !               reduce using rule 156 (_numpy -> ( items ) .)
    ?               reduce using rule 156 (_numpy -> ( items ) .)
    HTMLSTART       reduce using rule 156 (_numpy -> ( items ) .)
    {               reduce using rule 156 (_numpy -> ( items ) .)
    STRING          reduce using rule 156 (_numpy -> ( items ) .)
    CHAR            reduce using rule 156 (_numpy -> ( items ) .)
    FALSE           reduce using rule 156 (_numpy -> ( items ) .)
    TRUE            reduce using rule 156 (_numpy -> ( items ) .)
    FLOAT           reduce using rule 156 (_numpy -> ( items ) .)
    INT             reduce using rule 156 (_numpy -> ( items ) .)
    NULL            reduce using rule 156 (_numpy -> ( items ) .)
    #               reduce using rule 156 (_numpy -> ( items ) .)
    NEW             reduce using rule 156 (_numpy -> ( items ) .)
    PYTHON_CODE_EXEC reduce using rule 156 (_numpy -> ( items ) .)
    PYTHON_CODE     reduce using rule 156 (_numpy -> ( items ) .)
    PHPSTART        reduce using rule 156 (_numpy -> ( items ) .)
    LIMPORT         reduce using rule 156 (_numpy -> ( items ) .)
    IMPORT          reduce using rule 156 (_numpy -> ( items ) .)
    RETURN          reduce using rule 156 (_numpy -> ( items ) .)
    DEL             reduce using rule 156 (_numpy -> ( items ) .)
    FOREACH         reduce using rule 156 (_numpy -> ( items ) .)
    FOR             reduce using rule 156 (_numpy -> ( items ) .)
    DEBUG           reduce using rule 156 (_numpy -> ( items ) .)
    SKIP            reduce using rule 156 (_numpy -> ( items ) .)
    BREAK           reduce using rule 156 (_numpy -> ( items ) .)
    LET             reduce using rule 156 (_numpy -> ( items ) .)
    WHILE           reduce using rule 156 (_numpy -> ( items ) .)
    NAMESPACE       reduce using rule 156 (_numpy -> ( items ) .)
    CLASS           reduce using rule 156 (_numpy -> ( items ) .)
    FUNC            reduce using rule 156 (_numpy -> ( items ) .)
    INIT            reduce using rule 156 (_numpy -> ( items ) .)
    IF              reduce using rule 156 (_numpy -> ( items ) .)
    $end            reduce using rule 156 (_numpy -> ( items ) .)
    ;               reduce using rule 156 (_numpy -> ( items ) .)
    ,               reduce using rule 156 (_numpy -> ( items ) .)
    PHPEND          reduce using rule 156 (_numpy -> ( items ) .)
    }               reduce using rule 156 (_numpy -> ( items ) .)
    )               reduce using rule 156 (_numpy -> ( items ) .)
    HTMLEND         reduce using rule 156 (_numpy -> ( items ) .)
    SARROW          reduce using rule 156 (_numpy -> ( items ) .)
    ]               reduce using rule 156 (_numpy -> ( items ) .)
    EQ_DIV          reduce using rule 156 (_numpy -> ( items ) .)
    EQ_MOD          reduce using rule 156 (_numpy -> ( items ) .)
    EQ_MUL          reduce using rule 156 (_numpy -> ( items ) .)
    EQ_SUB          reduce using rule 156 (_numpy -> ( items ) .)
    EQ_ADD          reduce using rule 156 (_numpy -> ( items ) .)
    =               reduce using rule 156 (_numpy -> ( items ) .)
    AS              reduce using rule 156 (_numpy -> ( items ) .)


state 214

    (55) expression -> ID OF ID .
    >               reduce using rule 55 (expression -> ID OF ID .)
    <               reduce using rule 55 (expression -> ID OF ID .)
    &               reduce using rule 55 (expression -> ID OF ID .)
    |               reduce using rule 55 (expression -> ID OF ID .)
    EQ_GREATER      reduce using rule 55 (expression -> ID OF ID .)
    EQ_LESS         reduce using rule 55 (expression -> ID OF ID .)
    NOT_EQEQ        reduce using rule 55 (expression -> ID OF ID .)
    EQEQ            reduce using rule 55 (expression -> ID OF ID .)
    %               reduce using rule 55 (expression -> ID OF ID .)
    *               reduce using rule 55 (expression -> ID OF ID .)
    /               reduce using rule 55 (expression -> ID OF ID .)
    -               reduce using rule 55 (expression -> ID OF ID .)
    +               reduce using rule 55 (expression -> ID OF ID .)
    .               reduce using rule 55 (expression -> ID OF ID .)
    COLON_COLON     reduce using rule 55 (expression -> ID OF ID .)
    ^               reduce using rule 55 (expression -> ID OF ID .)
    [               reduce using rule 55 (expression -> ID OF ID .)
    (               reduce using rule 55 (expression -> ID OF ID .)
    $               reduce using rule 55 (expression -> ID OF ID .)
    ID              reduce using rule 55 (expression -> ID OF ID .)
    !               reduce using rule 55 (expression -> ID OF ID .)
    ?               reduce using rule 55 (expression -> ID OF ID .)
    HTMLSTART       reduce using rule 55 (expression -> ID OF ID .)
    {               reduce using rule 55 (expression -> ID OF ID .)
    STRING          reduce using rule 55 (expression -> ID OF ID .)
    CHAR            reduce using rule 55 (expression -> ID OF ID .)
    FALSE           reduce using rule 55 (expression -> ID OF ID .)
    TRUE            reduce using rule 55 (expression -> ID OF ID .)
    FLOAT           reduce using rule 55 (expression -> ID OF ID .)
    INT             reduce using rule 55 (expression -> ID OF ID .)
    NULL            reduce using rule 55 (expression -> ID OF ID .)
    #               reduce using rule 55 (expression -> ID OF ID .)
    NEW             reduce using rule 55 (expression -> ID OF ID .)
    PYTHON_CODE_EXEC reduce using rule 55 (expression -> ID OF ID .)
    PYTHON_CODE     reduce using rule 55 (expression -> ID OF ID .)
    PHPSTART        reduce using rule 55 (expression -> ID OF ID .)
    LIMPORT         reduce using rule 55 (expression -> ID OF ID .)
    IMPORT          reduce using rule 55 (expression -> ID OF ID .)
    RETURN          reduce using rule 55 (expression -> ID OF ID .)
    DEL             reduce using rule 55 (expression -> ID OF ID .)
    FOREACH         reduce using rule 55 (expression -> ID OF ID .)
    FOR             reduce using rule 55 (expression -> ID OF ID .)
    DEBUG           reduce using rule 55 (expression -> ID OF ID .)
    SKIP            reduce using rule 55 (expression -> ID OF ID .)
    BREAK           reduce using rule 55 (expression -> ID OF ID .)
    LET             reduce using rule 55 (expression -> ID OF ID .)
    WHILE           reduce using rule 55 (expression -> ID OF ID .)
    NAMESPACE       reduce using rule 55 (expression -> ID OF ID .)
    CLASS           reduce using rule 55 (expression -> ID OF ID .)
    FUNC            reduce using rule 55 (expression -> ID OF ID .)
    INIT            reduce using rule 55 (expression -> ID OF ID .)
    IF              reduce using rule 55 (expression -> ID OF ID .)
    $end            reduce using rule 55 (expression -> ID OF ID .)
    ;               reduce using rule 55 (expression -> ID OF ID .)
    ,               reduce using rule 55 (expression -> ID OF ID .)
    PHPEND          reduce using rule 55 (expression -> ID OF ID .)
    }               reduce using rule 55 (expression -> ID OF ID .)
    )               reduce using rule 55 (expression -> ID OF ID .)
    HTMLEND         reduce using rule 55 (expression -> ID OF ID .)
    SARROW          reduce using rule 55 (expression -> ID OF ID .)
    ]               reduce using rule 55 (expression -> ID OF ID .)
    EQ_DIV          reduce using rule 55 (expression -> ID OF ID .)
    EQ_MOD          reduce using rule 55 (expression -> ID OF ID .)
    EQ_MUL          reduce using rule 55 (expression -> ID OF ID .)
    EQ_SUB          reduce using rule 55 (expression -> ID OF ID .)
    EQ_ADD          reduce using rule 55 (expression -> ID OF ID .)
    =               reduce using rule 55 (expression -> ID OF ID .)
    AS              reduce using rule 55 (expression -> ID OF ID .)


state 215

    (119) variable_operation -> ID EQ_DIV expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 285
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 216

    (121) variable_operation -> ID EQ_MOD expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 286
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 217

    (123) variable_operation -> ID EQ_MUL expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 287
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 218

    (125) variable_operation -> ID EQ_SUB expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 288
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 219

    (127) variable_operation -> ID EQ_ADD expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 289
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 220

    (92) function_declaration -> ID FUNC ID . ( empty ) { program }
    (93) function_declaration -> ID FUNC ID . ( function_arguments ) { program }
    (94) function_declaration -> ID FUNC ID . ( empty ) : expression { program }
    (95) function_declaration -> ID FUNC ID . ( function_arguments ) : expression { program }
    (               shift and go to state 290


state 221

    (73) function_call -> ID TARROW ID . ( function_arguments )
    (76) function_call -> ID TARROW ID .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 291
    ;               reduce using rule 76 (function_call -> ID TARROW ID .)
    >               reduce using rule 76 (function_call -> ID TARROW ID .)
    <               reduce using rule 76 (function_call -> ID TARROW ID .)
    &               reduce using rule 76 (function_call -> ID TARROW ID .)
    |               reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 76 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 76 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 76 (function_call -> ID TARROW ID .)
    %               reduce using rule 76 (function_call -> ID TARROW ID .)
    *               reduce using rule 76 (function_call -> ID TARROW ID .)
    /               reduce using rule 76 (function_call -> ID TARROW ID .)
    -               reduce using rule 76 (function_call -> ID TARROW ID .)
    +               reduce using rule 76 (function_call -> ID TARROW ID .)
    .               reduce using rule 76 (function_call -> ID TARROW ID .)
    COLON_COLON     reduce using rule 76 (function_call -> ID TARROW ID .)
    ^               reduce using rule 76 (function_call -> ID TARROW ID .)
    [               reduce using rule 76 (function_call -> ID TARROW ID .)
    $               reduce using rule 76 (function_call -> ID TARROW ID .)
    ID              reduce using rule 76 (function_call -> ID TARROW ID .)
    !               reduce using rule 76 (function_call -> ID TARROW ID .)
    ?               reduce using rule 76 (function_call -> ID TARROW ID .)
    HTMLSTART       reduce using rule 76 (function_call -> ID TARROW ID .)
    {               reduce using rule 76 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 76 (function_call -> ID TARROW ID .)
    CHAR            reduce using rule 76 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 76 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 76 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 76 (function_call -> ID TARROW ID .)
    INT             reduce using rule 76 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 76 (function_call -> ID TARROW ID .)
    #               reduce using rule 76 (function_call -> ID TARROW ID .)
    NEW             reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPSTART        reduce using rule 76 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 76 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 76 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 76 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 76 (function_call -> ID TARROW ID .)
    FOREACH         reduce using rule 76 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 76 (function_call -> ID TARROW ID .)
    DEBUG           reduce using rule 76 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 76 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 76 (function_call -> ID TARROW ID .)
    LET             reduce using rule 76 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 76 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 76 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 76 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 76 (function_call -> ID TARROW ID .)
    INIT            reduce using rule 76 (function_call -> ID TARROW ID .)
    IF              reduce using rule 76 (function_call -> ID TARROW ID .)
    $end            reduce using rule 76 (function_call -> ID TARROW ID .)
    ,               reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPEND          reduce using rule 76 (function_call -> ID TARROW ID .)
    }               reduce using rule 76 (function_call -> ID TARROW ID .)
    )               reduce using rule 76 (function_call -> ID TARROW ID .)
    HTMLEND         reduce using rule 76 (function_call -> ID TARROW ID .)
    SARROW          reduce using rule 76 (function_call -> ID TARROW ID .)
    ]               reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_DIV          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_MOD          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_MUL          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_SUB          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_ADD          reduce using rule 76 (function_call -> ID TARROW ID .)
    =               reduce using rule 76 (function_call -> ID TARROW ID .)
    AS              reduce using rule 76 (function_call -> ID TARROW ID .)


state 222

    (74) function_call -> ID \ ID .
    ;               reduce using rule 74 (function_call -> ID \ ID .)
    >               reduce using rule 74 (function_call -> ID \ ID .)
    <               reduce using rule 74 (function_call -> ID \ ID .)
    &               reduce using rule 74 (function_call -> ID \ ID .)
    |               reduce using rule 74 (function_call -> ID \ ID .)
    EQ_GREATER      reduce using rule 74 (function_call -> ID \ ID .)
    EQ_LESS         reduce using rule 74 (function_call -> ID \ ID .)
    NOT_EQEQ        reduce using rule 74 (function_call -> ID \ ID .)
    EQEQ            reduce using rule 74 (function_call -> ID \ ID .)
    %               reduce using rule 74 (function_call -> ID \ ID .)
    *               reduce using rule 74 (function_call -> ID \ ID .)
    /               reduce using rule 74 (function_call -> ID \ ID .)
    -               reduce using rule 74 (function_call -> ID \ ID .)
    +               reduce using rule 74 (function_call -> ID \ ID .)
    .               reduce using rule 74 (function_call -> ID \ ID .)
    COLON_COLON     reduce using rule 74 (function_call -> ID \ ID .)
    ^               reduce using rule 74 (function_call -> ID \ ID .)
    [               reduce using rule 74 (function_call -> ID \ ID .)
    (               reduce using rule 74 (function_call -> ID \ ID .)
    $               reduce using rule 74 (function_call -> ID \ ID .)
    ID              reduce using rule 74 (function_call -> ID \ ID .)
    !               reduce using rule 74 (function_call -> ID \ ID .)
    ?               reduce using rule 74 (function_call -> ID \ ID .)
    HTMLSTART       reduce using rule 74 (function_call -> ID \ ID .)
    {               reduce using rule 74 (function_call -> ID \ ID .)
    STRING          reduce using rule 74 (function_call -> ID \ ID .)
    CHAR            reduce using rule 74 (function_call -> ID \ ID .)
    FALSE           reduce using rule 74 (function_call -> ID \ ID .)
    TRUE            reduce using rule 74 (function_call -> ID \ ID .)
    FLOAT           reduce using rule 74 (function_call -> ID \ ID .)
    INT             reduce using rule 74 (function_call -> ID \ ID .)
    NULL            reduce using rule 74 (function_call -> ID \ ID .)
    #               reduce using rule 74 (function_call -> ID \ ID .)
    NEW             reduce using rule 74 (function_call -> ID \ ID .)
    PYTHON_CODE_EXEC reduce using rule 74 (function_call -> ID \ ID .)
    PYTHON_CODE     reduce using rule 74 (function_call -> ID \ ID .)
    PHPSTART        reduce using rule 74 (function_call -> ID \ ID .)
    LIMPORT         reduce using rule 74 (function_call -> ID \ ID .)
    IMPORT          reduce using rule 74 (function_call -> ID \ ID .)
    RETURN          reduce using rule 74 (function_call -> ID \ ID .)
    DEL             reduce using rule 74 (function_call -> ID \ ID .)
    FOREACH         reduce using rule 74 (function_call -> ID \ ID .)
    FOR             reduce using rule 74 (function_call -> ID \ ID .)
    DEBUG           reduce using rule 74 (function_call -> ID \ ID .)
    SKIP            reduce using rule 74 (function_call -> ID \ ID .)
    BREAK           reduce using rule 74 (function_call -> ID \ ID .)
    LET             reduce using rule 74 (function_call -> ID \ ID .)
    WHILE           reduce using rule 74 (function_call -> ID \ ID .)
    NAMESPACE       reduce using rule 74 (function_call -> ID \ ID .)
    CLASS           reduce using rule 74 (function_call -> ID \ ID .)
    FUNC            reduce using rule 74 (function_call -> ID \ ID .)
    INIT            reduce using rule 74 (function_call -> ID \ ID .)
    IF              reduce using rule 74 (function_call -> ID \ ID .)
    $end            reduce using rule 74 (function_call -> ID \ ID .)
    ,               reduce using rule 74 (function_call -> ID \ ID .)
    PHPEND          reduce using rule 74 (function_call -> ID \ ID .)
    }               reduce using rule 74 (function_call -> ID \ ID .)
    )               reduce using rule 74 (function_call -> ID \ ID .)
    HTMLEND         reduce using rule 74 (function_call -> ID \ ID .)
    SARROW          reduce using rule 74 (function_call -> ID \ ID .)
    ]               reduce using rule 74 (function_call -> ID \ ID .)
    EQ_DIV          reduce using rule 74 (function_call -> ID \ ID .)
    EQ_MOD          reduce using rule 74 (function_call -> ID \ ID .)
    EQ_MUL          reduce using rule 74 (function_call -> ID \ ID .)
    EQ_SUB          reduce using rule 74 (function_call -> ID \ ID .)
    EQ_ADD          reduce using rule 74 (function_call -> ID \ ID .)
    =               reduce using rule 74 (function_call -> ID \ ID .)
    AS              reduce using rule 74 (function_call -> ID \ ID .)


state 223

    (75) function_call -> ID / ID .
    ;               reduce using rule 75 (function_call -> ID / ID .)
    >               reduce using rule 75 (function_call -> ID / ID .)
    <               reduce using rule 75 (function_call -> ID / ID .)
    &               reduce using rule 75 (function_call -> ID / ID .)
    |               reduce using rule 75 (function_call -> ID / ID .)
    EQ_GREATER      reduce using rule 75 (function_call -> ID / ID .)
    EQ_LESS         reduce using rule 75 (function_call -> ID / ID .)
    NOT_EQEQ        reduce using rule 75 (function_call -> ID / ID .)
    EQEQ            reduce using rule 75 (function_call -> ID / ID .)
    %               reduce using rule 75 (function_call -> ID / ID .)
    *               reduce using rule 75 (function_call -> ID / ID .)
    /               reduce using rule 75 (function_call -> ID / ID .)
    -               reduce using rule 75 (function_call -> ID / ID .)
    +               reduce using rule 75 (function_call -> ID / ID .)
    .               reduce using rule 75 (function_call -> ID / ID .)
    COLON_COLON     reduce using rule 75 (function_call -> ID / ID .)
    ^               reduce using rule 75 (function_call -> ID / ID .)
    [               reduce using rule 75 (function_call -> ID / ID .)
    (               reduce using rule 75 (function_call -> ID / ID .)
    $               reduce using rule 75 (function_call -> ID / ID .)
    ID              reduce using rule 75 (function_call -> ID / ID .)
    !               reduce using rule 75 (function_call -> ID / ID .)
    ?               reduce using rule 75 (function_call -> ID / ID .)
    HTMLSTART       reduce using rule 75 (function_call -> ID / ID .)
    {               reduce using rule 75 (function_call -> ID / ID .)
    STRING          reduce using rule 75 (function_call -> ID / ID .)
    CHAR            reduce using rule 75 (function_call -> ID / ID .)
    FALSE           reduce using rule 75 (function_call -> ID / ID .)
    TRUE            reduce using rule 75 (function_call -> ID / ID .)
    FLOAT           reduce using rule 75 (function_call -> ID / ID .)
    INT             reduce using rule 75 (function_call -> ID / ID .)
    NULL            reduce using rule 75 (function_call -> ID / ID .)
    #               reduce using rule 75 (function_call -> ID / ID .)
    NEW             reduce using rule 75 (function_call -> ID / ID .)
    PYTHON_CODE_EXEC reduce using rule 75 (function_call -> ID / ID .)
    PYTHON_CODE     reduce using rule 75 (function_call -> ID / ID .)
    PHPSTART        reduce using rule 75 (function_call -> ID / ID .)
    LIMPORT         reduce using rule 75 (function_call -> ID / ID .)
    IMPORT          reduce using rule 75 (function_call -> ID / ID .)
    RETURN          reduce using rule 75 (function_call -> ID / ID .)
    DEL             reduce using rule 75 (function_call -> ID / ID .)
    FOREACH         reduce using rule 75 (function_call -> ID / ID .)
    FOR             reduce using rule 75 (function_call -> ID / ID .)
    DEBUG           reduce using rule 75 (function_call -> ID / ID .)
    SKIP            reduce using rule 75 (function_call -> ID / ID .)
    BREAK           reduce using rule 75 (function_call -> ID / ID .)
    LET             reduce using rule 75 (function_call -> ID / ID .)
    WHILE           reduce using rule 75 (function_call -> ID / ID .)
    NAMESPACE       reduce using rule 75 (function_call -> ID / ID .)
    CLASS           reduce using rule 75 (function_call -> ID / ID .)
    FUNC            reduce using rule 75 (function_call -> ID / ID .)
    INIT            reduce using rule 75 (function_call -> ID / ID .)
    IF              reduce using rule 75 (function_call -> ID / ID .)
    $end            reduce using rule 75 (function_call -> ID / ID .)
    ,               reduce using rule 75 (function_call -> ID / ID .)
    PHPEND          reduce using rule 75 (function_call -> ID / ID .)
    }               reduce using rule 75 (function_call -> ID / ID .)
    )               reduce using rule 75 (function_call -> ID / ID .)
    HTMLEND         reduce using rule 75 (function_call -> ID / ID .)
    SARROW          reduce using rule 75 (function_call -> ID / ID .)
    ]               reduce using rule 75 (function_call -> ID / ID .)
    EQ_DIV          reduce using rule 75 (function_call -> ID / ID .)
    EQ_MOD          reduce using rule 75 (function_call -> ID / ID .)
    EQ_MUL          reduce using rule 75 (function_call -> ID / ID .)
    EQ_SUB          reduce using rule 75 (function_call -> ID / ID .)
    EQ_ADD          reduce using rule 75 (function_call -> ID / ID .)
    =               reduce using rule 75 (function_call -> ID / ID .)
    AS              reduce using rule 75 (function_call -> ID / ID .)


state 224

    (82) function_call -> ID COLON_COLON ID . ( empty )
    (83) function_call -> ID COLON_COLON ID . ( function_arguments )
    (               shift and go to state 292


state 225

    (116) variable_assignment -> $ ID TARROW . ID = expression ;
    (84) function_call -> $ ID TARROW . ID ( empty )
    (85) function_call -> $ ID TARROW . ID ( function_arguments )
    (73) function_call -> ID TARROW . ID ( function_arguments )
    (76) function_call -> ID TARROW . ID
    ID              shift and go to state 293


state 226

    (117) variable_assignment -> $ ID = . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 294
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 227

    (138) import_statement -> . SELFISH ; .
    ?               reduce using rule 138 (import_statement -> . SELFISH ; .)
    (               reduce using rule 138 (import_statement -> . SELFISH ; .)
    !               reduce using rule 138 (import_statement -> . SELFISH ; .)
    +               reduce using rule 138 (import_statement -> . SELFISH ; .)
    -               reduce using rule 138 (import_statement -> . SELFISH ; .)
    *               reduce using rule 138 (import_statement -> . SELFISH ; .)
    &               reduce using rule 138 (import_statement -> . SELFISH ; .)
    ID              reduce using rule 138 (import_statement -> . SELFISH ; .)
    $               reduce using rule 138 (import_statement -> . SELFISH ; .)
    HTMLSTART       reduce using rule 138 (import_statement -> . SELFISH ; .)
    PHPSTART        reduce using rule 138 (import_statement -> . SELFISH ; .)
    LIMPORT         reduce using rule 138 (import_statement -> . SELFISH ; .)
    .               reduce using rule 138 (import_statement -> . SELFISH ; .)
    IMPORT          reduce using rule 138 (import_statement -> . SELFISH ; .)
    RETURN          reduce using rule 138 (import_statement -> . SELFISH ; .)
    DEL             reduce using rule 138 (import_statement -> . SELFISH ; .)
    FOREACH         reduce using rule 138 (import_statement -> . SELFISH ; .)
    FOR             reduce using rule 138 (import_statement -> . SELFISH ; .)
    DEBUG           reduce using rule 138 (import_statement -> . SELFISH ; .)
    SKIP            reduce using rule 138 (import_statement -> . SELFISH ; .)
    BREAK           reduce using rule 138 (import_statement -> . SELFISH ; .)
    LET             reduce using rule 138 (import_statement -> . SELFISH ; .)
    WHILE           reduce using rule 138 (import_statement -> . SELFISH ; .)
    NAMESPACE       reduce using rule 138 (import_statement -> . SELFISH ; .)
    CLASS           reduce using rule 138 (import_statement -> . SELFISH ; .)
    FUNC            reduce using rule 138 (import_statement -> . SELFISH ; .)
    INIT            reduce using rule 138 (import_statement -> . SELFISH ; .)
    [               reduce using rule 138 (import_statement -> . SELFISH ; .)
    {               reduce using rule 138 (import_statement -> . SELFISH ; .)
    STRING          reduce using rule 138 (import_statement -> . SELFISH ; .)
    CHAR            reduce using rule 138 (import_statement -> . SELFISH ; .)
    FALSE           reduce using rule 138 (import_statement -> . SELFISH ; .)
    TRUE            reduce using rule 138 (import_statement -> . SELFISH ; .)
    FLOAT           reduce using rule 138 (import_statement -> . SELFISH ; .)
    INT             reduce using rule 138 (import_statement -> . SELFISH ; .)
    NULL            reduce using rule 138 (import_statement -> . SELFISH ; .)
    #               reduce using rule 138 (import_statement -> . SELFISH ; .)
    NEW             reduce using rule 138 (import_statement -> . SELFISH ; .)
    PYTHON_CODE_EXEC reduce using rule 138 (import_statement -> . SELFISH ; .)
    PYTHON_CODE     reduce using rule 138 (import_statement -> . SELFISH ; .)
    IF              reduce using rule 138 (import_statement -> . SELFISH ; .)
    $end            reduce using rule 138 (import_statement -> . SELFISH ; .)
    PHPEND          reduce using rule 138 (import_statement -> . SELFISH ; .)
    }               reduce using rule 138 (import_statement -> . SELFISH ; .)


state 228

    (139) import_statement -> . GLOBAL ; .
    ?               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    (               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    !               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    +               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    -               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    *               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    &               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    ID              reduce using rule 139 (import_statement -> . GLOBAL ; .)
    $               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    HTMLSTART       reduce using rule 139 (import_statement -> . GLOBAL ; .)
    PHPSTART        reduce using rule 139 (import_statement -> . GLOBAL ; .)
    LIMPORT         reduce using rule 139 (import_statement -> . GLOBAL ; .)
    .               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    IMPORT          reduce using rule 139 (import_statement -> . GLOBAL ; .)
    RETURN          reduce using rule 139 (import_statement -> . GLOBAL ; .)
    DEL             reduce using rule 139 (import_statement -> . GLOBAL ; .)
    FOREACH         reduce using rule 139 (import_statement -> . GLOBAL ; .)
    FOR             reduce using rule 139 (import_statement -> . GLOBAL ; .)
    DEBUG           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    SKIP            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    BREAK           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    LET             reduce using rule 139 (import_statement -> . GLOBAL ; .)
    WHILE           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    NAMESPACE       reduce using rule 139 (import_statement -> . GLOBAL ; .)
    CLASS           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    FUNC            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    INIT            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    [               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    {               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    STRING          reduce using rule 139 (import_statement -> . GLOBAL ; .)
    CHAR            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    FALSE           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    TRUE            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    FLOAT           reduce using rule 139 (import_statement -> . GLOBAL ; .)
    INT             reduce using rule 139 (import_statement -> . GLOBAL ; .)
    NULL            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    #               reduce using rule 139 (import_statement -> . GLOBAL ; .)
    NEW             reduce using rule 139 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE_EXEC reduce using rule 139 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE     reduce using rule 139 (import_statement -> . GLOBAL ; .)
    IF              reduce using rule 139 (import_statement -> . GLOBAL ; .)
    $end            reduce using rule 139 (import_statement -> . GLOBAL ; .)
    PHPEND          reduce using rule 139 (import_statement -> . GLOBAL ; .)
    }               reduce using rule 139 (import_statement -> . GLOBAL ; .)


state 229

    (70) function_call -> . ENV FROM . ID { program }
    ID              shift and go to state 295


state 230

    (71) function_call -> . ENV { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 296
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 231

    (61) html_full -> HTMLSTART empty HTMLEND .
    >               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    <               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    &               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    |               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_GREATER      reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_LESS         reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    NOT_EQEQ        reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQEQ            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    %               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    *               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    /               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    -               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    +               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    .               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    COLON_COLON     reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ^               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    [               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    (               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    $               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ID              reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    !               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ?               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    HTMLSTART       reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    {               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    STRING          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    CHAR            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    FALSE           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    TRUE            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    FLOAT           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    INT             reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    NULL            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    #               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    NEW             reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    PYTHON_CODE_EXEC reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    PYTHON_CODE     reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    PHPSTART        reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    LIMPORT         reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    IMPORT          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    RETURN          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    DEL             reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    FOREACH         reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    FOR             reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    DEBUG           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    SKIP            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    BREAK           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    LET             reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    WHILE           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    NAMESPACE       reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    CLASS           reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    FUNC            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    INIT            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    IF              reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    $end            reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ;               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ,               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    PHPEND          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    }               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    )               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    HTMLEND         reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    SARROW          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    ]               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_DIV          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_MOD          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_MUL          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_SUB          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    EQ_ADD          reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    =               reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)
    AS              reduce using rule 61 (html_full -> HTMLSTART empty HTMLEND .)


state 232

    (62) html_full -> HTMLSTART expression HTMLEND .
    >               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    <               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    &               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    |               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_GREATER      reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_LESS         reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    NOT_EQEQ        reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQEQ            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    %               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    *               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    /               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    -               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    +               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    .               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    COLON_COLON     reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ^               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    [               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    (               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    $               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ID              reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    !               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ?               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    HTMLSTART       reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    {               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    STRING          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    CHAR            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    FALSE           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    TRUE            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    FLOAT           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    INT             reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    NULL            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    #               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    NEW             reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    PYTHON_CODE_EXEC reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    PYTHON_CODE     reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    PHPSTART        reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    LIMPORT         reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    IMPORT          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    RETURN          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    DEL             reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    FOREACH         reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    FOR             reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    DEBUG           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    SKIP            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    BREAK           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    LET             reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    WHILE           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    NAMESPACE       reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    CLASS           reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    FUNC            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    INIT            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    IF              reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    $end            reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ;               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ,               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    PHPEND          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    }               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    )               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    HTMLEND         reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    SARROW          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    ]               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_DIV          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_MOD          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_MUL          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_SUB          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    EQ_ADD          reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    =               reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)
    AS              reduce using rule 62 (html_full -> HTMLSTART expression HTMLEND .)


state 233

    (20) sandbox -> PHPSTART program PHPEND .
    ?               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    (               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    !               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    +               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    -               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    *               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    &               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    ID              reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    $               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    HTMLSTART       reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    PHPSTART        reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    LIMPORT         reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    .               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    IMPORT          reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    RETURN          reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    DEL             reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    FOREACH         reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    FOR             reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    DEBUG           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    SKIP            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    BREAK           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    LET             reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    WHILE           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    NAMESPACE       reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    CLASS           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    FUNC            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    INIT            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    [               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    {               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    STRING          reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    CHAR            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    FALSE           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    TRUE            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    FLOAT           reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    INT             reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    NULL            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    #               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    NEW             reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    PYTHON_CODE_EXEC reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    PYTHON_CODE     reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    IF              reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    $end            reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    PHPEND          reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)
    }               reduce using rule 20 (sandbox -> PHPSTART program PHPEND .)


state 234

    (21) sandbox -> LIMPORT expression ; .
    ?               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    (               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    !               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    +               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    -               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    *               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    &               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    ID              reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    $               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    HTMLSTART       reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    PHPSTART        reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    LIMPORT         reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    .               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    IMPORT          reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    RETURN          reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    DEL             reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    FOREACH         reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    FOR             reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    DEBUG           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    SKIP            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    BREAK           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    LET             reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    WHILE           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    NAMESPACE       reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    CLASS           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    FUNC            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    INIT            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    [               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    {               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    STRING          reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    CHAR            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    FALSE           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    TRUE            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    FLOAT           reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    INT             reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    NULL            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    #               reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    NEW             reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE     reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    IF              reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    $end            reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    PHPEND          reduce using rule 21 (sandbox -> LIMPORT expression ; .)
    }               reduce using rule 21 (sandbox -> LIMPORT expression ; .)


state 235

    (140) import_statement -> IMPORT expression ; .
    ?               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    (               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    !               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    +               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    -               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    *               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    &               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    ID              reduce using rule 140 (import_statement -> IMPORT expression ; .)
    $               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    HTMLSTART       reduce using rule 140 (import_statement -> IMPORT expression ; .)
    PHPSTART        reduce using rule 140 (import_statement -> IMPORT expression ; .)
    LIMPORT         reduce using rule 140 (import_statement -> IMPORT expression ; .)
    .               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    IMPORT          reduce using rule 140 (import_statement -> IMPORT expression ; .)
    RETURN          reduce using rule 140 (import_statement -> IMPORT expression ; .)
    DEL             reduce using rule 140 (import_statement -> IMPORT expression ; .)
    FOREACH         reduce using rule 140 (import_statement -> IMPORT expression ; .)
    FOR             reduce using rule 140 (import_statement -> IMPORT expression ; .)
    DEBUG           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    SKIP            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    BREAK           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    LET             reduce using rule 140 (import_statement -> IMPORT expression ; .)
    WHILE           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    NAMESPACE       reduce using rule 140 (import_statement -> IMPORT expression ; .)
    CLASS           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    FUNC            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    INIT            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    [               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    {               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    STRING          reduce using rule 140 (import_statement -> IMPORT expression ; .)
    CHAR            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    FALSE           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    TRUE            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    FLOAT           reduce using rule 140 (import_statement -> IMPORT expression ; .)
    INT             reduce using rule 140 (import_statement -> IMPORT expression ; .)
    NULL            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    #               reduce using rule 140 (import_statement -> IMPORT expression ; .)
    NEW             reduce using rule 140 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 140 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE     reduce using rule 140 (import_statement -> IMPORT expression ; .)
    IF              reduce using rule 140 (import_statement -> IMPORT expression ; .)
    $end            reduce using rule 140 (import_statement -> IMPORT expression ; .)
    PHPEND          reduce using rule 140 (import_statement -> IMPORT expression ; .)
    }               reduce using rule 140 (import_statement -> IMPORT expression ; .)


state 236

    (69) return_statement -> RETURN expression ; .
    ?               reduce using rule 69 (return_statement -> RETURN expression ; .)
    (               reduce using rule 69 (return_statement -> RETURN expression ; .)
    !               reduce using rule 69 (return_statement -> RETURN expression ; .)
    +               reduce using rule 69 (return_statement -> RETURN expression ; .)
    -               reduce using rule 69 (return_statement -> RETURN expression ; .)
    *               reduce using rule 69 (return_statement -> RETURN expression ; .)
    &               reduce using rule 69 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 69 (return_statement -> RETURN expression ; .)
    $               reduce using rule 69 (return_statement -> RETURN expression ; .)
    HTMLSTART       reduce using rule 69 (return_statement -> RETURN expression ; .)
    PHPSTART        reduce using rule 69 (return_statement -> RETURN expression ; .)
    LIMPORT         reduce using rule 69 (return_statement -> RETURN expression ; .)
    .               reduce using rule 69 (return_statement -> RETURN expression ; .)
    IMPORT          reduce using rule 69 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 69 (return_statement -> RETURN expression ; .)
    DEL             reduce using rule 69 (return_statement -> RETURN expression ; .)
    FOREACH         reduce using rule 69 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 69 (return_statement -> RETURN expression ; .)
    DEBUG           reduce using rule 69 (return_statement -> RETURN expression ; .)
    SKIP            reduce using rule 69 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 69 (return_statement -> RETURN expression ; .)
    LET             reduce using rule 69 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 69 (return_statement -> RETURN expression ; .)
    NAMESPACE       reduce using rule 69 (return_statement -> RETURN expression ; .)
    CLASS           reduce using rule 69 (return_statement -> RETURN expression ; .)
    FUNC            reduce using rule 69 (return_statement -> RETURN expression ; .)
    INIT            reduce using rule 69 (return_statement -> RETURN expression ; .)
    [               reduce using rule 69 (return_statement -> RETURN expression ; .)
    {               reduce using rule 69 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 69 (return_statement -> RETURN expression ; .)
    CHAR            reduce using rule 69 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 69 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 69 (return_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 69 (return_statement -> RETURN expression ; .)
    INT             reduce using rule 69 (return_statement -> RETURN expression ; .)
    NULL            reduce using rule 69 (return_statement -> RETURN expression ; .)
    #               reduce using rule 69 (return_statement -> RETURN expression ; .)
    NEW             reduce using rule 69 (return_statement -> RETURN expression ; .)
    PYTHON_CODE_EXEC reduce using rule 69 (return_statement -> RETURN expression ; .)
    PYTHON_CODE     reduce using rule 69 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 69 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 69 (return_statement -> RETURN expression ; .)
    PHPEND          reduce using rule 69 (return_statement -> RETURN expression ; .)
    }               reduce using rule 69 (return_statement -> RETURN expression ; .)


state 237

    (137) delete_statement -> DEL ID ; .
    ?               reduce using rule 137 (delete_statement -> DEL ID ; .)
    (               reduce using rule 137 (delete_statement -> DEL ID ; .)
    !               reduce using rule 137 (delete_statement -> DEL ID ; .)
    +               reduce using rule 137 (delete_statement -> DEL ID ; .)
    -               reduce using rule 137 (delete_statement -> DEL ID ; .)
    *               reduce using rule 137 (delete_statement -> DEL ID ; .)
    &               reduce using rule 137 (delete_statement -> DEL ID ; .)
    ID              reduce using rule 137 (delete_statement -> DEL ID ; .)
    $               reduce using rule 137 (delete_statement -> DEL ID ; .)
    HTMLSTART       reduce using rule 137 (delete_statement -> DEL ID ; .)
    PHPSTART        reduce using rule 137 (delete_statement -> DEL ID ; .)
    LIMPORT         reduce using rule 137 (delete_statement -> DEL ID ; .)
    .               reduce using rule 137 (delete_statement -> DEL ID ; .)
    IMPORT          reduce using rule 137 (delete_statement -> DEL ID ; .)
    RETURN          reduce using rule 137 (delete_statement -> DEL ID ; .)
    DEL             reduce using rule 137 (delete_statement -> DEL ID ; .)
    FOREACH         reduce using rule 137 (delete_statement -> DEL ID ; .)
    FOR             reduce using rule 137 (delete_statement -> DEL ID ; .)
    DEBUG           reduce using rule 137 (delete_statement -> DEL ID ; .)
    SKIP            reduce using rule 137 (delete_statement -> DEL ID ; .)
    BREAK           reduce using rule 137 (delete_statement -> DEL ID ; .)
    LET             reduce using rule 137 (delete_statement -> DEL ID ; .)
    WHILE           reduce using rule 137 (delete_statement -> DEL ID ; .)
    NAMESPACE       reduce using rule 137 (delete_statement -> DEL ID ; .)
    CLASS           reduce using rule 137 (delete_statement -> DEL ID ; .)
    FUNC            reduce using rule 137 (delete_statement -> DEL ID ; .)
    INIT            reduce using rule 137 (delete_statement -> DEL ID ; .)
    [               reduce using rule 137 (delete_statement -> DEL ID ; .)
    {               reduce using rule 137 (delete_statement -> DEL ID ; .)
    STRING          reduce using rule 137 (delete_statement -> DEL ID ; .)
    CHAR            reduce using rule 137 (delete_statement -> DEL ID ; .)
    FALSE           reduce using rule 137 (delete_statement -> DEL ID ; .)
    TRUE            reduce using rule 137 (delete_statement -> DEL ID ; .)
    FLOAT           reduce using rule 137 (delete_statement -> DEL ID ; .)
    INT             reduce using rule 137 (delete_statement -> DEL ID ; .)
    NULL            reduce using rule 137 (delete_statement -> DEL ID ; .)
    #               reduce using rule 137 (delete_statement -> DEL ID ; .)
    NEW             reduce using rule 137 (delete_statement -> DEL ID ; .)
    PYTHON_CODE_EXEC reduce using rule 137 (delete_statement -> DEL ID ; .)
    PYTHON_CODE     reduce using rule 137 (delete_statement -> DEL ID ; .)
    IF              reduce using rule 137 (delete_statement -> DEL ID ; .)
    $end            reduce using rule 137 (delete_statement -> DEL ID ; .)
    PHPEND          reduce using rule 137 (delete_statement -> DEL ID ; .)
    }               reduce using rule 137 (delete_statement -> DEL ID ; .)


state 238

    (107) for_loop -> FOREACH ( expression . AS expression ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    AS              shift and go to state 297
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 239

    (148) _tuple -> { positional_args , . }
    (111) positional_args -> positional_args , . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    }               shift and go to state 298
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 275
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 240

    (149) _tuple -> { positional_args } .
    >               reduce using rule 149 (_tuple -> { positional_args } .)
    <               reduce using rule 149 (_tuple -> { positional_args } .)
    &               reduce using rule 149 (_tuple -> { positional_args } .)
    |               reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 149 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 149 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 149 (_tuple -> { positional_args } .)
    %               reduce using rule 149 (_tuple -> { positional_args } .)
    *               reduce using rule 149 (_tuple -> { positional_args } .)
    /               reduce using rule 149 (_tuple -> { positional_args } .)
    -               reduce using rule 149 (_tuple -> { positional_args } .)
    +               reduce using rule 149 (_tuple -> { positional_args } .)
    .               reduce using rule 149 (_tuple -> { positional_args } .)
    COLON_COLON     reduce using rule 149 (_tuple -> { positional_args } .)
    ^               reduce using rule 149 (_tuple -> { positional_args } .)
    [               reduce using rule 149 (_tuple -> { positional_args } .)
    (               reduce using rule 149 (_tuple -> { positional_args } .)
    $               reduce using rule 149 (_tuple -> { positional_args } .)
    ID              reduce using rule 149 (_tuple -> { positional_args } .)
    !               reduce using rule 149 (_tuple -> { positional_args } .)
    ?               reduce using rule 149 (_tuple -> { positional_args } .)
    HTMLSTART       reduce using rule 149 (_tuple -> { positional_args } .)
    {               reduce using rule 149 (_tuple -> { positional_args } .)
    STRING          reduce using rule 149 (_tuple -> { positional_args } .)
    CHAR            reduce using rule 149 (_tuple -> { positional_args } .)
    FALSE           reduce using rule 149 (_tuple -> { positional_args } .)
    TRUE            reduce using rule 149 (_tuple -> { positional_args } .)
    FLOAT           reduce using rule 149 (_tuple -> { positional_args } .)
    INT             reduce using rule 149 (_tuple -> { positional_args } .)
    NULL            reduce using rule 149 (_tuple -> { positional_args } .)
    #               reduce using rule 149 (_tuple -> { positional_args } .)
    NEW             reduce using rule 149 (_tuple -> { positional_args } .)
    PYTHON_CODE_EXEC reduce using rule 149 (_tuple -> { positional_args } .)
    PYTHON_CODE     reduce using rule 149 (_tuple -> { positional_args } .)
    PHPSTART        reduce using rule 149 (_tuple -> { positional_args } .)
    LIMPORT         reduce using rule 149 (_tuple -> { positional_args } .)
    IMPORT          reduce using rule 149 (_tuple -> { positional_args } .)
    RETURN          reduce using rule 149 (_tuple -> { positional_args } .)
    DEL             reduce using rule 149 (_tuple -> { positional_args } .)
    FOREACH         reduce using rule 149 (_tuple -> { positional_args } .)
    FOR             reduce using rule 149 (_tuple -> { positional_args } .)
    DEBUG           reduce using rule 149 (_tuple -> { positional_args } .)
    SKIP            reduce using rule 149 (_tuple -> { positional_args } .)
    BREAK           reduce using rule 149 (_tuple -> { positional_args } .)
    LET             reduce using rule 149 (_tuple -> { positional_args } .)
    WHILE           reduce using rule 149 (_tuple -> { positional_args } .)
    NAMESPACE       reduce using rule 149 (_tuple -> { positional_args } .)
    CLASS           reduce using rule 149 (_tuple -> { positional_args } .)
    FUNC            reduce using rule 149 (_tuple -> { positional_args } .)
    INIT            reduce using rule 149 (_tuple -> { positional_args } .)
    IF              reduce using rule 149 (_tuple -> { positional_args } .)
    $end            reduce using rule 149 (_tuple -> { positional_args } .)
    ;               reduce using rule 149 (_tuple -> { positional_args } .)
    ,               reduce using rule 149 (_tuple -> { positional_args } .)
    PHPEND          reduce using rule 149 (_tuple -> { positional_args } .)
    }               reduce using rule 149 (_tuple -> { positional_args } .)
    )               reduce using rule 149 (_tuple -> { positional_args } .)
    HTMLEND         reduce using rule 149 (_tuple -> { positional_args } .)
    SARROW          reduce using rule 149 (_tuple -> { positional_args } .)
    ]               reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_DIV          reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_MOD          reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_MUL          reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_SUB          reduce using rule 149 (_tuple -> { positional_args } .)
    EQ_ADD          reduce using rule 149 (_tuple -> { positional_args } .)
    =               reduce using rule 149 (_tuple -> { positional_args } .)
    AS              reduce using rule 149 (_tuple -> { positional_args } .)


state 241

    (108) for_loop -> FOR ( expression . ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 299
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 242

    (114) variable_assignment -> LET get_index = . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 300
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 243

    (115) variable_assignment -> LET ID : . ID = expression ;
    ID              shift and go to state 301


state 244

    (109) while_loop -> WHILE ( expression . ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 302
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 245

    (129) conditional -> if_statement else_if_loop else_statement .
    ?               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    *               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    &               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    $               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    HTMLSTART       reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    PHPSTART        reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    LIMPORT         reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    .               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    IMPORT          reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    RETURN          reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    DEL             reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    FOREACH         reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    FOR             reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    DEBUG           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    SKIP            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    BREAK           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    LET             reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    WHILE           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    NAMESPACE       reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    INIT            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    CHAR            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    NULL            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    #               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    NEW             reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE_EXEC reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    PHPEND          reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 129 (conditional -> if_statement else_if_loop else_statement .)


state 246

    (134) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    ?               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    *               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    &               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    $               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    HTMLSTART       reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    PHPSTART        reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    LIMPORT         reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    .               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    IMPORT          reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    RETURN          reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    DEL             reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    FOREACH         reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    FOR             reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    DEBUG           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    SKIP            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    BREAK           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    LET             reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    WHILE           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    NAMESPACE       reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    INIT            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    CHAR            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    NULL            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    #               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    NEW             reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    PHPEND          reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 134 (else_if_loop -> else_if_loop else_if_statement .)


state 247

    (136) else_statement -> ELSE { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 303
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 248

    (135) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 304


state 249

    (103) class_declaration -> NAMESPACE ID ; .
    ?               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    (               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    !               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    +               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    -               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    *               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    &               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    ID              reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    $               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    HTMLSTART       reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    PHPSTART        reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    LIMPORT         reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    .               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    IMPORT          reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    RETURN          reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    DEL             reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    FOREACH         reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    FOR             reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    DEBUG           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    SKIP            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    BREAK           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    LET             reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    WHILE           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    NAMESPACE       reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    CLASS           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    FUNC            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    INIT            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    [               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    {               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    STRING          reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    CHAR            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    FALSE           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    TRUE            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    FLOAT           reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    INT             reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    NULL            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    #               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    NEW             reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    PYTHON_CODE_EXEC reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    PYTHON_CODE     reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    IF              reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    $end            reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    PHPEND          reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)
    }               reduce using rule 103 (class_declaration -> NAMESPACE ID ; .)


state 250

    (104) class_declaration -> NAMESPACE ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 305
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 251

    (105) class_declaration -> CLASS ID EXTENDS . ID { program }
    ID              shift and go to state 306


state 252

    (106) class_declaration -> CLASS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 307
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 253

    (89) function_declaration -> FUNC ID COLON_COLON . ID ( empty ) { program } TARROW expression
    (90) function_declaration -> FUNC ID COLON_COLON . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 308


state 254

    (96) function_declaration -> FUNC ID ( . empty ) { program }
    (97) function_declaration -> FUNC ID ( . empty ) : expression { program }
    (98) function_declaration -> FUNC ID ( . function_arguments ) { program }
    (99) function_declaration -> FUNC ID ( . function_arguments ) : expression { program }
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               reduce using rule 169 (empty -> .)
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 309
    expression                     shift and go to state 86
    function_arguments             shift and go to state 310
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 255

    (91) function_declaration -> INIT ( function_arguments . ) { program } ;
    )               shift and go to state 311


state 256

    (142) assoc_array -> [ assoc_array_items ] .
    >               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    <               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    &               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    |               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_GREATER      reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_LESS         reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    NOT_EQEQ        reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQEQ            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    %               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    *               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    /               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    -               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    +               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    .               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    COLON_COLON     reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ^               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    [               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    (               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    $               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ID              reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    !               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ?               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    HTMLSTART       reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    {               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    STRING          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    CHAR            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    FALSE           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    TRUE            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    FLOAT           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    INT             reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    NULL            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    #               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    NEW             reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    PYTHON_CODE_EXEC reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    PYTHON_CODE     reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    PHPSTART        reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    LIMPORT         reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    IMPORT          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    RETURN          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    DEL             reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    FOREACH         reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    FOR             reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    DEBUG           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    SKIP            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    BREAK           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    LET             reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    WHILE           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    NAMESPACE       reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    CLASS           reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    FUNC            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    INIT            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    IF              reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    $end            reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ;               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ,               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    PHPEND          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    }               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    )               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    HTMLEND         reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    SARROW          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    ]               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_DIV          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_MOD          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_MUL          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_SUB          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    EQ_ADD          reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    =               reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)
    AS              reduce using rule 142 (assoc_array -> [ assoc_array_items ] .)


state 257

    (145) assoc_array_items -> assoc_array_items , . expression SARROW expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 312
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 258

    (143) assoc_array -> [ empty ] .
    >               reduce using rule 143 (assoc_array -> [ empty ] .)
    <               reduce using rule 143 (assoc_array -> [ empty ] .)
    &               reduce using rule 143 (assoc_array -> [ empty ] .)
    |               reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_GREATER      reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_LESS         reduce using rule 143 (assoc_array -> [ empty ] .)
    NOT_EQEQ        reduce using rule 143 (assoc_array -> [ empty ] .)
    EQEQ            reduce using rule 143 (assoc_array -> [ empty ] .)
    %               reduce using rule 143 (assoc_array -> [ empty ] .)
    *               reduce using rule 143 (assoc_array -> [ empty ] .)
    /               reduce using rule 143 (assoc_array -> [ empty ] .)
    -               reduce using rule 143 (assoc_array -> [ empty ] .)
    +               reduce using rule 143 (assoc_array -> [ empty ] .)
    .               reduce using rule 143 (assoc_array -> [ empty ] .)
    COLON_COLON     reduce using rule 143 (assoc_array -> [ empty ] .)
    ^               reduce using rule 143 (assoc_array -> [ empty ] .)
    [               reduce using rule 143 (assoc_array -> [ empty ] .)
    (               reduce using rule 143 (assoc_array -> [ empty ] .)
    $               reduce using rule 143 (assoc_array -> [ empty ] .)
    ID              reduce using rule 143 (assoc_array -> [ empty ] .)
    !               reduce using rule 143 (assoc_array -> [ empty ] .)
    ?               reduce using rule 143 (assoc_array -> [ empty ] .)
    HTMLSTART       reduce using rule 143 (assoc_array -> [ empty ] .)
    {               reduce using rule 143 (assoc_array -> [ empty ] .)
    STRING          reduce using rule 143 (assoc_array -> [ empty ] .)
    CHAR            reduce using rule 143 (assoc_array -> [ empty ] .)
    FALSE           reduce using rule 143 (assoc_array -> [ empty ] .)
    TRUE            reduce using rule 143 (assoc_array -> [ empty ] .)
    FLOAT           reduce using rule 143 (assoc_array -> [ empty ] .)
    INT             reduce using rule 143 (assoc_array -> [ empty ] .)
    NULL            reduce using rule 143 (assoc_array -> [ empty ] .)
    #               reduce using rule 143 (assoc_array -> [ empty ] .)
    NEW             reduce using rule 143 (assoc_array -> [ empty ] .)
    PYTHON_CODE_EXEC reduce using rule 143 (assoc_array -> [ empty ] .)
    PYTHON_CODE     reduce using rule 143 (assoc_array -> [ empty ] .)
    PHPSTART        reduce using rule 143 (assoc_array -> [ empty ] .)
    LIMPORT         reduce using rule 143 (assoc_array -> [ empty ] .)
    IMPORT          reduce using rule 143 (assoc_array -> [ empty ] .)
    RETURN          reduce using rule 143 (assoc_array -> [ empty ] .)
    DEL             reduce using rule 143 (assoc_array -> [ empty ] .)
    FOREACH         reduce using rule 143 (assoc_array -> [ empty ] .)
    FOR             reduce using rule 143 (assoc_array -> [ empty ] .)
    DEBUG           reduce using rule 143 (assoc_array -> [ empty ] .)
    SKIP            reduce using rule 143 (assoc_array -> [ empty ] .)
    BREAK           reduce using rule 143 (assoc_array -> [ empty ] .)
    LET             reduce using rule 143 (assoc_array -> [ empty ] .)
    WHILE           reduce using rule 143 (assoc_array -> [ empty ] .)
    NAMESPACE       reduce using rule 143 (assoc_array -> [ empty ] .)
    CLASS           reduce using rule 143 (assoc_array -> [ empty ] .)
    FUNC            reduce using rule 143 (assoc_array -> [ empty ] .)
    INIT            reduce using rule 143 (assoc_array -> [ empty ] .)
    IF              reduce using rule 143 (assoc_array -> [ empty ] .)
    $end            reduce using rule 143 (assoc_array -> [ empty ] .)
    ;               reduce using rule 143 (assoc_array -> [ empty ] .)
    ,               reduce using rule 143 (assoc_array -> [ empty ] .)
    PHPEND          reduce using rule 143 (assoc_array -> [ empty ] .)
    }               reduce using rule 143 (assoc_array -> [ empty ] .)
    )               reduce using rule 143 (assoc_array -> [ empty ] .)
    HTMLEND         reduce using rule 143 (assoc_array -> [ empty ] .)
    SARROW          reduce using rule 143 (assoc_array -> [ empty ] .)
    ]               reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_DIV          reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_MOD          reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_MUL          reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_SUB          reduce using rule 143 (assoc_array -> [ empty ] .)
    EQ_ADD          reduce using rule 143 (assoc_array -> [ empty ] .)
    =               reduce using rule 143 (assoc_array -> [ empty ] .)
    AS              reduce using rule 143 (assoc_array -> [ empty ] .)


state 259

    (150) _list -> [ positional_args , . ]
    (111) positional_args -> positional_args , . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ]               shift and go to state 313
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 275
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 260

    (151) _list -> [ positional_args ] .
    >               reduce using rule 151 (_list -> [ positional_args ] .)
    <               reduce using rule 151 (_list -> [ positional_args ] .)
    &               reduce using rule 151 (_list -> [ positional_args ] .)
    |               reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 151 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 151 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 151 (_list -> [ positional_args ] .)
    %               reduce using rule 151 (_list -> [ positional_args ] .)
    *               reduce using rule 151 (_list -> [ positional_args ] .)
    /               reduce using rule 151 (_list -> [ positional_args ] .)
    -               reduce using rule 151 (_list -> [ positional_args ] .)
    +               reduce using rule 151 (_list -> [ positional_args ] .)
    .               reduce using rule 151 (_list -> [ positional_args ] .)
    COLON_COLON     reduce using rule 151 (_list -> [ positional_args ] .)
    ^               reduce using rule 151 (_list -> [ positional_args ] .)
    [               reduce using rule 151 (_list -> [ positional_args ] .)
    (               reduce using rule 151 (_list -> [ positional_args ] .)
    $               reduce using rule 151 (_list -> [ positional_args ] .)
    ID              reduce using rule 151 (_list -> [ positional_args ] .)
    !               reduce using rule 151 (_list -> [ positional_args ] .)
    ?               reduce using rule 151 (_list -> [ positional_args ] .)
    HTMLSTART       reduce using rule 151 (_list -> [ positional_args ] .)
    {               reduce using rule 151 (_list -> [ positional_args ] .)
    STRING          reduce using rule 151 (_list -> [ positional_args ] .)
    CHAR            reduce using rule 151 (_list -> [ positional_args ] .)
    FALSE           reduce using rule 151 (_list -> [ positional_args ] .)
    TRUE            reduce using rule 151 (_list -> [ positional_args ] .)
    FLOAT           reduce using rule 151 (_list -> [ positional_args ] .)
    INT             reduce using rule 151 (_list -> [ positional_args ] .)
    NULL            reduce using rule 151 (_list -> [ positional_args ] .)
    #               reduce using rule 151 (_list -> [ positional_args ] .)
    NEW             reduce using rule 151 (_list -> [ positional_args ] .)
    PYTHON_CODE_EXEC reduce using rule 151 (_list -> [ positional_args ] .)
    PYTHON_CODE     reduce using rule 151 (_list -> [ positional_args ] .)
    PHPSTART        reduce using rule 151 (_list -> [ positional_args ] .)
    LIMPORT         reduce using rule 151 (_list -> [ positional_args ] .)
    IMPORT          reduce using rule 151 (_list -> [ positional_args ] .)
    RETURN          reduce using rule 151 (_list -> [ positional_args ] .)
    DEL             reduce using rule 151 (_list -> [ positional_args ] .)
    FOREACH         reduce using rule 151 (_list -> [ positional_args ] .)
    FOR             reduce using rule 151 (_list -> [ positional_args ] .)
    DEBUG           reduce using rule 151 (_list -> [ positional_args ] .)
    SKIP            reduce using rule 151 (_list -> [ positional_args ] .)
    BREAK           reduce using rule 151 (_list -> [ positional_args ] .)
    LET             reduce using rule 151 (_list -> [ positional_args ] .)
    WHILE           reduce using rule 151 (_list -> [ positional_args ] .)
    NAMESPACE       reduce using rule 151 (_list -> [ positional_args ] .)
    CLASS           reduce using rule 151 (_list -> [ positional_args ] .)
    FUNC            reduce using rule 151 (_list -> [ positional_args ] .)
    INIT            reduce using rule 151 (_list -> [ positional_args ] .)
    IF              reduce using rule 151 (_list -> [ positional_args ] .)
    $end            reduce using rule 151 (_list -> [ positional_args ] .)
    ;               reduce using rule 151 (_list -> [ positional_args ] .)
    ,               reduce using rule 151 (_list -> [ positional_args ] .)
    PHPEND          reduce using rule 151 (_list -> [ positional_args ] .)
    }               reduce using rule 151 (_list -> [ positional_args ] .)
    )               reduce using rule 151 (_list -> [ positional_args ] .)
    HTMLEND         reduce using rule 151 (_list -> [ positional_args ] .)
    SARROW          reduce using rule 151 (_list -> [ positional_args ] .)
    ]               reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_DIV          reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_MOD          reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_MUL          reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_SUB          reduce using rule 151 (_list -> [ positional_args ] .)
    EQ_ADD          reduce using rule 151 (_list -> [ positional_args ] .)
    =               reduce using rule 151 (_list -> [ positional_args ] .)
    AS              reduce using rule 151 (_list -> [ positional_args ] .)


state 261

    (144) assoc_array_items -> expression SARROW . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 314
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 262

    (77) function_call -> # DEPENDS expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    ;               reduce using rule 77 (function_call -> # DEPENDS expression .)
    PHPSTART        reduce using rule 77 (function_call -> # DEPENDS expression .)
    LIMPORT         reduce using rule 77 (function_call -> # DEPENDS expression .)
    IMPORT          reduce using rule 77 (function_call -> # DEPENDS expression .)
    RETURN          reduce using rule 77 (function_call -> # DEPENDS expression .)
    DEL             reduce using rule 77 (function_call -> # DEPENDS expression .)
    FOREACH         reduce using rule 77 (function_call -> # DEPENDS expression .)
    FOR             reduce using rule 77 (function_call -> # DEPENDS expression .)
    DEBUG           reduce using rule 77 (function_call -> # DEPENDS expression .)
    SKIP            reduce using rule 77 (function_call -> # DEPENDS expression .)
    BREAK           reduce using rule 77 (function_call -> # DEPENDS expression .)
    LET             reduce using rule 77 (function_call -> # DEPENDS expression .)
    WHILE           reduce using rule 77 (function_call -> # DEPENDS expression .)
    NAMESPACE       reduce using rule 77 (function_call -> # DEPENDS expression .)
    CLASS           reduce using rule 77 (function_call -> # DEPENDS expression .)
    FUNC            reduce using rule 77 (function_call -> # DEPENDS expression .)
    INIT            reduce using rule 77 (function_call -> # DEPENDS expression .)
    IF              reduce using rule 77 (function_call -> # DEPENDS expression .)
    $end            reduce using rule 77 (function_call -> # DEPENDS expression .)
    ,               reduce using rule 77 (function_call -> # DEPENDS expression .)
    PHPEND          reduce using rule 77 (function_call -> # DEPENDS expression .)
    }               reduce using rule 77 (function_call -> # DEPENDS expression .)
    )               reduce using rule 77 (function_call -> # DEPENDS expression .)
    HTMLEND         reduce using rule 77 (function_call -> # DEPENDS expression .)
    SARROW          reduce using rule 77 (function_call -> # DEPENDS expression .)
    ]               reduce using rule 77 (function_call -> # DEPENDS expression .)
    EQ_DIV          reduce using rule 77 (function_call -> # DEPENDS expression .)
    EQ_MOD          reduce using rule 77 (function_call -> # DEPENDS expression .)
    EQ_MUL          reduce using rule 77 (function_call -> # DEPENDS expression .)
    EQ_SUB          reduce using rule 77 (function_call -> # DEPENDS expression .)
    EQ_ADD          reduce using rule 77 (function_call -> # DEPENDS expression .)
    =               reduce using rule 77 (function_call -> # DEPENDS expression .)
    AS              reduce using rule 77 (function_call -> # DEPENDS expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 263

    (78) function_call -> # DEFINE expression . ? ID
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ?               shift and go to state 315
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 264

    (80) function_call -> NEW expression ( . empty )
    (81) function_call -> NEW expression ( . function_arguments )
    (72) function_call -> expression ( . empty ) FARROW { program }
    (79) function_call -> expression ( . empty )
    (86) function_call -> expression ( . function_arguments ) FARROW { program }
    (36) expression -> ( . expression )
    (152) _numpy -> ( . , )
    (153) _numpy -> ( . )
    (154) _numpy -> ( . expression , )
    (155) _numpy -> ( . items , )
    (156) _numpy -> ( . items )
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (157) items -> . expression , expression
    (158) items -> . items , expression
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               shift and go to state 119
    )               reduce using rule 169 (empty -> .)
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 200
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 197
    empty                          shift and go to state 316
    function_arguments             shift and go to state 317
    items                          shift and go to state 120
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 265

    (132) if_statement -> IF ( expression . ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 318
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 266

    (84) function_call -> $ ID TARROW . ID ( empty )
    (85) function_call -> $ ID TARROW . ID ( function_arguments )
    (73) function_call -> ID TARROW . ID ( function_arguments )
    (76) function_call -> ID TARROW . ID
    ID              shift and go to state 319


state 267

    (112) kwargs -> ID = expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               reduce using rule 112 (kwargs -> ID = expression .)
    ;               reduce using rule 112 (kwargs -> ID = expression .)
    .               reduce using rule 112 (kwargs -> ID = expression .)
    ^               reduce using rule 112 (kwargs -> ID = expression .)
    [               reduce using rule 112 (kwargs -> ID = expression .)
    (               reduce using rule 112 (kwargs -> ID = expression .)
    $               reduce using rule 112 (kwargs -> ID = expression .)
    ID              reduce using rule 112 (kwargs -> ID = expression .)
    ?               reduce using rule 112 (kwargs -> ID = expression .)
    HTMLSTART       reduce using rule 112 (kwargs -> ID = expression .)
    {               reduce using rule 112 (kwargs -> ID = expression .)
    STRING          reduce using rule 112 (kwargs -> ID = expression .)
    CHAR            reduce using rule 112 (kwargs -> ID = expression .)
    FALSE           reduce using rule 112 (kwargs -> ID = expression .)
    TRUE            reduce using rule 112 (kwargs -> ID = expression .)
    FLOAT           reduce using rule 112 (kwargs -> ID = expression .)
    INT             reduce using rule 112 (kwargs -> ID = expression .)
    NULL            reduce using rule 112 (kwargs -> ID = expression .)
    #               reduce using rule 112 (kwargs -> ID = expression .)
    NEW             reduce using rule 112 (kwargs -> ID = expression .)
    PYTHON_CODE_EXEC reduce using rule 112 (kwargs -> ID = expression .)
    PYTHON_CODE     reduce using rule 112 (kwargs -> ID = expression .)
    PHPSTART        reduce using rule 112 (kwargs -> ID = expression .)
    LIMPORT         reduce using rule 112 (kwargs -> ID = expression .)
    IMPORT          reduce using rule 112 (kwargs -> ID = expression .)
    RETURN          reduce using rule 112 (kwargs -> ID = expression .)
    DEL             reduce using rule 112 (kwargs -> ID = expression .)
    FOREACH         reduce using rule 112 (kwargs -> ID = expression .)
    FOR             reduce using rule 112 (kwargs -> ID = expression .)
    DEBUG           reduce using rule 112 (kwargs -> ID = expression .)
    SKIP            reduce using rule 112 (kwargs -> ID = expression .)
    BREAK           reduce using rule 112 (kwargs -> ID = expression .)
    LET             reduce using rule 112 (kwargs -> ID = expression .)
    WHILE           reduce using rule 112 (kwargs -> ID = expression .)
    NAMESPACE       reduce using rule 112 (kwargs -> ID = expression .)
    CLASS           reduce using rule 112 (kwargs -> ID = expression .)
    FUNC            reduce using rule 112 (kwargs -> ID = expression .)
    INIT            reduce using rule 112 (kwargs -> ID = expression .)
    IF              reduce using rule 112 (kwargs -> ID = expression .)
    $end            reduce using rule 112 (kwargs -> ID = expression .)
    PHPEND          reduce using rule 112 (kwargs -> ID = expression .)
    }               reduce using rule 112 (kwargs -> ID = expression .)
    )               reduce using rule 112 (kwargs -> ID = expression .)
    HTMLEND         reduce using rule 112 (kwargs -> ID = expression .)
    SARROW          reduce using rule 112 (kwargs -> ID = expression .)
    ]               reduce using rule 112 (kwargs -> ID = expression .)
    EQ_DIV          reduce using rule 112 (kwargs -> ID = expression .)
    EQ_MOD          reduce using rule 112 (kwargs -> ID = expression .)
    EQ_MUL          reduce using rule 112 (kwargs -> ID = expression .)
    EQ_SUB          reduce using rule 112 (kwargs -> ID = expression .)
    EQ_ADD          reduce using rule 112 (kwargs -> ID = expression .)
    =               reduce using rule 112 (kwargs -> ID = expression .)
    AS              reduce using rule 112 (kwargs -> ID = expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 268

    (147) get_index -> expression [ expression ] .
    EQ_DIV          reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_MOD          reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_MUL          reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_SUB          reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_ADD          reduce using rule 147 (get_index -> expression [ expression ] .)
    >               reduce using rule 147 (get_index -> expression [ expression ] .)
    <               reduce using rule 147 (get_index -> expression [ expression ] .)
    &               reduce using rule 147 (get_index -> expression [ expression ] .)
    |               reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_GREATER      reduce using rule 147 (get_index -> expression [ expression ] .)
    EQ_LESS         reduce using rule 147 (get_index -> expression [ expression ] .)
    NOT_EQEQ        reduce using rule 147 (get_index -> expression [ expression ] .)
    EQEQ            reduce using rule 147 (get_index -> expression [ expression ] .)
    %               reduce using rule 147 (get_index -> expression [ expression ] .)
    *               reduce using rule 147 (get_index -> expression [ expression ] .)
    /               reduce using rule 147 (get_index -> expression [ expression ] .)
    -               reduce using rule 147 (get_index -> expression [ expression ] .)
    +               reduce using rule 147 (get_index -> expression [ expression ] .)
    .               reduce using rule 147 (get_index -> expression [ expression ] .)
    COLON_COLON     reduce using rule 147 (get_index -> expression [ expression ] .)
    ^               reduce using rule 147 (get_index -> expression [ expression ] .)
    [               reduce using rule 147 (get_index -> expression [ expression ] .)
    (               reduce using rule 147 (get_index -> expression [ expression ] .)
    $               reduce using rule 147 (get_index -> expression [ expression ] .)
    ID              reduce using rule 147 (get_index -> expression [ expression ] .)
    !               reduce using rule 147 (get_index -> expression [ expression ] .)
    ?               reduce using rule 147 (get_index -> expression [ expression ] .)
    HTMLSTART       reduce using rule 147 (get_index -> expression [ expression ] .)
    {               reduce using rule 147 (get_index -> expression [ expression ] .)
    STRING          reduce using rule 147 (get_index -> expression [ expression ] .)
    CHAR            reduce using rule 147 (get_index -> expression [ expression ] .)
    FALSE           reduce using rule 147 (get_index -> expression [ expression ] .)
    TRUE            reduce using rule 147 (get_index -> expression [ expression ] .)
    FLOAT           reduce using rule 147 (get_index -> expression [ expression ] .)
    INT             reduce using rule 147 (get_index -> expression [ expression ] .)
    NULL            reduce using rule 147 (get_index -> expression [ expression ] .)
    #               reduce using rule 147 (get_index -> expression [ expression ] .)
    NEW             reduce using rule 147 (get_index -> expression [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 147 (get_index -> expression [ expression ] .)
    PYTHON_CODE     reduce using rule 147 (get_index -> expression [ expression ] .)
    PHPSTART        reduce using rule 147 (get_index -> expression [ expression ] .)
    LIMPORT         reduce using rule 147 (get_index -> expression [ expression ] .)
    IMPORT          reduce using rule 147 (get_index -> expression [ expression ] .)
    RETURN          reduce using rule 147 (get_index -> expression [ expression ] .)
    DEL             reduce using rule 147 (get_index -> expression [ expression ] .)
    FOREACH         reduce using rule 147 (get_index -> expression [ expression ] .)
    FOR             reduce using rule 147 (get_index -> expression [ expression ] .)
    DEBUG           reduce using rule 147 (get_index -> expression [ expression ] .)
    SKIP            reduce using rule 147 (get_index -> expression [ expression ] .)
    BREAK           reduce using rule 147 (get_index -> expression [ expression ] .)
    LET             reduce using rule 147 (get_index -> expression [ expression ] .)
    WHILE           reduce using rule 147 (get_index -> expression [ expression ] .)
    NAMESPACE       reduce using rule 147 (get_index -> expression [ expression ] .)
    CLASS           reduce using rule 147 (get_index -> expression [ expression ] .)
    FUNC            reduce using rule 147 (get_index -> expression [ expression ] .)
    INIT            reduce using rule 147 (get_index -> expression [ expression ] .)
    IF              reduce using rule 147 (get_index -> expression [ expression ] .)
    $end            reduce using rule 147 (get_index -> expression [ expression ] .)
    ;               reduce using rule 147 (get_index -> expression [ expression ] .)
    ,               reduce using rule 147 (get_index -> expression [ expression ] .)
    PHPEND          reduce using rule 147 (get_index -> expression [ expression ] .)
    }               reduce using rule 147 (get_index -> expression [ expression ] .)
    )               reduce using rule 147 (get_index -> expression [ expression ] .)
    HTMLEND         reduce using rule 147 (get_index -> expression [ expression ] .)
    SARROW          reduce using rule 147 (get_index -> expression [ expression ] .)
    ]               reduce using rule 147 (get_index -> expression [ expression ] .)
    =               reduce using rule 147 (get_index -> expression [ expression ] .)
    AS              reduce using rule 147 (get_index -> expression [ expression ] .)


state 269

    (72) function_call -> expression ( empty ) . FARROW { program }
    (79) function_call -> expression ( empty ) .
    FARROW          shift and go to state 320
    ;               reduce using rule 79 (function_call -> expression ( empty ) .)
    >               reduce using rule 79 (function_call -> expression ( empty ) .)
    <               reduce using rule 79 (function_call -> expression ( empty ) .)
    &               reduce using rule 79 (function_call -> expression ( empty ) .)
    |               reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 79 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 79 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 79 (function_call -> expression ( empty ) .)
    %               reduce using rule 79 (function_call -> expression ( empty ) .)
    *               reduce using rule 79 (function_call -> expression ( empty ) .)
    /               reduce using rule 79 (function_call -> expression ( empty ) .)
    -               reduce using rule 79 (function_call -> expression ( empty ) .)
    +               reduce using rule 79 (function_call -> expression ( empty ) .)
    .               reduce using rule 79 (function_call -> expression ( empty ) .)
    COLON_COLON     reduce using rule 79 (function_call -> expression ( empty ) .)
    ^               reduce using rule 79 (function_call -> expression ( empty ) .)
    [               reduce using rule 79 (function_call -> expression ( empty ) .)
    (               reduce using rule 79 (function_call -> expression ( empty ) .)
    $               reduce using rule 79 (function_call -> expression ( empty ) .)
    ID              reduce using rule 79 (function_call -> expression ( empty ) .)
    !               reduce using rule 79 (function_call -> expression ( empty ) .)
    ?               reduce using rule 79 (function_call -> expression ( empty ) .)
    HTMLSTART       reduce using rule 79 (function_call -> expression ( empty ) .)
    {               reduce using rule 79 (function_call -> expression ( empty ) .)
    STRING          reduce using rule 79 (function_call -> expression ( empty ) .)
    CHAR            reduce using rule 79 (function_call -> expression ( empty ) .)
    FALSE           reduce using rule 79 (function_call -> expression ( empty ) .)
    TRUE            reduce using rule 79 (function_call -> expression ( empty ) .)
    FLOAT           reduce using rule 79 (function_call -> expression ( empty ) .)
    INT             reduce using rule 79 (function_call -> expression ( empty ) .)
    NULL            reduce using rule 79 (function_call -> expression ( empty ) .)
    #               reduce using rule 79 (function_call -> expression ( empty ) .)
    NEW             reduce using rule 79 (function_call -> expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 79 (function_call -> expression ( empty ) .)
    PYTHON_CODE     reduce using rule 79 (function_call -> expression ( empty ) .)
    PHPSTART        reduce using rule 79 (function_call -> expression ( empty ) .)
    LIMPORT         reduce using rule 79 (function_call -> expression ( empty ) .)
    IMPORT          reduce using rule 79 (function_call -> expression ( empty ) .)
    RETURN          reduce using rule 79 (function_call -> expression ( empty ) .)
    DEL             reduce using rule 79 (function_call -> expression ( empty ) .)
    FOREACH         reduce using rule 79 (function_call -> expression ( empty ) .)
    FOR             reduce using rule 79 (function_call -> expression ( empty ) .)
    DEBUG           reduce using rule 79 (function_call -> expression ( empty ) .)
    SKIP            reduce using rule 79 (function_call -> expression ( empty ) .)
    BREAK           reduce using rule 79 (function_call -> expression ( empty ) .)
    LET             reduce using rule 79 (function_call -> expression ( empty ) .)
    WHILE           reduce using rule 79 (function_call -> expression ( empty ) .)
    NAMESPACE       reduce using rule 79 (function_call -> expression ( empty ) .)
    CLASS           reduce using rule 79 (function_call -> expression ( empty ) .)
    FUNC            reduce using rule 79 (function_call -> expression ( empty ) .)
    INIT            reduce using rule 79 (function_call -> expression ( empty ) .)
    IF              reduce using rule 79 (function_call -> expression ( empty ) .)
    $end            reduce using rule 79 (function_call -> expression ( empty ) .)
    ,               reduce using rule 79 (function_call -> expression ( empty ) .)
    PHPEND          reduce using rule 79 (function_call -> expression ( empty ) .)
    }               reduce using rule 79 (function_call -> expression ( empty ) .)
    )               reduce using rule 79 (function_call -> expression ( empty ) .)
    HTMLEND         reduce using rule 79 (function_call -> expression ( empty ) .)
    SARROW          reduce using rule 79 (function_call -> expression ( empty ) .)
    ]               reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_DIV          reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_MOD          reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_MUL          reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_SUB          reduce using rule 79 (function_call -> expression ( empty ) .)
    EQ_ADD          reduce using rule 79 (function_call -> expression ( empty ) .)
    =               reduce using rule 79 (function_call -> expression ( empty ) .)
    AS              reduce using rule 79 (function_call -> expression ( empty ) .)


state 270

    (86) function_call -> expression ( function_arguments ) . FARROW { program }
    FARROW          shift and go to state 321


state 271

    (87) function_call -> expression $ ID = . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 322
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 272

    (113) kwargs -> kwargs , id . = expression
    =               shift and go to state 323


state 273

    (166) id -> ID .
    =               reduce using rule 166 (id -> ID .)


state 274

    (101) function_arguments -> positional_args , kwargs .
    (113) kwargs -> kwargs . , id = expression
    ;               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    >               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    <               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    &               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    |               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_GREATER      reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_LESS         reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    NOT_EQEQ        reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQEQ            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    %               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    *               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    /               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    -               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    +               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    .               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    COLON_COLON     reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    ^               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    [               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    (               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    $               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    ID              reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    !               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    ?               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    HTMLSTART       reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    {               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    STRING          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    CHAR            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    FALSE           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    TRUE            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    FLOAT           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    INT             reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    NULL            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    #               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    NEW             reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    PYTHON_CODE_EXEC reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    PYTHON_CODE     reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    PHPSTART        reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    LIMPORT         reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    IMPORT          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    RETURN          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    DEL             reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    FOREACH         reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    FOR             reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    DEBUG           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    SKIP            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    BREAK           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    LET             reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    WHILE           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    NAMESPACE       reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    CLASS           reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    FUNC            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    INIT            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    IF              reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    $end            reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    ,               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    PHPEND          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    }               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    )               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    HTMLEND         reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    SARROW          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    ]               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_DIV          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_MOD          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_MUL          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_SUB          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    EQ_ADD          reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    =               reduce using rule 101 (function_arguments -> positional_args , kwargs .)
    AS              reduce using rule 101 (function_arguments -> positional_args , kwargs .)


state 275

    (111) positional_args -> positional_args , expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               reduce using rule 111 (positional_args -> positional_args , expression .)
    .               reduce using rule 111 (positional_args -> positional_args , expression .)
    ^               reduce using rule 111 (positional_args -> positional_args , expression .)
    [               reduce using rule 111 (positional_args -> positional_args , expression .)
    (               reduce using rule 111 (positional_args -> positional_args , expression .)
    $               reduce using rule 111 (positional_args -> positional_args , expression .)
    ID              reduce using rule 111 (positional_args -> positional_args , expression .)
    ?               reduce using rule 111 (positional_args -> positional_args , expression .)
    HTMLSTART       reduce using rule 111 (positional_args -> positional_args , expression .)
    {               reduce using rule 111 (positional_args -> positional_args , expression .)
    STRING          reduce using rule 111 (positional_args -> positional_args , expression .)
    CHAR            reduce using rule 111 (positional_args -> positional_args , expression .)
    FALSE           reduce using rule 111 (positional_args -> positional_args , expression .)
    TRUE            reduce using rule 111 (positional_args -> positional_args , expression .)
    FLOAT           reduce using rule 111 (positional_args -> positional_args , expression .)
    INT             reduce using rule 111 (positional_args -> positional_args , expression .)
    NULL            reduce using rule 111 (positional_args -> positional_args , expression .)
    #               reduce using rule 111 (positional_args -> positional_args , expression .)
    NEW             reduce using rule 111 (positional_args -> positional_args , expression .)
    PYTHON_CODE_EXEC reduce using rule 111 (positional_args -> positional_args , expression .)
    PYTHON_CODE     reduce using rule 111 (positional_args -> positional_args , expression .)
    PHPSTART        reduce using rule 111 (positional_args -> positional_args , expression .)
    LIMPORT         reduce using rule 111 (positional_args -> positional_args , expression .)
    IMPORT          reduce using rule 111 (positional_args -> positional_args , expression .)
    RETURN          reduce using rule 111 (positional_args -> positional_args , expression .)
    DEL             reduce using rule 111 (positional_args -> positional_args , expression .)
    FOREACH         reduce using rule 111 (positional_args -> positional_args , expression .)
    FOR             reduce using rule 111 (positional_args -> positional_args , expression .)
    DEBUG           reduce using rule 111 (positional_args -> positional_args , expression .)
    SKIP            reduce using rule 111 (positional_args -> positional_args , expression .)
    BREAK           reduce using rule 111 (positional_args -> positional_args , expression .)
    LET             reduce using rule 111 (positional_args -> positional_args , expression .)
    WHILE           reduce using rule 111 (positional_args -> positional_args , expression .)
    NAMESPACE       reduce using rule 111 (positional_args -> positional_args , expression .)
    CLASS           reduce using rule 111 (positional_args -> positional_args , expression .)
    FUNC            reduce using rule 111 (positional_args -> positional_args , expression .)
    INIT            reduce using rule 111 (positional_args -> positional_args , expression .)
    IF              reduce using rule 111 (positional_args -> positional_args , expression .)
    $end            reduce using rule 111 (positional_args -> positional_args , expression .)
    ,               reduce using rule 111 (positional_args -> positional_args , expression .)
    PHPEND          reduce using rule 111 (positional_args -> positional_args , expression .)
    }               reduce using rule 111 (positional_args -> positional_args , expression .)
    ]               reduce using rule 111 (positional_args -> positional_args , expression .)
    )               reduce using rule 111 (positional_args -> positional_args , expression .)
    HTMLEND         reduce using rule 111 (positional_args -> positional_args , expression .)
    SARROW          reduce using rule 111 (positional_args -> positional_args , expression .)
    EQ_DIV          reduce using rule 111 (positional_args -> positional_args , expression .)
    EQ_MOD          reduce using rule 111 (positional_args -> positional_args , expression .)
    EQ_MUL          reduce using rule 111 (positional_args -> positional_args , expression .)
    EQ_SUB          reduce using rule 111 (positional_args -> positional_args , expression .)
    EQ_ADD          reduce using rule 111 (positional_args -> positional_args , expression .)
    =               reduce using rule 111 (positional_args -> positional_args , expression .)
    AS              reduce using rule 111 (positional_args -> positional_args , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    positional_args                shift and go to state 109
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 276

    (118) variable_operation -> get_index EQ_DIV expression ; .
    ?               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    (               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    !               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    +               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    -               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    *               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    &               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    ID              reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    $               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    HTMLSTART       reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    PHPSTART        reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    LIMPORT         reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    .               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    IMPORT          reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    RETURN          reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    DEL             reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    FOREACH         reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    FOR             reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    DEBUG           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    SKIP            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    BREAK           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    LET             reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    WHILE           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    CLASS           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    FUNC            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    INIT            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    [               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    {               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    STRING          reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    CHAR            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    FALSE           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    TRUE            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    FLOAT           reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    INT             reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    NULL            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    #               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    NEW             reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    IF              reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    $end            reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    PHPEND          reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)
    }               reduce using rule 118 (variable_operation -> get_index EQ_DIV expression ; .)


state 277

    (120) variable_operation -> get_index EQ_MOD expression ; .
    ?               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    (               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    !               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    +               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    -               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    *               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    &               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    ID              reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    $               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    HTMLSTART       reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    PHPSTART        reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    LIMPORT         reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    .               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    IMPORT          reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    RETURN          reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    DEL             reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    FOREACH         reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    FOR             reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    DEBUG           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    SKIP            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    BREAK           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    LET             reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    WHILE           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    CLASS           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    FUNC            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    INIT            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    [               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    {               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    STRING          reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    CHAR            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    FALSE           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    TRUE            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    FLOAT           reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    INT             reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    NULL            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    #               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    NEW             reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    IF              reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    $end            reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    PHPEND          reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)
    }               reduce using rule 120 (variable_operation -> get_index EQ_MOD expression ; .)


state 278

    (122) variable_operation -> get_index EQ_MUL expression ; .
    ?               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    (               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    !               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    +               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    -               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    *               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    &               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    ID              reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    $               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    HTMLSTART       reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    PHPSTART        reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    LIMPORT         reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    .               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    IMPORT          reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    RETURN          reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    DEL             reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    FOREACH         reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    FOR             reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    DEBUG           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    SKIP            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    BREAK           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    LET             reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    WHILE           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    CLASS           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    FUNC            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    INIT            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    [               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    {               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    STRING          reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    CHAR            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    FALSE           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    TRUE            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    FLOAT           reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    INT             reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    NULL            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    #               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    NEW             reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    IF              reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    $end            reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    PHPEND          reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)
    }               reduce using rule 122 (variable_operation -> get_index EQ_MUL expression ; .)


state 279

    (124) variable_operation -> get_index EQ_SUB expression ; .
    ?               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    (               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    !               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    +               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    -               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    *               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    &               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    ID              reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    $               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    HTMLSTART       reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    PHPSTART        reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    LIMPORT         reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    .               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    IMPORT          reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    RETURN          reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    DEL             reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    FOREACH         reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    FOR             reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    DEBUG           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    SKIP            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    BREAK           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    LET             reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    WHILE           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    CLASS           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    FUNC            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    INIT            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    [               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    {               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    STRING          reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    CHAR            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    FALSE           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    TRUE            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    FLOAT           reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    INT             reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    NULL            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    #               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    NEW             reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    IF              reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    $end            reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    PHPEND          reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)
    }               reduce using rule 124 (variable_operation -> get_index EQ_SUB expression ; .)


state 280

    (126) variable_operation -> get_index EQ_ADD expression ; .
    ?               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    (               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    !               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    +               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    -               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    *               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    &               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    ID              reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    $               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    HTMLSTART       reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    PHPSTART        reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    LIMPORT         reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    .               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    IMPORT          reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    RETURN          reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    DEL             reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    FOREACH         reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    FOR             reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    DEBUG           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    SKIP            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    BREAK           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    LET             reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    WHILE           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    CLASS           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    FUNC            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    INIT            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    [               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    {               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    STRING          reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    CHAR            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    FALSE           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    TRUE            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    FLOAT           reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    INT             reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    NULL            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    #               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    NEW             reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    IF              reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    $end            reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    PHPEND          reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)
    }               reduce using rule 126 (variable_operation -> get_index EQ_ADD expression ; .)


state 281

    (157) items -> expression , expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               reduce using rule 157 (items -> expression , expression .)
    )               reduce using rule 157 (items -> expression , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 282

    (154) _numpy -> ( expression , ) .
    >               reduce using rule 154 (_numpy -> ( expression , ) .)
    <               reduce using rule 154 (_numpy -> ( expression , ) .)
    &               reduce using rule 154 (_numpy -> ( expression , ) .)
    |               reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_GREATER      reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_LESS         reduce using rule 154 (_numpy -> ( expression , ) .)
    NOT_EQEQ        reduce using rule 154 (_numpy -> ( expression , ) .)
    EQEQ            reduce using rule 154 (_numpy -> ( expression , ) .)
    %               reduce using rule 154 (_numpy -> ( expression , ) .)
    *               reduce using rule 154 (_numpy -> ( expression , ) .)
    /               reduce using rule 154 (_numpy -> ( expression , ) .)
    -               reduce using rule 154 (_numpy -> ( expression , ) .)
    +               reduce using rule 154 (_numpy -> ( expression , ) .)
    .               reduce using rule 154 (_numpy -> ( expression , ) .)
    COLON_COLON     reduce using rule 154 (_numpy -> ( expression , ) .)
    ^               reduce using rule 154 (_numpy -> ( expression , ) .)
    [               reduce using rule 154 (_numpy -> ( expression , ) .)
    (               reduce using rule 154 (_numpy -> ( expression , ) .)
    $               reduce using rule 154 (_numpy -> ( expression , ) .)
    ID              reduce using rule 154 (_numpy -> ( expression , ) .)
    !               reduce using rule 154 (_numpy -> ( expression , ) .)
    ?               reduce using rule 154 (_numpy -> ( expression , ) .)
    HTMLSTART       reduce using rule 154 (_numpy -> ( expression , ) .)
    {               reduce using rule 154 (_numpy -> ( expression , ) .)
    STRING          reduce using rule 154 (_numpy -> ( expression , ) .)
    CHAR            reduce using rule 154 (_numpy -> ( expression , ) .)
    FALSE           reduce using rule 154 (_numpy -> ( expression , ) .)
    TRUE            reduce using rule 154 (_numpy -> ( expression , ) .)
    FLOAT           reduce using rule 154 (_numpy -> ( expression , ) .)
    INT             reduce using rule 154 (_numpy -> ( expression , ) .)
    NULL            reduce using rule 154 (_numpy -> ( expression , ) .)
    #               reduce using rule 154 (_numpy -> ( expression , ) .)
    NEW             reduce using rule 154 (_numpy -> ( expression , ) .)
    PYTHON_CODE_EXEC reduce using rule 154 (_numpy -> ( expression , ) .)
    PYTHON_CODE     reduce using rule 154 (_numpy -> ( expression , ) .)
    PHPSTART        reduce using rule 154 (_numpy -> ( expression , ) .)
    LIMPORT         reduce using rule 154 (_numpy -> ( expression , ) .)
    IMPORT          reduce using rule 154 (_numpy -> ( expression , ) .)
    RETURN          reduce using rule 154 (_numpy -> ( expression , ) .)
    DEL             reduce using rule 154 (_numpy -> ( expression , ) .)
    FOREACH         reduce using rule 154 (_numpy -> ( expression , ) .)
    FOR             reduce using rule 154 (_numpy -> ( expression , ) .)
    DEBUG           reduce using rule 154 (_numpy -> ( expression , ) .)
    SKIP            reduce using rule 154 (_numpy -> ( expression , ) .)
    BREAK           reduce using rule 154 (_numpy -> ( expression , ) .)
    LET             reduce using rule 154 (_numpy -> ( expression , ) .)
    WHILE           reduce using rule 154 (_numpy -> ( expression , ) .)
    NAMESPACE       reduce using rule 154 (_numpy -> ( expression , ) .)
    CLASS           reduce using rule 154 (_numpy -> ( expression , ) .)
    FUNC            reduce using rule 154 (_numpy -> ( expression , ) .)
    INIT            reduce using rule 154 (_numpy -> ( expression , ) .)
    IF              reduce using rule 154 (_numpy -> ( expression , ) .)
    $end            reduce using rule 154 (_numpy -> ( expression , ) .)
    ;               reduce using rule 154 (_numpy -> ( expression , ) .)
    ,               reduce using rule 154 (_numpy -> ( expression , ) .)
    PHPEND          reduce using rule 154 (_numpy -> ( expression , ) .)
    }               reduce using rule 154 (_numpy -> ( expression , ) .)
    )               reduce using rule 154 (_numpy -> ( expression , ) .)
    HTMLEND         reduce using rule 154 (_numpy -> ( expression , ) .)
    SARROW          reduce using rule 154 (_numpy -> ( expression , ) .)
    ]               reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_DIV          reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_MOD          reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_MUL          reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_SUB          reduce using rule 154 (_numpy -> ( expression , ) .)
    EQ_ADD          reduce using rule 154 (_numpy -> ( expression , ) .)
    =               reduce using rule 154 (_numpy -> ( expression , ) .)
    AS              reduce using rule 154 (_numpy -> ( expression , ) .)


state 283

    (155) _numpy -> ( items , ) .
    >               reduce using rule 155 (_numpy -> ( items , ) .)
    <               reduce using rule 155 (_numpy -> ( items , ) .)
    &               reduce using rule 155 (_numpy -> ( items , ) .)
    |               reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_GREATER      reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_LESS         reduce using rule 155 (_numpy -> ( items , ) .)
    NOT_EQEQ        reduce using rule 155 (_numpy -> ( items , ) .)
    EQEQ            reduce using rule 155 (_numpy -> ( items , ) .)
    %               reduce using rule 155 (_numpy -> ( items , ) .)
    *               reduce using rule 155 (_numpy -> ( items , ) .)
    /               reduce using rule 155 (_numpy -> ( items , ) .)
    -               reduce using rule 155 (_numpy -> ( items , ) .)
    +               reduce using rule 155 (_numpy -> ( items , ) .)
    .               reduce using rule 155 (_numpy -> ( items , ) .)
    COLON_COLON     reduce using rule 155 (_numpy -> ( items , ) .)
    ^               reduce using rule 155 (_numpy -> ( items , ) .)
    [               reduce using rule 155 (_numpy -> ( items , ) .)
    (               reduce using rule 155 (_numpy -> ( items , ) .)
    $               reduce using rule 155 (_numpy -> ( items , ) .)
    ID              reduce using rule 155 (_numpy -> ( items , ) .)
    !               reduce using rule 155 (_numpy -> ( items , ) .)
    ?               reduce using rule 155 (_numpy -> ( items , ) .)
    HTMLSTART       reduce using rule 155 (_numpy -> ( items , ) .)
    {               reduce using rule 155 (_numpy -> ( items , ) .)
    STRING          reduce using rule 155 (_numpy -> ( items , ) .)
    CHAR            reduce using rule 155 (_numpy -> ( items , ) .)
    FALSE           reduce using rule 155 (_numpy -> ( items , ) .)
    TRUE            reduce using rule 155 (_numpy -> ( items , ) .)
    FLOAT           reduce using rule 155 (_numpy -> ( items , ) .)
    INT             reduce using rule 155 (_numpy -> ( items , ) .)
    NULL            reduce using rule 155 (_numpy -> ( items , ) .)
    #               reduce using rule 155 (_numpy -> ( items , ) .)
    NEW             reduce using rule 155 (_numpy -> ( items , ) .)
    PYTHON_CODE_EXEC reduce using rule 155 (_numpy -> ( items , ) .)
    PYTHON_CODE     reduce using rule 155 (_numpy -> ( items , ) .)
    PHPSTART        reduce using rule 155 (_numpy -> ( items , ) .)
    LIMPORT         reduce using rule 155 (_numpy -> ( items , ) .)
    IMPORT          reduce using rule 155 (_numpy -> ( items , ) .)
    RETURN          reduce using rule 155 (_numpy -> ( items , ) .)
    DEL             reduce using rule 155 (_numpy -> ( items , ) .)
    FOREACH         reduce using rule 155 (_numpy -> ( items , ) .)
    FOR             reduce using rule 155 (_numpy -> ( items , ) .)
    DEBUG           reduce using rule 155 (_numpy -> ( items , ) .)
    SKIP            reduce using rule 155 (_numpy -> ( items , ) .)
    BREAK           reduce using rule 155 (_numpy -> ( items , ) .)
    LET             reduce using rule 155 (_numpy -> ( items , ) .)
    WHILE           reduce using rule 155 (_numpy -> ( items , ) .)
    NAMESPACE       reduce using rule 155 (_numpy -> ( items , ) .)
    CLASS           reduce using rule 155 (_numpy -> ( items , ) .)
    FUNC            reduce using rule 155 (_numpy -> ( items , ) .)
    INIT            reduce using rule 155 (_numpy -> ( items , ) .)
    IF              reduce using rule 155 (_numpy -> ( items , ) .)
    $end            reduce using rule 155 (_numpy -> ( items , ) .)
    ;               reduce using rule 155 (_numpy -> ( items , ) .)
    ,               reduce using rule 155 (_numpy -> ( items , ) .)
    PHPEND          reduce using rule 155 (_numpy -> ( items , ) .)
    }               reduce using rule 155 (_numpy -> ( items , ) .)
    )               reduce using rule 155 (_numpy -> ( items , ) .)
    HTMLEND         reduce using rule 155 (_numpy -> ( items , ) .)
    SARROW          reduce using rule 155 (_numpy -> ( items , ) .)
    ]               reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_DIV          reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_MOD          reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_MUL          reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_SUB          reduce using rule 155 (_numpy -> ( items , ) .)
    EQ_ADD          reduce using rule 155 (_numpy -> ( items , ) .)
    =               reduce using rule 155 (_numpy -> ( items , ) .)
    AS              reduce using rule 155 (_numpy -> ( items , ) .)


state 284

    (158) items -> items , expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               reduce using rule 158 (items -> items , expression .)
    )               reduce using rule 158 (items -> items , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 285

    (119) variable_operation -> ID EQ_DIV expression ; .
    ?               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    (               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    !               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    +               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    -               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    *               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    &               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    ID              reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    $               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    HTMLSTART       reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    PHPSTART        reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    LIMPORT         reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    .               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    IMPORT          reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    RETURN          reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    DEL             reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    FOREACH         reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    FOR             reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    DEBUG           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    SKIP            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    BREAK           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    LET             reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    WHILE           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    CLASS           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    FUNC            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    INIT            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    [               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    {               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    STRING          reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    CHAR            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    FALSE           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    TRUE            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    FLOAT           reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    INT             reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    NULL            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    #               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    NEW             reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    IF              reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    $end            reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    PHPEND          reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)
    }               reduce using rule 119 (variable_operation -> ID EQ_DIV expression ; .)


state 286

    (121) variable_operation -> ID EQ_MOD expression ; .
    ?               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    (               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    !               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    +               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    -               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    *               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    &               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    ID              reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    $               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    HTMLSTART       reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    PHPSTART        reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    LIMPORT         reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    .               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    IMPORT          reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    RETURN          reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    DEL             reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    FOREACH         reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    FOR             reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    DEBUG           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    SKIP            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    BREAK           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    LET             reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    WHILE           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    CLASS           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    FUNC            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    INIT            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    [               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    {               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    STRING          reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    CHAR            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    FALSE           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    TRUE            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    FLOAT           reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    INT             reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    NULL            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    #               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    NEW             reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    IF              reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    $end            reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    PHPEND          reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)
    }               reduce using rule 121 (variable_operation -> ID EQ_MOD expression ; .)


state 287

    (123) variable_operation -> ID EQ_MUL expression ; .
    ?               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    (               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    !               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    +               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    -               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    *               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    &               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    ID              reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    $               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    HTMLSTART       reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    PHPSTART        reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    LIMPORT         reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    .               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    IMPORT          reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    RETURN          reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    DEL             reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    FOREACH         reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    FOR             reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    DEBUG           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    SKIP            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    BREAK           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    LET             reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    WHILE           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    CLASS           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    FUNC            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    INIT            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    [               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    {               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    STRING          reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    CHAR            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    FALSE           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    TRUE            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    FLOAT           reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    INT             reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    NULL            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    #               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    NEW             reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    IF              reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    $end            reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    PHPEND          reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)
    }               reduce using rule 123 (variable_operation -> ID EQ_MUL expression ; .)


state 288

    (125) variable_operation -> ID EQ_SUB expression ; .
    ?               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    (               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    !               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    +               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    -               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    *               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    &               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    ID              reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    $               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    HTMLSTART       reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    PHPSTART        reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    LIMPORT         reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    .               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    IMPORT          reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    RETURN          reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    DEL             reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    FOREACH         reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    FOR             reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    DEBUG           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    SKIP            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    BREAK           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    LET             reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    WHILE           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    CLASS           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    FUNC            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    INIT            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    [               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    {               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    STRING          reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    CHAR            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    FALSE           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    TRUE            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    FLOAT           reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    INT             reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    NULL            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    #               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    NEW             reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    IF              reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    $end            reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    PHPEND          reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)
    }               reduce using rule 125 (variable_operation -> ID EQ_SUB expression ; .)


state 289

    (127) variable_operation -> ID EQ_ADD expression ; .
    ?               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    (               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    !               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    +               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    -               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    *               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    &               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    ID              reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    $               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    HTMLSTART       reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    PHPSTART        reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    LIMPORT         reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    .               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    IMPORT          reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    RETURN          reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    DEL             reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    FOREACH         reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    FOR             reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    DEBUG           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    SKIP            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    BREAK           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    LET             reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    WHILE           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    CLASS           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    FUNC            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    INIT            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    [               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    {               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    STRING          reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    CHAR            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    FALSE           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    TRUE            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    FLOAT           reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    INT             reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    NULL            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    #               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    NEW             reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    IF              reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    $end            reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    PHPEND          reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)
    }               reduce using rule 127 (variable_operation -> ID EQ_ADD expression ; .)


state 290

    (92) function_declaration -> ID FUNC ID ( . empty ) { program }
    (93) function_declaration -> ID FUNC ID ( . function_arguments ) { program }
    (94) function_declaration -> ID FUNC ID ( . empty ) : expression { program }
    (95) function_declaration -> ID FUNC ID ( . function_arguments ) : expression { program }
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               reduce using rule 169 (empty -> .)
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 324
    function_arguments             shift and go to state 325
    expression                     shift and go to state 86
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 291

    (73) function_call -> ID TARROW ID ( . function_arguments )
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    function_arguments             shift and go to state 326
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    expression                     shift and go to state 86
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 292

    (82) function_call -> ID COLON_COLON ID ( . empty )
    (83) function_call -> ID COLON_COLON ID ( . function_arguments )
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               reduce using rule 169 (empty -> .)
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 327
    function_arguments             shift and go to state 328
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    expression                     shift and go to state 86
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 293

    (116) variable_assignment -> $ ID TARROW ID . = expression ;
    (84) function_call -> $ ID TARROW ID . ( empty )
    (85) function_call -> $ ID TARROW ID . ( function_arguments )
    (73) function_call -> ID TARROW ID . ( function_arguments )
    (76) function_call -> ID TARROW ID .
  ! shift/reduce conflict for ( resolved as shift
    =               shift and go to state 329
    (               shift and go to state 330
    >               reduce using rule 76 (function_call -> ID TARROW ID .)
    <               reduce using rule 76 (function_call -> ID TARROW ID .)
    &               reduce using rule 76 (function_call -> ID TARROW ID .)
    |               reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 76 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 76 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 76 (function_call -> ID TARROW ID .)
    %               reduce using rule 76 (function_call -> ID TARROW ID .)
    *               reduce using rule 76 (function_call -> ID TARROW ID .)
    /               reduce using rule 76 (function_call -> ID TARROW ID .)
    -               reduce using rule 76 (function_call -> ID TARROW ID .)
    +               reduce using rule 76 (function_call -> ID TARROW ID .)
    .               reduce using rule 76 (function_call -> ID TARROW ID .)
    COLON_COLON     reduce using rule 76 (function_call -> ID TARROW ID .)
    ^               reduce using rule 76 (function_call -> ID TARROW ID .)
    [               reduce using rule 76 (function_call -> ID TARROW ID .)
    $               reduce using rule 76 (function_call -> ID TARROW ID .)
    ID              reduce using rule 76 (function_call -> ID TARROW ID .)
    !               reduce using rule 76 (function_call -> ID TARROW ID .)
    ?               reduce using rule 76 (function_call -> ID TARROW ID .)
    HTMLSTART       reduce using rule 76 (function_call -> ID TARROW ID .)
    {               reduce using rule 76 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 76 (function_call -> ID TARROW ID .)
    CHAR            reduce using rule 76 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 76 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 76 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 76 (function_call -> ID TARROW ID .)
    INT             reduce using rule 76 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 76 (function_call -> ID TARROW ID .)
    #               reduce using rule 76 (function_call -> ID TARROW ID .)
    NEW             reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPSTART        reduce using rule 76 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 76 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 76 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 76 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 76 (function_call -> ID TARROW ID .)
    FOREACH         reduce using rule 76 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 76 (function_call -> ID TARROW ID .)
    DEBUG           reduce using rule 76 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 76 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 76 (function_call -> ID TARROW ID .)
    LET             reduce using rule 76 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 76 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 76 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 76 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 76 (function_call -> ID TARROW ID .)
    INIT            reduce using rule 76 (function_call -> ID TARROW ID .)
    IF              reduce using rule 76 (function_call -> ID TARROW ID .)
    $end            reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPEND          reduce using rule 76 (function_call -> ID TARROW ID .)
    }               reduce using rule 76 (function_call -> ID TARROW ID .)
    ,               reduce using rule 76 (function_call -> ID TARROW ID .)


state 294

    (117) variable_assignment -> $ ID = expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 331
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 295

    (70) function_call -> . ENV FROM ID . { program }
    {               shift and go to state 332


state 296

    (71) function_call -> . ENV { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 333
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 297

    (107) for_loop -> FOREACH ( expression AS . expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 334
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 298

    (148) _tuple -> { positional_args , } .
    >               reduce using rule 148 (_tuple -> { positional_args , } .)
    <               reduce using rule 148 (_tuple -> { positional_args , } .)
    &               reduce using rule 148 (_tuple -> { positional_args , } .)
    |               reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_GREATER      reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_LESS         reduce using rule 148 (_tuple -> { positional_args , } .)
    NOT_EQEQ        reduce using rule 148 (_tuple -> { positional_args , } .)
    EQEQ            reduce using rule 148 (_tuple -> { positional_args , } .)
    %               reduce using rule 148 (_tuple -> { positional_args , } .)
    *               reduce using rule 148 (_tuple -> { positional_args , } .)
    /               reduce using rule 148 (_tuple -> { positional_args , } .)
    -               reduce using rule 148 (_tuple -> { positional_args , } .)
    +               reduce using rule 148 (_tuple -> { positional_args , } .)
    .               reduce using rule 148 (_tuple -> { positional_args , } .)
    COLON_COLON     reduce using rule 148 (_tuple -> { positional_args , } .)
    ^               reduce using rule 148 (_tuple -> { positional_args , } .)
    [               reduce using rule 148 (_tuple -> { positional_args , } .)
    (               reduce using rule 148 (_tuple -> { positional_args , } .)
    $               reduce using rule 148 (_tuple -> { positional_args , } .)
    ID              reduce using rule 148 (_tuple -> { positional_args , } .)
    !               reduce using rule 148 (_tuple -> { positional_args , } .)
    ?               reduce using rule 148 (_tuple -> { positional_args , } .)
    HTMLSTART       reduce using rule 148 (_tuple -> { positional_args , } .)
    {               reduce using rule 148 (_tuple -> { positional_args , } .)
    STRING          reduce using rule 148 (_tuple -> { positional_args , } .)
    CHAR            reduce using rule 148 (_tuple -> { positional_args , } .)
    FALSE           reduce using rule 148 (_tuple -> { positional_args , } .)
    TRUE            reduce using rule 148 (_tuple -> { positional_args , } .)
    FLOAT           reduce using rule 148 (_tuple -> { positional_args , } .)
    INT             reduce using rule 148 (_tuple -> { positional_args , } .)
    NULL            reduce using rule 148 (_tuple -> { positional_args , } .)
    #               reduce using rule 148 (_tuple -> { positional_args , } .)
    NEW             reduce using rule 148 (_tuple -> { positional_args , } .)
    PYTHON_CODE_EXEC reduce using rule 148 (_tuple -> { positional_args , } .)
    PYTHON_CODE     reduce using rule 148 (_tuple -> { positional_args , } .)
    PHPSTART        reduce using rule 148 (_tuple -> { positional_args , } .)
    LIMPORT         reduce using rule 148 (_tuple -> { positional_args , } .)
    IMPORT          reduce using rule 148 (_tuple -> { positional_args , } .)
    RETURN          reduce using rule 148 (_tuple -> { positional_args , } .)
    DEL             reduce using rule 148 (_tuple -> { positional_args , } .)
    FOREACH         reduce using rule 148 (_tuple -> { positional_args , } .)
    FOR             reduce using rule 148 (_tuple -> { positional_args , } .)
    DEBUG           reduce using rule 148 (_tuple -> { positional_args , } .)
    SKIP            reduce using rule 148 (_tuple -> { positional_args , } .)
    BREAK           reduce using rule 148 (_tuple -> { positional_args , } .)
    LET             reduce using rule 148 (_tuple -> { positional_args , } .)
    WHILE           reduce using rule 148 (_tuple -> { positional_args , } .)
    NAMESPACE       reduce using rule 148 (_tuple -> { positional_args , } .)
    CLASS           reduce using rule 148 (_tuple -> { positional_args , } .)
    FUNC            reduce using rule 148 (_tuple -> { positional_args , } .)
    INIT            reduce using rule 148 (_tuple -> { positional_args , } .)
    IF              reduce using rule 148 (_tuple -> { positional_args , } .)
    $end            reduce using rule 148 (_tuple -> { positional_args , } .)
    ;               reduce using rule 148 (_tuple -> { positional_args , } .)
    ,               reduce using rule 148 (_tuple -> { positional_args , } .)
    PHPEND          reduce using rule 148 (_tuple -> { positional_args , } .)
    }               reduce using rule 148 (_tuple -> { positional_args , } .)
    )               reduce using rule 148 (_tuple -> { positional_args , } .)
    HTMLEND         reduce using rule 148 (_tuple -> { positional_args , } .)
    SARROW          reduce using rule 148 (_tuple -> { positional_args , } .)
    ]               reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_DIV          reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_MOD          reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_MUL          reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_SUB          reduce using rule 148 (_tuple -> { positional_args , } .)
    EQ_ADD          reduce using rule 148 (_tuple -> { positional_args , } .)
    =               reduce using rule 148 (_tuple -> { positional_args , } .)
    AS              reduce using rule 148 (_tuple -> { positional_args , } .)


state 299

    (108) for_loop -> FOR ( expression ) . { program }
    {               shift and go to state 335


state 300

    (114) variable_assignment -> LET get_index = expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 336
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    get_index                      shift and go to state 80
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 301

    (115) variable_assignment -> LET ID : ID . = expression ;
    =               shift and go to state 337


state 302

    (109) while_loop -> WHILE ( expression ) . { program }
    {               shift and go to state 338


state 303

    (136) else_statement -> ELSE { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 339
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 304

    (135) else_if_statement -> ELSE IF ( . expression ) { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 340
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 305

    (104) class_declaration -> NAMESPACE ID { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 341
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 306

    (105) class_declaration -> CLASS ID EXTENDS ID . { program }
    {               shift and go to state 342


state 307

    (106) class_declaration -> CLASS ID { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 343
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 308

    (89) function_declaration -> FUNC ID COLON_COLON ID . ( empty ) { program } TARROW expression
    (90) function_declaration -> FUNC ID COLON_COLON ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 344


state 309

    (96) function_declaration -> FUNC ID ( empty . ) { program }
    (97) function_declaration -> FUNC ID ( empty . ) : expression { program }
    )               shift and go to state 345


state 310

    (98) function_declaration -> FUNC ID ( function_arguments . ) { program }
    (99) function_declaration -> FUNC ID ( function_arguments . ) : expression { program }
    )               shift and go to state 346


state 311

    (91) function_declaration -> INIT ( function_arguments ) . { program } ;
    {               shift and go to state 347


state 312

    (145) assoc_array_items -> assoc_array_items , expression . SARROW expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    SARROW          shift and go to state 348
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 313

    (150) _list -> [ positional_args , ] .
    >               reduce using rule 150 (_list -> [ positional_args , ] .)
    <               reduce using rule 150 (_list -> [ positional_args , ] .)
    &               reduce using rule 150 (_list -> [ positional_args , ] .)
    |               reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_GREATER      reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_LESS         reduce using rule 150 (_list -> [ positional_args , ] .)
    NOT_EQEQ        reduce using rule 150 (_list -> [ positional_args , ] .)
    EQEQ            reduce using rule 150 (_list -> [ positional_args , ] .)
    %               reduce using rule 150 (_list -> [ positional_args , ] .)
    *               reduce using rule 150 (_list -> [ positional_args , ] .)
    /               reduce using rule 150 (_list -> [ positional_args , ] .)
    -               reduce using rule 150 (_list -> [ positional_args , ] .)
    +               reduce using rule 150 (_list -> [ positional_args , ] .)
    .               reduce using rule 150 (_list -> [ positional_args , ] .)
    COLON_COLON     reduce using rule 150 (_list -> [ positional_args , ] .)
    ^               reduce using rule 150 (_list -> [ positional_args , ] .)
    [               reduce using rule 150 (_list -> [ positional_args , ] .)
    (               reduce using rule 150 (_list -> [ positional_args , ] .)
    $               reduce using rule 150 (_list -> [ positional_args , ] .)
    ID              reduce using rule 150 (_list -> [ positional_args , ] .)
    !               reduce using rule 150 (_list -> [ positional_args , ] .)
    ?               reduce using rule 150 (_list -> [ positional_args , ] .)
    HTMLSTART       reduce using rule 150 (_list -> [ positional_args , ] .)
    {               reduce using rule 150 (_list -> [ positional_args , ] .)
    STRING          reduce using rule 150 (_list -> [ positional_args , ] .)
    CHAR            reduce using rule 150 (_list -> [ positional_args , ] .)
    FALSE           reduce using rule 150 (_list -> [ positional_args , ] .)
    TRUE            reduce using rule 150 (_list -> [ positional_args , ] .)
    FLOAT           reduce using rule 150 (_list -> [ positional_args , ] .)
    INT             reduce using rule 150 (_list -> [ positional_args , ] .)
    NULL            reduce using rule 150 (_list -> [ positional_args , ] .)
    #               reduce using rule 150 (_list -> [ positional_args , ] .)
    NEW             reduce using rule 150 (_list -> [ positional_args , ] .)
    PYTHON_CODE_EXEC reduce using rule 150 (_list -> [ positional_args , ] .)
    PYTHON_CODE     reduce using rule 150 (_list -> [ positional_args , ] .)
    PHPSTART        reduce using rule 150 (_list -> [ positional_args , ] .)
    LIMPORT         reduce using rule 150 (_list -> [ positional_args , ] .)
    IMPORT          reduce using rule 150 (_list -> [ positional_args , ] .)
    RETURN          reduce using rule 150 (_list -> [ positional_args , ] .)
    DEL             reduce using rule 150 (_list -> [ positional_args , ] .)
    FOREACH         reduce using rule 150 (_list -> [ positional_args , ] .)
    FOR             reduce using rule 150 (_list -> [ positional_args , ] .)
    DEBUG           reduce using rule 150 (_list -> [ positional_args , ] .)
    SKIP            reduce using rule 150 (_list -> [ positional_args , ] .)
    BREAK           reduce using rule 150 (_list -> [ positional_args , ] .)
    LET             reduce using rule 150 (_list -> [ positional_args , ] .)
    WHILE           reduce using rule 150 (_list -> [ positional_args , ] .)
    NAMESPACE       reduce using rule 150 (_list -> [ positional_args , ] .)
    CLASS           reduce using rule 150 (_list -> [ positional_args , ] .)
    FUNC            reduce using rule 150 (_list -> [ positional_args , ] .)
    INIT            reduce using rule 150 (_list -> [ positional_args , ] .)
    IF              reduce using rule 150 (_list -> [ positional_args , ] .)
    $end            reduce using rule 150 (_list -> [ positional_args , ] .)
    ;               reduce using rule 150 (_list -> [ positional_args , ] .)
    ,               reduce using rule 150 (_list -> [ positional_args , ] .)
    PHPEND          reduce using rule 150 (_list -> [ positional_args , ] .)
    }               reduce using rule 150 (_list -> [ positional_args , ] .)
    )               reduce using rule 150 (_list -> [ positional_args , ] .)
    HTMLEND         reduce using rule 150 (_list -> [ positional_args , ] .)
    SARROW          reduce using rule 150 (_list -> [ positional_args , ] .)
    ]               reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_DIV          reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_MOD          reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_MUL          reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_SUB          reduce using rule 150 (_list -> [ positional_args , ] .)
    EQ_ADD          reduce using rule 150 (_list -> [ positional_args , ] .)
    =               reduce using rule 150 (_list -> [ positional_args , ] .)
    AS              reduce using rule 150 (_list -> [ positional_args , ] .)


state 314

    (144) assoc_array_items -> expression SARROW expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ]               reduce using rule 144 (assoc_array_items -> expression SARROW expression .)
    ,               reduce using rule 144 (assoc_array_items -> expression SARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 315

    (78) function_call -> # DEFINE expression ? . ID
    (58) expression -> ? . HTMLEND
    ID              shift and go to state 349
    HTMLEND         shift and go to state 79


state 316

    (80) function_call -> NEW expression ( empty . )
    (72) function_call -> expression ( empty . ) FARROW { program }
    (79) function_call -> expression ( empty . )
    )               shift and go to state 350


state 317

    (81) function_call -> NEW expression ( function_arguments . )
    (86) function_call -> expression ( function_arguments . ) FARROW { program }
    )               shift and go to state 351


state 318

    (132) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 352


state 319

    (84) function_call -> $ ID TARROW ID . ( empty )
    (85) function_call -> $ ID TARROW ID . ( function_arguments )
    (73) function_call -> ID TARROW ID . ( function_arguments )
    (76) function_call -> ID TARROW ID .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 330
    >               reduce using rule 76 (function_call -> ID TARROW ID .)
    <               reduce using rule 76 (function_call -> ID TARROW ID .)
    &               reduce using rule 76 (function_call -> ID TARROW ID .)
    |               reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 76 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 76 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 76 (function_call -> ID TARROW ID .)
    %               reduce using rule 76 (function_call -> ID TARROW ID .)
    *               reduce using rule 76 (function_call -> ID TARROW ID .)
    /               reduce using rule 76 (function_call -> ID TARROW ID .)
    -               reduce using rule 76 (function_call -> ID TARROW ID .)
    +               reduce using rule 76 (function_call -> ID TARROW ID .)
    .               reduce using rule 76 (function_call -> ID TARROW ID .)
    COLON_COLON     reduce using rule 76 (function_call -> ID TARROW ID .)
    ^               reduce using rule 76 (function_call -> ID TARROW ID .)
    [               reduce using rule 76 (function_call -> ID TARROW ID .)
    $               reduce using rule 76 (function_call -> ID TARROW ID .)
    ID              reduce using rule 76 (function_call -> ID TARROW ID .)
    !               reduce using rule 76 (function_call -> ID TARROW ID .)
    ?               reduce using rule 76 (function_call -> ID TARROW ID .)
    HTMLSTART       reduce using rule 76 (function_call -> ID TARROW ID .)
    {               reduce using rule 76 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 76 (function_call -> ID TARROW ID .)
    CHAR            reduce using rule 76 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 76 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 76 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 76 (function_call -> ID TARROW ID .)
    INT             reduce using rule 76 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 76 (function_call -> ID TARROW ID .)
    #               reduce using rule 76 (function_call -> ID TARROW ID .)
    NEW             reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 76 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPSTART        reduce using rule 76 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 76 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 76 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 76 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 76 (function_call -> ID TARROW ID .)
    FOREACH         reduce using rule 76 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 76 (function_call -> ID TARROW ID .)
    DEBUG           reduce using rule 76 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 76 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 76 (function_call -> ID TARROW ID .)
    LET             reduce using rule 76 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 76 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 76 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 76 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 76 (function_call -> ID TARROW ID .)
    INIT            reduce using rule 76 (function_call -> ID TARROW ID .)
    IF              reduce using rule 76 (function_call -> ID TARROW ID .)
    $end            reduce using rule 76 (function_call -> ID TARROW ID .)
    ;               reduce using rule 76 (function_call -> ID TARROW ID .)
    ,               reduce using rule 76 (function_call -> ID TARROW ID .)
    PHPEND          reduce using rule 76 (function_call -> ID TARROW ID .)
    }               reduce using rule 76 (function_call -> ID TARROW ID .)
    )               reduce using rule 76 (function_call -> ID TARROW ID .)
    HTMLEND         reduce using rule 76 (function_call -> ID TARROW ID .)
    SARROW          reduce using rule 76 (function_call -> ID TARROW ID .)
    ]               reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_DIV          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_MOD          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_MUL          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_SUB          reduce using rule 76 (function_call -> ID TARROW ID .)
    EQ_ADD          reduce using rule 76 (function_call -> ID TARROW ID .)
    =               reduce using rule 76 (function_call -> ID TARROW ID .)
    AS              reduce using rule 76 (function_call -> ID TARROW ID .)


state 320

    (72) function_call -> expression ( empty ) FARROW . { program }
    {               shift and go to state 353


state 321

    (86) function_call -> expression ( function_arguments ) FARROW . { program }
    {               shift and go to state 354


state 322

    (87) function_call -> expression $ ID = expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 355
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 323

    (113) kwargs -> kwargs , id = . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    id                             shift and go to state 25
    expression                     shift and go to state 356
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 324

    (92) function_declaration -> ID FUNC ID ( empty . ) { program }
    (94) function_declaration -> ID FUNC ID ( empty . ) : expression { program }
    )               shift and go to state 357


state 325

    (93) function_declaration -> ID FUNC ID ( function_arguments . ) { program }
    (95) function_declaration -> ID FUNC ID ( function_arguments . ) : expression { program }
    )               shift and go to state 358


state 326

    (73) function_call -> ID TARROW ID ( function_arguments . )
    )               shift and go to state 359


state 327

    (82) function_call -> ID COLON_COLON ID ( empty . )
    )               shift and go to state 360


state 328

    (83) function_call -> ID COLON_COLON ID ( function_arguments . )
    )               shift and go to state 361


state 329

    (116) variable_assignment -> $ ID TARROW ID = . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 362
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 330

    (84) function_call -> $ ID TARROW ID ( . empty )
    (85) function_call -> $ ID TARROW ID ( . function_arguments )
    (73) function_call -> ID TARROW ID ( . function_arguments )
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               reduce using rule 169 (empty -> .)
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 363
    function_arguments             shift and go to state 364
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    expression                     shift and go to state 86
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 331

    (117) variable_assignment -> $ ID = expression ; .
    ?               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    (               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    !               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    +               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    -               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    *               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    &               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    ID              reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    $               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    HTMLSTART       reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    PHPSTART        reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    LIMPORT         reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    .               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    IMPORT          reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    RETURN          reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    DEL             reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    FOREACH         reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    FOR             reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    DEBUG           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    SKIP            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    BREAK           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    LET             reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    WHILE           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    NAMESPACE       reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    CLASS           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    FUNC            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    INIT            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    [               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    {               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    STRING          reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    CHAR            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    FALSE           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    TRUE            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    FLOAT           reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    INT             reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    NULL            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    #               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    NEW             reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    PYTHON_CODE     reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    IF              reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    $end            reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    PHPEND          reduce using rule 117 (variable_assignment -> $ ID = expression ; .)
    }               reduce using rule 117 (variable_assignment -> $ ID = expression ; .)


state 332

    (70) function_call -> . ENV FROM ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 365
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 333

    (71) function_call -> . ENV { program } .
    ;               reduce using rule 71 (function_call -> . ENV { program } .)
    >               reduce using rule 71 (function_call -> . ENV { program } .)
    <               reduce using rule 71 (function_call -> . ENV { program } .)
    &               reduce using rule 71 (function_call -> . ENV { program } .)
    |               reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_GREATER      reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_LESS         reduce using rule 71 (function_call -> . ENV { program } .)
    NOT_EQEQ        reduce using rule 71 (function_call -> . ENV { program } .)
    EQEQ            reduce using rule 71 (function_call -> . ENV { program } .)
    %               reduce using rule 71 (function_call -> . ENV { program } .)
    *               reduce using rule 71 (function_call -> . ENV { program } .)
    /               reduce using rule 71 (function_call -> . ENV { program } .)
    -               reduce using rule 71 (function_call -> . ENV { program } .)
    +               reduce using rule 71 (function_call -> . ENV { program } .)
    .               reduce using rule 71 (function_call -> . ENV { program } .)
    COLON_COLON     reduce using rule 71 (function_call -> . ENV { program } .)
    ^               reduce using rule 71 (function_call -> . ENV { program } .)
    [               reduce using rule 71 (function_call -> . ENV { program } .)
    (               reduce using rule 71 (function_call -> . ENV { program } .)
    $               reduce using rule 71 (function_call -> . ENV { program } .)
    ID              reduce using rule 71 (function_call -> . ENV { program } .)
    !               reduce using rule 71 (function_call -> . ENV { program } .)
    ?               reduce using rule 71 (function_call -> . ENV { program } .)
    HTMLSTART       reduce using rule 71 (function_call -> . ENV { program } .)
    {               reduce using rule 71 (function_call -> . ENV { program } .)
    STRING          reduce using rule 71 (function_call -> . ENV { program } .)
    CHAR            reduce using rule 71 (function_call -> . ENV { program } .)
    FALSE           reduce using rule 71 (function_call -> . ENV { program } .)
    TRUE            reduce using rule 71 (function_call -> . ENV { program } .)
    FLOAT           reduce using rule 71 (function_call -> . ENV { program } .)
    INT             reduce using rule 71 (function_call -> . ENV { program } .)
    NULL            reduce using rule 71 (function_call -> . ENV { program } .)
    #               reduce using rule 71 (function_call -> . ENV { program } .)
    NEW             reduce using rule 71 (function_call -> . ENV { program } .)
    PYTHON_CODE_EXEC reduce using rule 71 (function_call -> . ENV { program } .)
    PYTHON_CODE     reduce using rule 71 (function_call -> . ENV { program } .)
    PHPSTART        reduce using rule 71 (function_call -> . ENV { program } .)
    LIMPORT         reduce using rule 71 (function_call -> . ENV { program } .)
    IMPORT          reduce using rule 71 (function_call -> . ENV { program } .)
    RETURN          reduce using rule 71 (function_call -> . ENV { program } .)
    DEL             reduce using rule 71 (function_call -> . ENV { program } .)
    FOREACH         reduce using rule 71 (function_call -> . ENV { program } .)
    FOR             reduce using rule 71 (function_call -> . ENV { program } .)
    DEBUG           reduce using rule 71 (function_call -> . ENV { program } .)
    SKIP            reduce using rule 71 (function_call -> . ENV { program } .)
    BREAK           reduce using rule 71 (function_call -> . ENV { program } .)
    LET             reduce using rule 71 (function_call -> . ENV { program } .)
    WHILE           reduce using rule 71 (function_call -> . ENV { program } .)
    NAMESPACE       reduce using rule 71 (function_call -> . ENV { program } .)
    CLASS           reduce using rule 71 (function_call -> . ENV { program } .)
    FUNC            reduce using rule 71 (function_call -> . ENV { program } .)
    INIT            reduce using rule 71 (function_call -> . ENV { program } .)
    IF              reduce using rule 71 (function_call -> . ENV { program } .)
    $end            reduce using rule 71 (function_call -> . ENV { program } .)
    ,               reduce using rule 71 (function_call -> . ENV { program } .)
    PHPEND          reduce using rule 71 (function_call -> . ENV { program } .)
    }               reduce using rule 71 (function_call -> . ENV { program } .)
    )               reduce using rule 71 (function_call -> . ENV { program } .)
    HTMLEND         reduce using rule 71 (function_call -> . ENV { program } .)
    SARROW          reduce using rule 71 (function_call -> . ENV { program } .)
    ]               reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_DIV          reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_MOD          reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_MUL          reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_SUB          reduce using rule 71 (function_call -> . ENV { program } .)
    EQ_ADD          reduce using rule 71 (function_call -> . ENV { program } .)
    =               reduce using rule 71 (function_call -> . ENV { program } .)
    AS              reduce using rule 71 (function_call -> . ENV { program } .)


state 334

    (107) for_loop -> FOREACH ( expression AS expression . ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 366
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 335

    (108) for_loop -> FOR ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 367
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 336

    (114) variable_assignment -> LET get_index = expression ; .
    ?               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    (               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    !               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    +               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    -               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    *               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    &               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    ID              reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    $               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    HTMLSTART       reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    PHPSTART        reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    LIMPORT         reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    .               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    IMPORT          reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    RETURN          reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    DEL             reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    FOREACH         reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    FOR             reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    DEBUG           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    SKIP            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    BREAK           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    LET             reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    WHILE           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    NAMESPACE       reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    CLASS           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    FUNC            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    INIT            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    [               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    {               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    STRING          reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    CHAR            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    FALSE           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    TRUE            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    FLOAT           reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    INT             reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    NULL            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    #               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    NEW             reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE     reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    IF              reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    $end            reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    PHPEND          reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)
    }               reduce using rule 114 (variable_assignment -> LET get_index = expression ; .)


state 337

    (115) variable_assignment -> LET ID : ID = . expression ;
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 368
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 338

    (109) while_loop -> WHILE ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 369
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 339

    (136) else_statement -> ELSE { program } .
    ?               reduce using rule 136 (else_statement -> ELSE { program } .)
    (               reduce using rule 136 (else_statement -> ELSE { program } .)
    !               reduce using rule 136 (else_statement -> ELSE { program } .)
    +               reduce using rule 136 (else_statement -> ELSE { program } .)
    -               reduce using rule 136 (else_statement -> ELSE { program } .)
    *               reduce using rule 136 (else_statement -> ELSE { program } .)
    &               reduce using rule 136 (else_statement -> ELSE { program } .)
    ID              reduce using rule 136 (else_statement -> ELSE { program } .)
    $               reduce using rule 136 (else_statement -> ELSE { program } .)
    HTMLSTART       reduce using rule 136 (else_statement -> ELSE { program } .)
    PHPSTART        reduce using rule 136 (else_statement -> ELSE { program } .)
    LIMPORT         reduce using rule 136 (else_statement -> ELSE { program } .)
    .               reduce using rule 136 (else_statement -> ELSE { program } .)
    IMPORT          reduce using rule 136 (else_statement -> ELSE { program } .)
    RETURN          reduce using rule 136 (else_statement -> ELSE { program } .)
    DEL             reduce using rule 136 (else_statement -> ELSE { program } .)
    FOREACH         reduce using rule 136 (else_statement -> ELSE { program } .)
    FOR             reduce using rule 136 (else_statement -> ELSE { program } .)
    DEBUG           reduce using rule 136 (else_statement -> ELSE { program } .)
    SKIP            reduce using rule 136 (else_statement -> ELSE { program } .)
    BREAK           reduce using rule 136 (else_statement -> ELSE { program } .)
    LET             reduce using rule 136 (else_statement -> ELSE { program } .)
    WHILE           reduce using rule 136 (else_statement -> ELSE { program } .)
    NAMESPACE       reduce using rule 136 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 136 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 136 (else_statement -> ELSE { program } .)
    INIT            reduce using rule 136 (else_statement -> ELSE { program } .)
    [               reduce using rule 136 (else_statement -> ELSE { program } .)
    {               reduce using rule 136 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 136 (else_statement -> ELSE { program } .)
    CHAR            reduce using rule 136 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 136 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 136 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 136 (else_statement -> ELSE { program } .)
    INT             reduce using rule 136 (else_statement -> ELSE { program } .)
    NULL            reduce using rule 136 (else_statement -> ELSE { program } .)
    #               reduce using rule 136 (else_statement -> ELSE { program } .)
    NEW             reduce using rule 136 (else_statement -> ELSE { program } .)
    PYTHON_CODE_EXEC reduce using rule 136 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 136 (else_statement -> ELSE { program } .)
    IF              reduce using rule 136 (else_statement -> ELSE { program } .)
    $end            reduce using rule 136 (else_statement -> ELSE { program } .)
    PHPEND          reduce using rule 136 (else_statement -> ELSE { program } .)
    }               reduce using rule 136 (else_statement -> ELSE { program } .)


state 340

    (135) else_if_statement -> ELSE IF ( expression . ) { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               shift and go to state 370
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 341

    (104) class_declaration -> NAMESPACE ID { program } .
    ?               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    (               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    !               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    +               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    -               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    *               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    &               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    ID              reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    $               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    HTMLSTART       reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    PHPSTART        reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    LIMPORT         reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    .               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    IMPORT          reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    RETURN          reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    DEL             reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    FOREACH         reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    FOR             reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    DEBUG           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    SKIP            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    BREAK           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    LET             reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    WHILE           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    NAMESPACE       reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    CLASS           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    FUNC            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    INIT            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    [               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    {               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    STRING          reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    CHAR            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    FALSE           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    TRUE            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    FLOAT           reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    INT             reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    NULL            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    #               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    NEW             reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE     reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    IF              reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    $end            reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    PHPEND          reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)
    }               reduce using rule 104 (class_declaration -> NAMESPACE ID { program } .)


state 342

    (105) class_declaration -> CLASS ID EXTENDS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 371
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 343

    (106) class_declaration -> CLASS ID { program } .
    ?               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    *               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    &               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    $               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    HTMLSTART       reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    PHPSTART        reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    LIMPORT         reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    .               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    IMPORT          reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    RETURN          reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    DEL             reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    FOREACH         reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    FOR             reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    DEBUG           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    SKIP            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    BREAK           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    LET             reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    WHILE           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    NAMESPACE       reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    INIT            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    CHAR            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    NULL            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    #               reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    NEW             reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    PHPEND          reduce using rule 106 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 106 (class_declaration -> CLASS ID { program } .)


state 344

    (89) function_declaration -> FUNC ID COLON_COLON ID ( . empty ) { program } TARROW expression
    (90) function_declaration -> FUNC ID COLON_COLON ID ( . function_arguments ) { program } TARROW expression
    (169) empty -> .
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    )               reduce using rule 169 (empty -> .)
    ID              shift and go to state 102
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    empty                          shift and go to state 372
    expression                     shift and go to state 86
    function_arguments             shift and go to state 373
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 345

    (96) function_declaration -> FUNC ID ( empty ) . { program }
    (97) function_declaration -> FUNC ID ( empty ) . : expression { program }
    {               shift and go to state 374
    :               shift and go to state 375


state 346

    (98) function_declaration -> FUNC ID ( function_arguments ) . { program }
    (99) function_declaration -> FUNC ID ( function_arguments ) . : expression { program }
    {               shift and go to state 376
    :               shift and go to state 377


state 347

    (91) function_declaration -> INIT ( function_arguments ) { . program } ;
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 378
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 348

    (145) assoc_array_items -> assoc_array_items , expression SARROW . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 379
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 349

    (78) function_call -> # DEFINE expression ? ID .
    ;               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    >               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    <               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    &               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    |               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_GREATER      reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_LESS         reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    NOT_EQEQ        reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQEQ            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    %               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    *               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    /               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    -               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    +               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    .               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    COLON_COLON     reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    ^               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    [               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    (               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    $               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    ID              reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    !               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    ?               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    HTMLSTART       reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    {               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    STRING          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    CHAR            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    FALSE           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    TRUE            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    FLOAT           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    INT             reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    NULL            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    #               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    NEW             reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE_EXEC reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE     reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    PHPSTART        reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    LIMPORT         reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    IMPORT          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    RETURN          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    DEL             reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    FOREACH         reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    FOR             reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    DEBUG           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    SKIP            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    BREAK           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    LET             reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    WHILE           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    NAMESPACE       reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    CLASS           reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    FUNC            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    INIT            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    IF              reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    $end            reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    ,               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    PHPEND          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    }               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    )               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    HTMLEND         reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    SARROW          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    ]               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_DIV          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_MOD          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_MUL          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_SUB          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    EQ_ADD          reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    =               reduce using rule 78 (function_call -> # DEFINE expression ? ID .)
    AS              reduce using rule 78 (function_call -> # DEFINE expression ? ID .)


state 350

    (80) function_call -> NEW expression ( empty ) .
    (72) function_call -> expression ( empty ) . FARROW { program }
    (79) function_call -> expression ( empty ) .
  ! reduce/reduce conflict for ( resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for > resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for < resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for & resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for | resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for EQEQ resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for % resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for * resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for / resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for - resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for + resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for . resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for ^ resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for [ resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for $ resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for ID resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for ! resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for ? resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for { resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for STRING resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for CHAR resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for FALSE resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for TRUE resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for FLOAT resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for INT resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for NULL resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for # resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for NEW resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 80 (function_call -> NEW expression ( empty ) .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 80 (function_call -> NEW expression ( empty ) .)
    ;               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    >               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    <               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    &               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    |               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_GREATER      reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_LESS         reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    NOT_EQEQ        reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQEQ            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    %               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    *               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    /               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    -               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    +               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    .               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    COLON_COLON     reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    ^               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    [               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    (               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    $               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    ID              reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    !               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    ?               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    HTMLSTART       reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    {               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    STRING          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    CHAR            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FALSE           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    TRUE            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FLOAT           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    INT             reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    NULL            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    #               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    NEW             reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    PYTHON_CODE     reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    PHPSTART        reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    LIMPORT         reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    IMPORT          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    RETURN          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    DEL             reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FOREACH         reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FOR             reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    DEBUG           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    SKIP            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    BREAK           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    LET             reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    WHILE           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    NAMESPACE       reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    CLASS           reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FUNC            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    INIT            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    IF              reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    $end            reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    ,               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    PHPEND          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    }               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    )               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    HTMLEND         reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    SARROW          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    ]               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_DIV          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_MOD          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_MUL          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_SUB          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    EQ_ADD          reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    =               reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    AS              reduce using rule 80 (function_call -> NEW expression ( empty ) .)
    FARROW          shift and go to state 320


state 351

    (81) function_call -> NEW expression ( function_arguments ) .
    (86) function_call -> expression ( function_arguments ) . FARROW { program }
    ;               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    >               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    <               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    &               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    |               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQEQ            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    %               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    *               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    /               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    -               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    +               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    .               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    COLON_COLON     reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    ^               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    [               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    (               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    $               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    ID              reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    !               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    ?               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    HTMLSTART       reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    {               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    STRING          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    CHAR            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FALSE           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    TRUE            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FLOAT           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    INT             reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    NULL            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    #               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    NEW             reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    PHPSTART        reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    LIMPORT         reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    IMPORT          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    RETURN          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    DEL             reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FOREACH         reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FOR             reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    DEBUG           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    SKIP            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    BREAK           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    LET             reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    WHILE           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    CLASS           reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FUNC            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    INIT            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    IF              reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    $end            reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    ,               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    PHPEND          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    }               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    )               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    HTMLEND         reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    SARROW          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    ]               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_DIV          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_MOD          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_MUL          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_SUB          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    EQ_ADD          reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    =               reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    AS              reduce using rule 81 (function_call -> NEW expression ( function_arguments ) .)
    FARROW          shift and go to state 321


state 352

    (132) if_statement -> IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 380
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 353

    (72) function_call -> expression ( empty ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    empty                          shift and go to state 2
    program                        shift and go to state 381
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 354

    (86) function_call -> expression ( function_arguments ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 382
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 355

    (87) function_call -> expression $ ID = expression ; .
    ;               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    >               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    <               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    &               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    |               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_GREATER      reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_LESS         reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    NOT_EQEQ        reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQEQ            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    %               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    *               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    /               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    -               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    +               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    .               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    COLON_COLON     reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    ^               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    [               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    (               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    $               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    ID              reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    !               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    ?               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    HTMLSTART       reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    {               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    STRING          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    CHAR            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    FALSE           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    TRUE            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    FLOAT           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    INT             reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    NULL            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    #               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    NEW             reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    PYTHON_CODE     reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    PHPSTART        reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    LIMPORT         reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    IMPORT          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    RETURN          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    DEL             reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    FOREACH         reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    FOR             reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    DEBUG           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    SKIP            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    BREAK           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    LET             reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    WHILE           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    NAMESPACE       reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    CLASS           reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    FUNC            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    INIT            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    IF              reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    $end            reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    ,               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    PHPEND          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    }               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    )               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    HTMLEND         reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    SARROW          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    ]               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_DIV          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_MOD          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_MUL          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_SUB          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    EQ_ADD          reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    =               reduce using rule 87 (function_call -> expression $ ID = expression ; .)
    AS              reduce using rule 87 (function_call -> expression $ ID = expression ; .)


state 356

    (113) kwargs -> kwargs , id = expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ,               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    ;               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    .               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    ^               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    [               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    (               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    $               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    ID              reduce using rule 113 (kwargs -> kwargs , id = expression .)
    ?               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    HTMLSTART       reduce using rule 113 (kwargs -> kwargs , id = expression .)
    {               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    STRING          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    CHAR            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    FALSE           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    TRUE            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    FLOAT           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    INT             reduce using rule 113 (kwargs -> kwargs , id = expression .)
    NULL            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    #               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    NEW             reduce using rule 113 (kwargs -> kwargs , id = expression .)
    PYTHON_CODE_EXEC reduce using rule 113 (kwargs -> kwargs , id = expression .)
    PYTHON_CODE     reduce using rule 113 (kwargs -> kwargs , id = expression .)
    PHPSTART        reduce using rule 113 (kwargs -> kwargs , id = expression .)
    LIMPORT         reduce using rule 113 (kwargs -> kwargs , id = expression .)
    IMPORT          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    RETURN          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    DEL             reduce using rule 113 (kwargs -> kwargs , id = expression .)
    FOREACH         reduce using rule 113 (kwargs -> kwargs , id = expression .)
    FOR             reduce using rule 113 (kwargs -> kwargs , id = expression .)
    DEBUG           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    SKIP            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    BREAK           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    LET             reduce using rule 113 (kwargs -> kwargs , id = expression .)
    WHILE           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    NAMESPACE       reduce using rule 113 (kwargs -> kwargs , id = expression .)
    CLASS           reduce using rule 113 (kwargs -> kwargs , id = expression .)
    FUNC            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    INIT            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    IF              reduce using rule 113 (kwargs -> kwargs , id = expression .)
    $end            reduce using rule 113 (kwargs -> kwargs , id = expression .)
    PHPEND          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    }               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    HTMLEND         reduce using rule 113 (kwargs -> kwargs , id = expression .)
    SARROW          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    ]               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    EQ_DIV          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    EQ_MOD          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    EQ_MUL          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    EQ_SUB          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    EQ_ADD          reduce using rule 113 (kwargs -> kwargs , id = expression .)
    =               reduce using rule 113 (kwargs -> kwargs , id = expression .)
    AS              reduce using rule 113 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 101
    !               shift and go to state 35

    kwargs                         shift and go to state 108
    id                             shift and go to state 25
    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    positional_args                shift and go to state 109
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 357

    (92) function_declaration -> ID FUNC ID ( empty ) . { program }
    (94) function_declaration -> ID FUNC ID ( empty ) . : expression { program }
    {               shift and go to state 383
    :               shift and go to state 384


state 358

    (93) function_declaration -> ID FUNC ID ( function_arguments ) . { program }
    (95) function_declaration -> ID FUNC ID ( function_arguments ) . : expression { program }
    {               shift and go to state 385
    :               shift and go to state 386


state 359

    (73) function_call -> ID TARROW ID ( function_arguments ) .
    ;               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    >               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    <               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    &               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    |               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_GREATER      reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_LESS         reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQEQ            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    %               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    *               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    /               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    -               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    +               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    .               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    COLON_COLON     reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    ^               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    [               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    (               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    $               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    ID              reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    !               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    ?               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    HTMLSTART       reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    {               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    STRING          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    CHAR            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    FALSE           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    TRUE            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    FLOAT           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    INT             reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    NULL            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    #               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    NEW             reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    PHPSTART        reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    LIMPORT         reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    IMPORT          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    RETURN          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    DEL             reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    FOREACH         reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    FOR             reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    DEBUG           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    SKIP            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    BREAK           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    LET             reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    WHILE           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    NAMESPACE       reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    CLASS           reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    FUNC            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    INIT            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    IF              reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    $end            reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    ,               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    PHPEND          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    }               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    )               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    HTMLEND         reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    SARROW          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    ]               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_DIV          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_MOD          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_MUL          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_SUB          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_ADD          reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    =               reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)
    AS              reduce using rule 73 (function_call -> ID TARROW ID ( function_arguments ) .)


state 360

    (82) function_call -> ID COLON_COLON ID ( empty ) .
    ;               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    >               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    <               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    &               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    |               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_GREATER      reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_LESS         reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    NOT_EQEQ        reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQEQ            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    %               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    *               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    /               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    -               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    +               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    .               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    COLON_COLON     reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    ^               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    [               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    (               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    $               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    ID              reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    !               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    ?               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    HTMLSTART       reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    {               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    STRING          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    CHAR            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    FALSE           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    TRUE            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    FLOAT           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    INT             reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    NULL            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    #               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    NEW             reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    PYTHON_CODE     reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    PHPSTART        reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    LIMPORT         reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    IMPORT          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    RETURN          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    DEL             reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    FOREACH         reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    FOR             reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    DEBUG           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    SKIP            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    BREAK           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    LET             reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    WHILE           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    NAMESPACE       reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    CLASS           reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    FUNC            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    INIT            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    IF              reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    $end            reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    ,               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    PHPEND          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    }               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    )               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    HTMLEND         reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    SARROW          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    ]               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_DIV          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_MOD          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_MUL          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_SUB          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    EQ_ADD          reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    =               reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)
    AS              reduce using rule 82 (function_call -> ID COLON_COLON ID ( empty ) .)


state 361

    (83) function_call -> ID COLON_COLON ID ( function_arguments ) .
    ;               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    >               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    <               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    &               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    |               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_GREATER      reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_LESS         reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQEQ            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    %               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    *               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    /               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    -               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    +               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    .               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    COLON_COLON     reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    ^               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    [               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    (               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    $               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    ID              reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    !               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    ?               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    HTMLSTART       reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    {               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    STRING          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    CHAR            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    FALSE           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    TRUE            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    FLOAT           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    INT             reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    NULL            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    #               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    NEW             reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    PHPSTART        reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    LIMPORT         reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    IMPORT          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    RETURN          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    DEL             reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    FOREACH         reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    FOR             reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    DEBUG           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    SKIP            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    BREAK           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    LET             reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    WHILE           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    NAMESPACE       reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    CLASS           reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    FUNC            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    INIT            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    IF              reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    $end            reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    ,               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    PHPEND          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    }               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    )               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    HTMLEND         reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    SARROW          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    ]               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_DIV          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_MOD          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_MUL          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_SUB          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    EQ_ADD          reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    =               reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)
    AS              reduce using rule 83 (function_call -> ID COLON_COLON ID ( function_arguments ) .)


state 362

    (116) variable_assignment -> $ ID TARROW ID = expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 387
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 363

    (84) function_call -> $ ID TARROW ID ( empty . )
    )               shift and go to state 388


state 364

    (85) function_call -> $ ID TARROW ID ( function_arguments . )
    (73) function_call -> ID TARROW ID ( function_arguments . )
    )               shift and go to state 389


state 365

    (70) function_call -> . ENV FROM ID { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 390
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 366

    (107) for_loop -> FOREACH ( expression AS expression ) . { program }
    {               shift and go to state 391


state 367

    (108) for_loop -> FOR ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 392
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 368

    (115) variable_assignment -> LET ID : ID = expression . ;
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ;               shift and go to state 393
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 369

    (109) while_loop -> WHILE ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 394
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 370

    (135) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 395


state 371

    (105) class_declaration -> CLASS ID EXTENDS ID { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 396
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 372

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty . ) { program } TARROW expression
    )               shift and go to state 397


state 373

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 398


state 374

    (96) function_declaration -> FUNC ID ( empty ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    empty                          shift and go to state 2
    program                        shift and go to state 399
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 375

    (97) function_declaration -> FUNC ID ( empty ) : . expression { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 400
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 376

    (98) function_declaration -> FUNC ID ( function_arguments ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 401
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 377

    (99) function_declaration -> FUNC ID ( function_arguments ) : . expression { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 402
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 378

    (91) function_declaration -> INIT ( function_arguments ) { program . } ;
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 403
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 379

    (145) assoc_array_items -> assoc_array_items , expression SARROW expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    ]               reduce using rule 145 (assoc_array_items -> assoc_array_items , expression SARROW expression .)
    ,               reduce using rule 145 (assoc_array_items -> assoc_array_items , expression SARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 380

    (132) if_statement -> IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 404
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 381

    (72) function_call -> expression ( empty ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 405
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 382

    (86) function_call -> expression ( function_arguments ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 406
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 383

    (92) function_declaration -> ID FUNC ID ( empty ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    empty                          shift and go to state 2
    program                        shift and go to state 407
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 384

    (94) function_declaration -> ID FUNC ID ( empty ) : . expression { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 408
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 385

    (93) function_declaration -> ID FUNC ID ( function_arguments ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 409
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 386

    (95) function_declaration -> ID FUNC ID ( function_arguments ) : . expression { program }
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 410
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 387

    (116) variable_assignment -> $ ID TARROW ID = expression ; .
    ?               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    (               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    !               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    +               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    -               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    *               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    &               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    ID              reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    $               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    HTMLSTART       reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    PHPSTART        reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    LIMPORT         reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    .               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    IMPORT          reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    RETURN          reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    DEL             reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    FOREACH         reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    FOR             reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    DEBUG           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    SKIP            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    BREAK           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    LET             reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    WHILE           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    NAMESPACE       reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    CLASS           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    FUNC            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    INIT            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    [               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    {               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    STRING          reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    CHAR            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    FALSE           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    TRUE            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    FLOAT           reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    INT             reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    NULL            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    #               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    NEW             reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    PYTHON_CODE     reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    IF              reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    $end            reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    PHPEND          reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)
    }               reduce using rule 116 (variable_assignment -> $ ID TARROW ID = expression ; .)


state 388

    (84) function_call -> $ ID TARROW ID ( empty ) .
    ;               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    >               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    <               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    &               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    |               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_GREATER      reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_LESS         reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    NOT_EQEQ        reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQEQ            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    %               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    *               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    /               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    -               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    +               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    .               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    COLON_COLON     reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    ^               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    [               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    (               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    $               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    ID              reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    !               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    ?               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    HTMLSTART       reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    {               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    STRING          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    CHAR            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    FALSE           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    TRUE            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    FLOAT           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    INT             reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    NULL            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    #               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    NEW             reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    PYTHON_CODE     reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    PHPSTART        reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    LIMPORT         reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    IMPORT          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    RETURN          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    DEL             reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    FOREACH         reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    FOR             reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    DEBUG           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    SKIP            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    BREAK           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    LET             reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    WHILE           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    NAMESPACE       reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    CLASS           reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    FUNC            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    INIT            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    IF              reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    $end            reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    ,               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    PHPEND          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    }               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    )               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    HTMLEND         reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    SARROW          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    ]               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_DIV          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_MOD          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_MUL          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_SUB          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    EQ_ADD          reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    =               reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)
    AS              reduce using rule 84 (function_call -> $ ID TARROW ID ( empty ) .)


state 389

    (85) function_call -> $ ID TARROW ID ( function_arguments ) .
    (73) function_call -> ID TARROW ID ( function_arguments ) .
  ! reduce/reduce conflict for > resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for < resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for & resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for | resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQEQ resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for % resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for * resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for / resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for - resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for + resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for . resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for COLON_COLON resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ^ resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for [ resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ( resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for $ resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ID resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ! resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ? resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for HTMLSTART resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for { resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for STRING resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for CHAR resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for FALSE resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for TRUE resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for FLOAT resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for INT resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for NULL resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for # resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for NEW resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for PYTHON_CODE_EXEC resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for PYTHON_CODE resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for PHPSTART resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for LIMPORT resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for IMPORT resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for RETURN resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for DEL resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for FOREACH resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for FOR resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for DEBUG resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for SKIP resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for BREAK resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for LET resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for WHILE resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for CLASS resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for FUNC resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for INIT resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for IF resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for $end resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for PHPEND resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for } resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for , resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ; resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ) resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for HTMLEND resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for SARROW resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for ] resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_MOD resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_MUL resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_SUB resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_ADD resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for = resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
  ! reduce/reduce conflict for AS resolved using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ;               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    >               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    <               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    &               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    |               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_GREATER      reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_LESS         reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQEQ            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    %               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    *               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    /               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    -               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    +               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    .               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    COLON_COLON     reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ^               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    [               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    (               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    $               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ID              reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    !               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ?               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    HTMLSTART       reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    {               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    STRING          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    CHAR            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    FALSE           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    TRUE            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    FLOAT           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    INT             reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    NULL            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    #               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    NEW             reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    PHPSTART        reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    LIMPORT         reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    IMPORT          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    RETURN          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    DEL             reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    FOREACH         reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    FOR             reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    DEBUG           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    SKIP            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    BREAK           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    LET             reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    WHILE           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    NAMESPACE       reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    CLASS           reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    FUNC            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    INIT            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    IF              reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    $end            reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ,               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    PHPEND          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    }               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    )               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    HTMLEND         reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    SARROW          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    ]               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_DIV          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_MOD          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_MUL          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_SUB          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    EQ_ADD          reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    =               reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)
    AS              reduce using rule 85 (function_call -> $ ID TARROW ID ( function_arguments ) .)


state 390

    (70) function_call -> . ENV FROM ID { program } .
    ;               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    >               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    <               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    &               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    |               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_GREATER      reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_LESS         reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    NOT_EQEQ        reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQEQ            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    %               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    *               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    /               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    -               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    +               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    .               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    COLON_COLON     reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    ^               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    [               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    (               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    $               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    ID              reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    !               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    ?               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    HTMLSTART       reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    {               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    STRING          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    CHAR            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    FALSE           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    TRUE            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    FLOAT           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    INT             reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    NULL            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    #               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    NEW             reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE     reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    PHPSTART        reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    LIMPORT         reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    IMPORT          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    RETURN          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    DEL             reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    FOREACH         reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    FOR             reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    DEBUG           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    SKIP            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    BREAK           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    LET             reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    WHILE           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    NAMESPACE       reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    CLASS           reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    FUNC            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    INIT            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    IF              reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    $end            reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    ,               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    PHPEND          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    }               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    )               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    HTMLEND         reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    SARROW          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    ]               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_DIV          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_MOD          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_MUL          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_SUB          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    EQ_ADD          reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    =               reduce using rule 70 (function_call -> . ENV FROM ID { program } .)
    AS              reduce using rule 70 (function_call -> . ENV FROM ID { program } .)


state 391

    (107) for_loop -> FOREACH ( expression AS expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 411
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 392

    (108) for_loop -> FOR ( expression ) { program } .
    ?               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    (               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    !               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    +               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    -               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    *               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    &               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    ID              reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    $               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    HTMLSTART       reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    PHPSTART        reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    LIMPORT         reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    .               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    IMPORT          reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    RETURN          reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    DEL             reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    FOREACH         reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    FOR             reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    DEBUG           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    SKIP            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    BREAK           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    LET             reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    WHILE           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    NAMESPACE       reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    CLASS           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    FUNC            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    INIT            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    [               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    {               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    STRING          reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    CHAR            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    FALSE           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    TRUE            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    FLOAT           reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    INT             reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    NULL            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    #               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    NEW             reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    IF              reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    $end            reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    PHPEND          reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)
    }               reduce using rule 108 (for_loop -> FOR ( expression ) { program } .)


state 393

    (115) variable_assignment -> LET ID : ID = expression ; .
    ?               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    (               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    !               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    +               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    -               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    *               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    &               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    ID              reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    $               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    HTMLSTART       reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    PHPSTART        reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    LIMPORT         reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    .               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    IMPORT          reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    RETURN          reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    DEL             reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    FOREACH         reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    FOR             reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    DEBUG           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    SKIP            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    BREAK           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    LET             reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    WHILE           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    NAMESPACE       reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    CLASS           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    FUNC            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    INIT            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    [               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    {               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    STRING          reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    CHAR            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    FALSE           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    TRUE            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    FLOAT           reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    INT             reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    NULL            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    #               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    NEW             reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE     reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    IF              reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    $end            reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    PHPEND          reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)
    }               reduce using rule 115 (variable_assignment -> LET ID : ID = expression ; .)


state 394

    (109) while_loop -> WHILE ( expression ) { program } .
    ?               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    (               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    !               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    +               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    -               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    *               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    &               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    ID              reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    $               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    HTMLSTART       reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    PHPSTART        reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    LIMPORT         reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    .               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    IMPORT          reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    RETURN          reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    DEL             reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    FOREACH         reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    FOR             reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    DEBUG           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    SKIP            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    BREAK           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    LET             reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    WHILE           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    NAMESPACE       reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    CLASS           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    FUNC            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    INIT            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    [               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    {               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    STRING          reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    CHAR            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    FALSE           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    TRUE            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    FLOAT           reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    INT             reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    NULL            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    #               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    NEW             reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    IF              reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    $end            reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    PHPEND          reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)
    }               reduce using rule 109 (while_loop -> WHILE ( expression ) { program } .)


state 395

    (135) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 5
    program                        shift and go to state 412
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 396

    (105) class_declaration -> CLASS ID EXTENDS ID { program } .
    ?               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    (               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    !               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    +               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    -               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    *               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    &               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    ID              reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    $               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    HTMLSTART       reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    PHPSTART        reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    LIMPORT         reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    .               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    IMPORT          reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    RETURN          reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    DEL             reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    FOREACH         reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    FOR             reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    DEBUG           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    SKIP            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    BREAK           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    LET             reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    WHILE           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    NAMESPACE       reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    CLASS           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    FUNC            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    INIT            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    [               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    {               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    STRING          reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    CHAR            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    FALSE           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    TRUE            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    FLOAT           reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    INT             reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    NULL            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    #               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    NEW             reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    PYTHON_CODE     reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    IF              reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    $end            reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    PHPEND          reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)
    }               reduce using rule 105 (class_declaration -> CLASS ID EXTENDS ID { program } .)


state 397

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) . { program } TARROW expression
    {               shift and go to state 413


state 398

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 414


state 399

    (96) function_declaration -> FUNC ID ( empty ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 415
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 400

    (97) function_declaration -> FUNC ID ( empty ) : expression . { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    {               shift and go to state 416
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 401

    (98) function_declaration -> FUNC ID ( function_arguments ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 417
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 402

    (99) function_declaration -> FUNC ID ( function_arguments ) : expression . { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    {               shift and go to state 418
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    function_arguments             shift and go to state 106
    expression                     shift and go to state 86
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 403

    (91) function_declaration -> INIT ( function_arguments ) { program } . ;
    ;               shift and go to state 419


state 404

    (132) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    ?               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    *               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    &               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    $               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    HTMLSTART       reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    PHPSTART        reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    LIMPORT         reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    .               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    IMPORT          reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    RETURN          reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    DEL             reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    FOREACH         reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    FOR             reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    DEBUG           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    SKIP            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    BREAK           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    LET             reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    WHILE           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    INIT            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    CHAR            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    NULL            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    #               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    NEW             reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    PHPEND          reduce using rule 132 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 132 (if_statement -> IF ( expression ) { program } .)


state 405

    (72) function_call -> expression ( empty ) FARROW { program } .
    ;               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    >               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    <               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    &               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    |               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_GREATER      reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_LESS         reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQEQ            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    %               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    *               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    /               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    -               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    +               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    .               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    COLON_COLON     reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    ^               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    [               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    (               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    $               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    ID              reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    !               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    ?               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    HTMLSTART       reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    {               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    STRING          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    CHAR            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    FALSE           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    TRUE            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    FLOAT           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    INT             reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    NULL            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    #               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    NEW             reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    PHPSTART        reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    LIMPORT         reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    IMPORT          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    RETURN          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    DEL             reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    FOREACH         reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    FOR             reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    DEBUG           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    SKIP            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    BREAK           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    LET             reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    WHILE           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    NAMESPACE       reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    CLASS           reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    FUNC            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    INIT            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    IF              reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    $end            reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    ,               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    PHPEND          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    }               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    )               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    HTMLEND         reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    SARROW          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    ]               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_DIV          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MOD          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MUL          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_SUB          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_ADD          reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    =               reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)
    AS              reduce using rule 72 (function_call -> expression ( empty ) FARROW { program } .)


state 406

    (86) function_call -> expression ( function_arguments ) FARROW { program } .
    ;               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    >               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    <               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    &               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    |               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_GREATER      reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_LESS         reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQEQ            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    %               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    *               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    /               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    -               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    +               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    .               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    COLON_COLON     reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ^               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    [               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    (               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    $               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ID              reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    !               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ?               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    HTMLSTART       reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    {               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    STRING          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    CHAR            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FALSE           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    TRUE            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FLOAT           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INT             reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NULL            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    #               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NEW             reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PHPSTART        reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LIMPORT         reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IMPORT          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    RETURN          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEL             reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FOREACH         reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FOR             reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEBUG           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SKIP            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    BREAK           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LET             reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    WHILE           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NAMESPACE       reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    CLASS           reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FUNC            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INIT            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IF              reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    $end            reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ,               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PHPEND          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    }               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    )               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    HTMLEND         reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SARROW          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ]               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_DIV          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MOD          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MUL          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_SUB          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_ADD          reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    =               reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)
    AS              reduce using rule 86 (function_call -> expression ( function_arguments ) FARROW { program } .)


state 407

    (92) function_declaration -> ID FUNC ID ( empty ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 420
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 408

    (94) function_declaration -> ID FUNC ID ( empty ) : expression . { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    {               shift and go to state 421
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 409

    (93) function_declaration -> ID FUNC ID ( function_arguments ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 422
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    statement                      shift and go to state 76
    expression                     shift and go to state 5
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 410

    (95) function_declaration -> ID FUNC ID ( function_arguments ) : expression . { program }
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    {               shift and go to state 423
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    function_arguments             shift and go to state 106
    expression                     shift and go to state 86
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 411

    (107) for_loop -> FOREACH ( expression AS expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 424
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 412

    (135) else_if_statement -> ELSE IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 425
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 413

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    empty                          shift and go to state 2
    program                        shift and go to state 426
    expression                     shift and go to state 5
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 414

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    program                        shift and go to state 427
    expression                     shift and go to state 5
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 415

    (96) function_declaration -> FUNC ID ( empty ) { program } .
    ?               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    (               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    !               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    +               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    -               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    *               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    &               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    ID              reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    $               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    HTMLSTART       reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    PHPSTART        reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    LIMPORT         reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    .               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    IMPORT          reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    RETURN          reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    DEL             reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    FOREACH         reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    FOR             reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    DEBUG           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    SKIP            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    BREAK           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    LET             reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    WHILE           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    NAMESPACE       reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    CLASS           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    FUNC            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    INIT            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    [               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    {               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    STRING          reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    CHAR            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    FALSE           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    TRUE            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    FLOAT           reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    INT             reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    NULL            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    #               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    NEW             reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    PYTHON_CODE     reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    IF              reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    $end            reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    PHPEND          reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)
    }               reduce using rule 96 (function_declaration -> FUNC ID ( empty ) { program } .)


state 416

    (97) function_declaration -> FUNC ID ( empty ) : expression { . program }
    (148) _tuple -> { . positional_args , }
    (149) _tuple -> { . positional_args }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    empty                          shift and go to state 2
    expression                     shift and go to state 428
    program                        shift and go to state 429
    positional_args                shift and go to state 150
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 417

    (98) function_declaration -> FUNC ID ( function_arguments ) { program } .
    ?               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    (               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    !               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    +               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    -               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    *               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    &               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    ID              reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    $               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    HTMLSTART       reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    PHPSTART        reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    LIMPORT         reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    .               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    IMPORT          reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    RETURN          reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    DEL             reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FOREACH         reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FOR             reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    DEBUG           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    SKIP            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    BREAK           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    LET             reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    WHILE           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    NAMESPACE       reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    CLASS           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FUNC            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    INIT            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    [               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    {               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    STRING          reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    CHAR            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FALSE           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    TRUE            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    FLOAT           reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    INT             reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    NULL            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    #               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    NEW             reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    PYTHON_CODE     reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    IF              reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    $end            reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    PHPEND          reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)
    }               reduce using rule 98 (function_declaration -> FUNC ID ( function_arguments ) { program } .)


state 418

    (99) function_declaration -> FUNC ID ( function_arguments ) : expression { . program }
    (148) _tuple -> { . positional_args , }
    (149) _tuple -> { . positional_args }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 428
    program                        shift and go to state 430
    positional_args                shift and go to state 150
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 419

    (91) function_declaration -> INIT ( function_arguments ) { program } ; .
    ?               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    (               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    !               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    +               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    -               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    *               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    &               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    ID              reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    $               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    HTMLSTART       reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PHPSTART        reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    LIMPORT         reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    .               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    IMPORT          reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    RETURN          reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    DEL             reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FOREACH         reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FOR             reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    DEBUG           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    SKIP            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    BREAK           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    LET             reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    WHILE           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    NAMESPACE       reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    CLASS           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FUNC            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    INIT            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    [               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    {               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    STRING          reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    CHAR            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FALSE           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    TRUE            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FLOAT           reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    INT             reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    NULL            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    #               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    NEW             reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PYTHON_CODE_EXEC reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PYTHON_CODE     reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    IF              reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    $end            reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PHPEND          reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    }               reduce using rule 91 (function_declaration -> INIT ( function_arguments ) { program } ; .)


state 420

    (92) function_declaration -> ID FUNC ID ( empty ) { program } .
    ?               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    (               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    !               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    +               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    -               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    *               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    &               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    ID              reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    $               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    HTMLSTART       reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    PHPSTART        reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    LIMPORT         reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    .               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    IMPORT          reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    RETURN          reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    DEL             reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    FOREACH         reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    FOR             reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    DEBUG           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    SKIP            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    BREAK           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    LET             reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    WHILE           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    NAMESPACE       reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    CLASS           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    FUNC            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    INIT            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    [               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    {               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    STRING          reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    CHAR            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    FALSE           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    TRUE            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    FLOAT           reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    INT             reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    NULL            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    #               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    NEW             reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    PYTHON_CODE     reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    IF              reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    $end            reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    PHPEND          reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)
    }               reduce using rule 92 (function_declaration -> ID FUNC ID ( empty ) { program } .)


state 421

    (94) function_declaration -> ID FUNC ID ( empty ) : expression { . program }
    (148) _tuple -> { . positional_args , }
    (149) _tuple -> { . positional_args }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    empty                          shift and go to state 2
    expression                     shift and go to state 428
    program                        shift and go to state 431
    positional_args                shift and go to state 150
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 422

    (93) function_declaration -> ID FUNC ID ( function_arguments ) { program } .
    ?               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    (               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    !               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    +               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    -               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    *               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    &               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    ID              reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    $               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    HTMLSTART       reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    PHPSTART        reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    LIMPORT         reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    .               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    IMPORT          reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    RETURN          reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    DEL             reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    FOREACH         reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    FOR             reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    DEBUG           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    SKIP            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    BREAK           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    LET             reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    WHILE           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    NAMESPACE       reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    CLASS           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    FUNC            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    INIT            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    [               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    {               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    STRING          reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    CHAR            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    FALSE           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    TRUE            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    FLOAT           reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    INT             reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    NULL            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    #               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    NEW             reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    PYTHON_CODE     reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    IF              reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    $end            reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    PHPEND          reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)
    }               reduce using rule 93 (function_declaration -> ID FUNC ID ( function_arguments ) { program } .)


state 423

    (95) function_declaration -> ID FUNC ID ( function_arguments ) : expression { . program }
    (148) _tuple -> { . positional_args , }
    (149) _tuple -> { . positional_args }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (169) empty -> .
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 169 (empty -> .)
    ?               reduce using rule 169 (empty -> .)
    (               reduce using rule 169 (empty -> .)
    ID              reduce using rule 169 (empty -> .)
    $               reduce using rule 169 (empty -> .)
    HTMLSTART       reduce using rule 169 (empty -> .)
    PHPSTART        reduce using rule 169 (empty -> .)
    LIMPORT         reduce using rule 169 (empty -> .)
    .               reduce using rule 169 (empty -> .)
    IMPORT          reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    DEL             reduce using rule 169 (empty -> .)
    FOREACH         reduce using rule 169 (empty -> .)
    FOR             reduce using rule 169 (empty -> .)
    DEBUG           reduce using rule 169 (empty -> .)
    SKIP            reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    LET             reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    NAMESPACE       reduce using rule 169 (empty -> .)
    CLASS           reduce using rule 169 (empty -> .)
    FUNC            reduce using rule 169 (empty -> .)
    INIT            reduce using rule 169 (empty -> .)
    [               reduce using rule 169 (empty -> .)
    {               reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FLOAT           reduce using rule 169 (empty -> .)
    INT             reduce using rule 169 (empty -> .)
    NULL            reduce using rule 169 (empty -> .)
    #               reduce using rule 169 (empty -> .)
    NEW             reduce using rule 169 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 169 (empty -> .)
    PYTHON_CODE     reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38

    expression                     shift and go to state 428
    program                        shift and go to state 432
    positional_args                shift and go to state 150
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 424

    (107) for_loop -> FOREACH ( expression AS expression ) { program } .
    ?               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    (               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    !               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    +               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    -               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    *               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    &               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    ID              reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    $               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    HTMLSTART       reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    PHPSTART        reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    LIMPORT         reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    .               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    IMPORT          reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    RETURN          reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    DEL             reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    FOREACH         reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    FOR             reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    DEBUG           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    SKIP            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    BREAK           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    LET             reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    WHILE           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    NAMESPACE       reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    CLASS           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    FUNC            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    INIT            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    [               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    {               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    STRING          reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    CHAR            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    FALSE           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    TRUE            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    FLOAT           reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    INT             reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    NULL            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    #               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    NEW             reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    PYTHON_CODE     reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    IF              reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    $end            reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    PHPEND          reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)
    }               reduce using rule 107 (for_loop -> FOREACH ( expression AS expression ) { program } .)


state 425

    (135) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ?               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    *               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    &               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    HTMLSTART       reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PHPSTART        reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LIMPORT         reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    .               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IMPORT          reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    RETURN          reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEL             reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOREACH         reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOR             reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEBUG           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SKIP            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    BREAK           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LET             reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    WHILE           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INIT            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CHAR            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NULL            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    #               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NEW             reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PHPEND          reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 135 (else_if_statement -> ELSE IF ( expression ) { program } .)


state 426

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 433
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 427

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 434
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 428

    (110) positional_args -> expression .
    (5) statement -> expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! reduce/reduce conflict for } resolved using rule 5 (statement -> expression .)
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    ,               reduce using rule 110 (positional_args -> expression .)
    }               reduce using rule 5 (statement -> expression .)
    PHPSTART        reduce using rule 5 (statement -> expression .)
    LIMPORT         reduce using rule 5 (statement -> expression .)
    IMPORT          reduce using rule 5 (statement -> expression .)
    RETURN          reduce using rule 5 (statement -> expression .)
    DEL             reduce using rule 5 (statement -> expression .)
    FOREACH         reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    DEBUG           reduce using rule 5 (statement -> expression .)
    SKIP            reduce using rule 5 (statement -> expression .)
    BREAK           reduce using rule 5 (statement -> expression .)
    LET             reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    NAMESPACE       reduce using rule 5 (statement -> expression .)
    CLASS           reduce using rule 5 (statement -> expression .)
    FUNC            reduce using rule 5 (statement -> expression .)
    INIT            reduce using rule 5 (statement -> expression .)
    IF              reduce using rule 5 (statement -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 429

    (97) function_declaration -> FUNC ID ( empty ) : expression { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 435
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 430

    (99) function_declaration -> FUNC ID ( function_arguments ) : expression { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 436
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 431

    (94) function_declaration -> ID FUNC ID ( empty ) : expression { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 437
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 432

    (95) function_declaration -> ID FUNC ID ( function_arguments ) : expression { program . }
    (3) program -> program . statement
    (4) statement -> . ? expression ;
    (5) statement -> . expression
    (6) statement -> . sandbox
    (7) statement -> . import_statement
    (8) statement -> . variable_operation
    (9) statement -> . return_statement
    (10) statement -> . delete_statement
    (11) statement -> . for_loop
    (12) statement -> . break_statement
    (13) statement -> . variable_assignment
    (14) statement -> . python_code_statement
    (15) statement -> . while_loop
    (16) statement -> . conditional
    (17) statement -> . function_call_statement
    (18) statement -> . class_declaration
    (19) statement -> . function_declaration
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (20) sandbox -> . PHPSTART program PHPEND
    (21) sandbox -> . LIMPORT expression ;
    (138) import_statement -> . . SELFISH ;
    (139) import_statement -> . . GLOBAL ;
    (140) import_statement -> . IMPORT expression ;
    (118) variable_operation -> . get_index EQ_DIV expression ;
    (119) variable_operation -> . ID EQ_DIV expression ;
    (120) variable_operation -> . get_index EQ_MOD expression ;
    (121) variable_operation -> . ID EQ_MOD expression ;
    (122) variable_operation -> . get_index EQ_MUL expression ;
    (123) variable_operation -> . ID EQ_MUL expression ;
    (124) variable_operation -> . get_index EQ_SUB expression ;
    (125) variable_operation -> . ID EQ_SUB expression ;
    (126) variable_operation -> . get_index EQ_ADD expression ;
    (127) variable_operation -> . ID EQ_ADD expression ;
    (69) return_statement -> . RETURN expression ;
    (137) delete_statement -> . DEL ID ;
    (107) for_loop -> . FOREACH ( expression AS expression ) { program }
    (108) for_loop -> . FOR ( expression ) { program }
    (66) break_statement -> . DEBUG ;
    (67) break_statement -> . SKIP ;
    (68) break_statement -> . BREAK ;
    (114) variable_assignment -> . LET get_index = expression ;
    (115) variable_assignment -> . LET ID : ID = expression ;
    (116) variable_assignment -> . $ ID TARROW ID = expression ;
    (117) variable_assignment -> . $ ID = expression ;
    (65) python_code_statement -> . python_code ;
    (109) while_loop -> . WHILE ( expression ) { program }
    (128) conditional -> . if_statement else_statement
    (129) conditional -> . if_statement else_if_loop else_statement
    (130) conditional -> . if_statement else_if_loop
    (131) conditional -> . if_statement
    (64) function_call_statement -> . function_call ;
    (103) class_declaration -> . NAMESPACE ID ;
    (104) class_declaration -> . NAMESPACE ID { program }
    (105) class_declaration -> . CLASS ID EXTENDS ID { program }
    (106) class_declaration -> . CLASS ID { program }
    (89) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (90) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (91) function_declaration -> . INIT ( function_arguments ) { program } ;
    (92) function_declaration -> . ID FUNC ID ( empty ) { program }
    (93) function_declaration -> . ID FUNC ID ( function_arguments ) { program }
    (94) function_declaration -> . ID FUNC ID ( empty ) : expression { program }
    (95) function_declaration -> . ID FUNC ID ( function_arguments ) : expression { program }
    (96) function_declaration -> . FUNC ID ( empty ) { program }
    (97) function_declaration -> . FUNC ID ( empty ) : expression { program }
    (98) function_declaration -> . FUNC ID ( function_arguments ) { program }
    (99) function_declaration -> . FUNC ID ( function_arguments ) : expression { program }
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (132) if_statement -> . IF ( expression ) { program }
    }               shift and go to state 438
    ?               shift and go to state 4
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 40
    $               shift and go to state 41
    HTMLSTART       shift and go to state 43
    PHPSTART        shift and go to state 45
    LIMPORT         shift and go to state 46
    .               shift and go to state 42
    IMPORT          shift and go to state 47
    RETURN          shift and go to state 48
    DEL             shift and go to state 49
    FOREACH         shift and go to state 50
    FOR             shift and go to state 52
    DEBUG           shift and go to state 53
    SKIP            shift and go to state 54
    BREAK           shift and go to state 55
    LET             shift and go to state 56
    WHILE           shift and go to state 57
    NAMESPACE       shift and go to state 59
    CLASS           shift and go to state 60
    FUNC            shift and go to state 61
    INIT            shift and go to state 62
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74
    IF              shift and go to state 75

    expression                     shift and go to state 5
    statement                      shift and go to state 76
    sandbox                        shift and go to state 6
    import_statement               shift and go to state 7
    variable_operation             shift and go to state 8
    return_statement               shift and go to state 9
    delete_statement               shift and go to state 10
    for_loop                       shift and go to state 11
    break_statement                shift and go to state 12
    variable_assignment            shift and go to state 13
    python_code_statement          shift and go to state 14
    while_loop                     shift and go to state 15
    conditional                    shift and go to state 16
    function_call_statement        shift and go to state 17
    class_declaration              shift and go to state 18
    function_declaration           shift and go to state 19
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 31
    function_call                  shift and go to state 32
    python_code                    shift and go to state 33
    html_full                      shift and go to state 44
    if_statement                   shift and go to state 58

state 433

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 439


state 434

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 440


state 435

    (97) function_declaration -> FUNC ID ( empty ) : expression { program } .
    ?               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    (               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    !               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    +               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    -               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    *               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    &               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    ID              reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    $               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    HTMLSTART       reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    PHPSTART        reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    LIMPORT         reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    .               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    IMPORT          reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    RETURN          reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    DEL             reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    FOREACH         reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    FOR             reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    DEBUG           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    SKIP            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    BREAK           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    LET             reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    WHILE           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    NAMESPACE       reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    CLASS           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    FUNC            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    INIT            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    [               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    {               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    STRING          reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    CHAR            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    FALSE           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    TRUE            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    FLOAT           reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    INT             reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    NULL            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    #               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    NEW             reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    PYTHON_CODE     reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    IF              reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    $end            reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    PHPEND          reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)
    }               reduce using rule 97 (function_declaration -> FUNC ID ( empty ) : expression { program } .)


state 436

    (99) function_declaration -> FUNC ID ( function_arguments ) : expression { program } .
    ?               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    (               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    !               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    +               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    -               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    *               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    &               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    ID              reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    $               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    HTMLSTART       reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    PHPSTART        reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    LIMPORT         reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    .               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    IMPORT          reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    RETURN          reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    DEL             reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    FOREACH         reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    FOR             reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    DEBUG           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    SKIP            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    BREAK           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    LET             reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    WHILE           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    NAMESPACE       reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    CLASS           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    FUNC            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    INIT            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    [               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    {               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    STRING          reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    CHAR            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    FALSE           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    TRUE            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    FLOAT           reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    INT             reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    NULL            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    #               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    NEW             reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    PYTHON_CODE     reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    IF              reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    $end            reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    PHPEND          reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)
    }               reduce using rule 99 (function_declaration -> FUNC ID ( function_arguments ) : expression { program } .)


state 437

    (94) function_declaration -> ID FUNC ID ( empty ) : expression { program } .
    ?               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    (               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    !               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    +               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    -               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    *               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    &               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    ID              reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    $               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    HTMLSTART       reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    PHPSTART        reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    LIMPORT         reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    .               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    IMPORT          reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    RETURN          reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    DEL             reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    FOREACH         reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    FOR             reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    DEBUG           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    SKIP            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    BREAK           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    LET             reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    WHILE           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    NAMESPACE       reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    CLASS           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    FUNC            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    INIT            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    [               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    {               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    STRING          reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    CHAR            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    FALSE           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    TRUE            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    FLOAT           reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    INT             reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    NULL            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    #               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    NEW             reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    PYTHON_CODE     reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    IF              reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    $end            reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    PHPEND          reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)
    }               reduce using rule 94 (function_declaration -> ID FUNC ID ( empty ) : expression { program } .)


state 438

    (95) function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .
    ?               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    (               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    !               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    +               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    -               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    *               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    &               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    ID              reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    $               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    HTMLSTART       reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    PHPSTART        reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    LIMPORT         reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    .               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    IMPORT          reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    RETURN          reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    DEL             reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    FOREACH         reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    FOR             reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    DEBUG           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    SKIP            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    BREAK           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    LET             reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    WHILE           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    NAMESPACE       reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    CLASS           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    FUNC            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    INIT            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    [               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    {               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    STRING          reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    CHAR            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    FALSE           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    TRUE            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    FLOAT           reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    INT             reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    NULL            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    #               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    NEW             reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    PYTHON_CODE     reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    IF              reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    $end            reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    PHPEND          reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)
    }               reduce using rule 95 (function_declaration -> ID FUNC ID ( function_arguments ) : expression { program } .)


state 439

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 441
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 440

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW . expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
    (               shift and go to state 34
    !               shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 39
    &               shift and go to state 38
    ID              shift and go to state 83
    $               shift and go to state 84
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    [               shift and go to state 63
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 85
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 442
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    id                             shift and go to state 25
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 441

    (89) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    PHPSTART        reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOREACH         reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEBUG           reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INIT            reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PHPEND          reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 89 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    expression                     shift and go to state 86
    function_arguments             shift and go to state 106
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

state 442

    (90) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (42) expression -> expression . & expression
    (43) expression -> expression . | expression
    (44) expression -> expression . EQ_GREATER expression
    (45) expression -> expression . EQ_LESS expression
    (46) expression -> expression . NOT_EQEQ expression
    (47) expression -> expression . EQEQ expression
    (48) expression -> expression . % expression
    (49) expression -> expression . * expression
    (50) expression -> expression . / expression
    (51) expression -> expression . - expression
    (52) expression -> expression . + expression
    (57) expression -> expression . . expression
    (165) class_attribute -> expression . COLON_COLON ID
    (146) get_index -> expression . ^ expression
    (147) get_index -> expression . [ expression ]
    (72) function_call -> expression . ( empty ) FARROW { program }
    (79) function_call -> expression . ( empty )
    (86) function_call -> expression . ( function_arguments ) FARROW { program }
    (87) function_call -> expression . $ ID = expression ;
    (88) function_call -> expression . function_arguments
    (100) function_arguments -> . kwargs
    (101) function_arguments -> . positional_args , kwargs
    (102) function_arguments -> . positional_args
    (112) kwargs -> . ID = expression
    (113) kwargs -> . kwargs , id = expression
    (110) positional_args -> . expression
    (111) positional_args -> . positional_args , expression
    (22) expression -> . assoc_array
    (23) expression -> . _numpy
    (24) expression -> . _list
    (25) expression -> . _tuple
    (26) expression -> . class_attribute
    (27) expression -> . id
    (28) expression -> . string
    (29) expression -> . bool
    (30) expression -> . float
    (31) expression -> . int
    (32) expression -> . null
    (33) expression -> . get_index
    (34) expression -> . function_call
    (35) expression -> . python_code
    (36) expression -> . ( expression )
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . ! expression
    (40) expression -> . + expression
    (41) expression -> . - expression
    (42) expression -> . expression & expression
    (43) expression -> . expression | expression
    (44) expression -> . expression EQ_GREATER expression
    (45) expression -> . expression EQ_LESS expression
    (46) expression -> . expression NOT_EQEQ expression
    (47) expression -> . expression EQEQ expression
    (48) expression -> . expression % expression
    (49) expression -> . expression * expression
    (50) expression -> . expression / expression
    (51) expression -> . expression - expression
    (52) expression -> . expression + expression
    (53) expression -> . * ID
    (54) expression -> . & ID
    (55) expression -> . ID OF ID
    (56) expression -> . $ expression
    (57) expression -> . expression . expression
    (58) expression -> . ? HTMLEND
    (59) expression -> . HTMLSTART
    (60) expression -> . html_full
    (142) assoc_array -> . [ assoc_array_items ]
    (143) assoc_array -> . [ empty ]
    (152) _numpy -> . ( , )
    (153) _numpy -> . ( )
    (154) _numpy -> . ( expression , )
    (155) _numpy -> . ( items , )
    (156) _numpy -> . ( items )
    (150) _list -> . [ positional_args , ]
    (151) _list -> . [ positional_args ]
    (148) _tuple -> . { positional_args , }
    (149) _tuple -> . { positional_args }
    (165) class_attribute -> . expression COLON_COLON ID
    (166) id -> . ID
    (160) string -> . STRING
    (161) string -> . CHAR
    (163) bool -> . FALSE
    (164) bool -> . TRUE
    (162) float -> . FLOAT
    (159) int -> . INT
    (141) null -> . NULL
    (146) get_index -> . expression ^ expression
    (147) get_index -> . expression [ expression ]
    (70) function_call -> . . ENV FROM ID { program }
    (71) function_call -> . . ENV { program }
    (72) function_call -> . expression ( empty ) FARROW { program }
    (73) function_call -> . ID TARROW ID ( function_arguments )
    (74) function_call -> . ID \ ID
    (75) function_call -> . ID / ID
    (76) function_call -> . ID TARROW ID
    (77) function_call -> . # DEPENDS expression
    (78) function_call -> . # DEFINE expression ? ID
    (79) function_call -> . expression ( empty )
    (80) function_call -> . NEW expression ( empty )
    (81) function_call -> . NEW expression ( function_arguments )
    (82) function_call -> . ID COLON_COLON ID ( empty )
    (83) function_call -> . ID COLON_COLON ID ( function_arguments )
    (84) function_call -> . $ ID TARROW ID ( empty )
    (85) function_call -> . $ ID TARROW ID ( function_arguments )
    (86) function_call -> . expression ( function_arguments ) FARROW { program }
    (87) function_call -> . expression $ ID = expression ;
    (88) function_call -> . expression function_arguments
    (167) python_code -> . PYTHON_CODE_EXEC
    (168) python_code -> . PYTHON_CODE
    (61) html_full -> . HTMLSTART empty HTMLEND
    (62) html_full -> . HTMLSTART expression HTMLEND
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for $ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for HTMLSTART resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for PYTHON_CODE_EXEC resolved as shift
  ! shift/reduce conflict for PYTHON_CODE resolved as shift
    PHPSTART        reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOREACH         reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEBUG           reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INIT            reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PHPEND          reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 90 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    .               shift and go to state 100
    COLON_COLON     shift and go to state 101
    ^               shift and go to state 103
    [               shift and go to state 104
    (               shift and go to state 105
    $               shift and go to state 107
    ID              shift and go to state 102
    !               shift and go to state 35
    ?               shift and go to state 77
    HTMLSTART       shift and go to state 43
    {               shift and go to state 51
    STRING          shift and go to state 64
    CHAR            shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    #               shift and go to state 71
    NEW             shift and go to state 72
    PYTHON_CODE_EXEC shift and go to state 73
    PYTHON_CODE     shift and go to state 74

    function_arguments             shift and go to state 106
    expression                     shift and go to state 86
    kwargs                         shift and go to state 108
    positional_args                shift and go to state 109
    id                             shift and go to state 25
    assoc_array                    shift and go to state 20
    _numpy                         shift and go to state 21
    _list                          shift and go to state 22
    _tuple                         shift and go to state 23
    class_attribute                shift and go to state 24
    string                         shift and go to state 26
    bool                           shift and go to state 27
    float                          shift and go to state 28
    int                            shift and go to state 29
    null                           shift and go to state 30
    get_index                      shift and go to state 80
    function_call                  shift and go to state 81
    python_code                    shift and go to state 82
    html_full                      shift and go to state 44

Conflicts:

shift/reduce conflict for & in state 5 resolved as shift
shift/reduce conflict for * in state 5 resolved as shift
shift/reduce conflict for - in state 5 resolved as shift
shift/reduce conflict for + in state 5 resolved as shift
shift/reduce conflict for . in state 5 resolved as shift
shift/reduce conflict for [ in state 5 resolved as shift
shift/reduce conflict for ( in state 5 resolved as shift
shift/reduce conflict for $ in state 5 resolved as shift
shift/reduce conflict for ID in state 5 resolved as shift
shift/reduce conflict for ! in state 5 resolved as shift
shift/reduce conflict for ? in state 5 resolved as shift
shift/reduce conflict for HTMLSTART in state 5 resolved as shift
shift/reduce conflict for { in state 5 resolved as shift
shift/reduce conflict for STRING in state 5 resolved as shift
shift/reduce conflict for CHAR in state 5 resolved as shift
shift/reduce conflict for FALSE in state 5 resolved as shift
shift/reduce conflict for TRUE in state 5 resolved as shift
shift/reduce conflict for FLOAT in state 5 resolved as shift
shift/reduce conflict for INT in state 5 resolved as shift
shift/reduce conflict for NULL in state 5 resolved as shift
shift/reduce conflict for # in state 5 resolved as shift
shift/reduce conflict for NEW in state 5 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 5 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 5 resolved as shift
shift/reduce conflict for FUNC in state 40 resolved as shift
shift/reduce conflict for / in state 40 resolved as shift
shift/reduce conflict for COLON_COLON in state 40 resolved as shift
shift/reduce conflict for ( in state 43 resolved as shift
shift/reduce conflict for ! in state 43 resolved as shift
shift/reduce conflict for + in state 43 resolved as shift
shift/reduce conflict for - in state 43 resolved as shift
shift/reduce conflict for * in state 43 resolved as shift
shift/reduce conflict for & in state 43 resolved as shift
shift/reduce conflict for ID in state 43 resolved as shift
shift/reduce conflict for $ in state 43 resolved as shift
shift/reduce conflict for ? in state 43 resolved as shift
shift/reduce conflict for HTMLSTART in state 43 resolved as shift
shift/reduce conflict for [ in state 43 resolved as shift
shift/reduce conflict for { in state 43 resolved as shift
shift/reduce conflict for STRING in state 43 resolved as shift
shift/reduce conflict for CHAR in state 43 resolved as shift
shift/reduce conflict for FALSE in state 43 resolved as shift
shift/reduce conflict for TRUE in state 43 resolved as shift
shift/reduce conflict for FLOAT in state 43 resolved as shift
shift/reduce conflict for INT in state 43 resolved as shift
shift/reduce conflict for NULL in state 43 resolved as shift
shift/reduce conflict for . in state 43 resolved as shift
shift/reduce conflict for # in state 43 resolved as shift
shift/reduce conflict for NEW in state 43 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 43 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 43 resolved as shift
shift/reduce conflict for / in state 83 resolved as shift
shift/reduce conflict for COLON_COLON in state 83 resolved as shift
shift/reduce conflict for > in state 86 resolved as shift
shift/reduce conflict for < in state 86 resolved as shift
shift/reduce conflict for & in state 86 resolved as shift
shift/reduce conflict for | in state 86 resolved as shift
shift/reduce conflict for EQ_GREATER in state 86 resolved as shift
shift/reduce conflict for EQ_LESS in state 86 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 86 resolved as shift
shift/reduce conflict for EQEQ in state 86 resolved as shift
shift/reduce conflict for % in state 86 resolved as shift
shift/reduce conflict for * in state 86 resolved as shift
shift/reduce conflict for / in state 86 resolved as shift
shift/reduce conflict for - in state 86 resolved as shift
shift/reduce conflict for + in state 86 resolved as shift
shift/reduce conflict for . in state 86 resolved as shift
shift/reduce conflict for COLON_COLON in state 86 resolved as shift
shift/reduce conflict for ^ in state 86 resolved as shift
shift/reduce conflict for [ in state 86 resolved as shift
shift/reduce conflict for ( in state 86 resolved as shift
shift/reduce conflict for $ in state 86 resolved as shift
shift/reduce conflict for ID in state 86 resolved as shift
shift/reduce conflict for ! in state 86 resolved as shift
shift/reduce conflict for ? in state 86 resolved as shift
shift/reduce conflict for HTMLSTART in state 86 resolved as shift
shift/reduce conflict for { in state 86 resolved as shift
shift/reduce conflict for STRING in state 86 resolved as shift
shift/reduce conflict for CHAR in state 86 resolved as shift
shift/reduce conflict for FALSE in state 86 resolved as shift
shift/reduce conflict for TRUE in state 86 resolved as shift
shift/reduce conflict for FLOAT in state 86 resolved as shift
shift/reduce conflict for INT in state 86 resolved as shift
shift/reduce conflict for NULL in state 86 resolved as shift
shift/reduce conflict for # in state 86 resolved as shift
shift/reduce conflict for NEW in state 86 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 86 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 86 resolved as shift
shift/reduce conflict for = in state 102 resolved as shift
shift/reduce conflict for / in state 102 resolved as shift
shift/reduce conflict for COLON_COLON in state 102 resolved as shift
shift/reduce conflict for , in state 108 resolved as shift
shift/reduce conflict for , in state 109 resolved as shift
shift/reduce conflict for > in state 137 resolved as shift
shift/reduce conflict for < in state 137 resolved as shift
shift/reduce conflict for & in state 137 resolved as shift
shift/reduce conflict for | in state 137 resolved as shift
shift/reduce conflict for EQ_GREATER in state 137 resolved as shift
shift/reduce conflict for EQ_LESS in state 137 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 137 resolved as shift
shift/reduce conflict for EQEQ in state 137 resolved as shift
shift/reduce conflict for % in state 137 resolved as shift
shift/reduce conflict for * in state 137 resolved as shift
shift/reduce conflict for / in state 137 resolved as shift
shift/reduce conflict for - in state 137 resolved as shift
shift/reduce conflict for + in state 137 resolved as shift
shift/reduce conflict for . in state 137 resolved as shift
shift/reduce conflict for COLON_COLON in state 137 resolved as shift
shift/reduce conflict for ^ in state 137 resolved as shift
shift/reduce conflict for [ in state 137 resolved as shift
shift/reduce conflict for ( in state 137 resolved as shift
shift/reduce conflict for $ in state 137 resolved as shift
shift/reduce conflict for ID in state 137 resolved as shift
shift/reduce conflict for ! in state 137 resolved as shift
shift/reduce conflict for ? in state 137 resolved as shift
shift/reduce conflict for HTMLSTART in state 137 resolved as shift
shift/reduce conflict for { in state 137 resolved as shift
shift/reduce conflict for STRING in state 137 resolved as shift
shift/reduce conflict for CHAR in state 137 resolved as shift
shift/reduce conflict for FALSE in state 137 resolved as shift
shift/reduce conflict for TRUE in state 137 resolved as shift
shift/reduce conflict for FLOAT in state 137 resolved as shift
shift/reduce conflict for INT in state 137 resolved as shift
shift/reduce conflict for NULL in state 137 resolved as shift
shift/reduce conflict for # in state 137 resolved as shift
shift/reduce conflict for NEW in state 137 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 137 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 137 resolved as shift
shift/reduce conflict for / in state 138 resolved as shift
shift/reduce conflict for COLON_COLON in state 138 resolved as shift
shift/reduce conflict for / in state 157 resolved as shift
shift/reduce conflict for COLON_COLON in state 157 resolved as shift
shift/reduce conflict for / in state 176 resolved as shift
shift/reduce conflict for COLON_COLON in state 176 resolved as shift
shift/reduce conflict for / in state 180 resolved as shift
shift/reduce conflict for COLON_COLON in state 180 resolved as shift
shift/reduce conflict for / in state 188 resolved as shift
shift/reduce conflict for COLON_COLON in state 188 resolved as shift
shift/reduce conflict for > in state 192 resolved as shift
shift/reduce conflict for < in state 192 resolved as shift
shift/reduce conflict for & in state 192 resolved as shift
shift/reduce conflict for | in state 192 resolved as shift
shift/reduce conflict for EQ_GREATER in state 192 resolved as shift
shift/reduce conflict for EQ_LESS in state 192 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 192 resolved as shift
shift/reduce conflict for EQEQ in state 192 resolved as shift
shift/reduce conflict for % in state 192 resolved as shift
shift/reduce conflict for * in state 192 resolved as shift
shift/reduce conflict for / in state 192 resolved as shift
shift/reduce conflict for - in state 192 resolved as shift
shift/reduce conflict for + in state 192 resolved as shift
shift/reduce conflict for . in state 192 resolved as shift
shift/reduce conflict for COLON_COLON in state 192 resolved as shift
shift/reduce conflict for ^ in state 192 resolved as shift
shift/reduce conflict for [ in state 192 resolved as shift
shift/reduce conflict for ( in state 192 resolved as shift
shift/reduce conflict for $ in state 192 resolved as shift
shift/reduce conflict for ID in state 192 resolved as shift
shift/reduce conflict for ! in state 192 resolved as shift
shift/reduce conflict for ? in state 192 resolved as shift
shift/reduce conflict for HTMLSTART in state 192 resolved as shift
shift/reduce conflict for { in state 192 resolved as shift
shift/reduce conflict for STRING in state 192 resolved as shift
shift/reduce conflict for CHAR in state 192 resolved as shift
shift/reduce conflict for FALSE in state 192 resolved as shift
shift/reduce conflict for TRUE in state 192 resolved as shift
shift/reduce conflict for FLOAT in state 192 resolved as shift
shift/reduce conflict for INT in state 192 resolved as shift
shift/reduce conflict for NULL in state 192 resolved as shift
shift/reduce conflict for # in state 192 resolved as shift
shift/reduce conflict for NEW in state 192 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 192 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 192 resolved as shift
shift/reduce conflict for > in state 195 resolved as shift
shift/reduce conflict for < in state 195 resolved as shift
shift/reduce conflict for & in state 195 resolved as shift
shift/reduce conflict for | in state 195 resolved as shift
shift/reduce conflict for EQ_GREATER in state 195 resolved as shift
shift/reduce conflict for EQ_LESS in state 195 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 195 resolved as shift
shift/reduce conflict for EQEQ in state 195 resolved as shift
shift/reduce conflict for % in state 195 resolved as shift
shift/reduce conflict for * in state 195 resolved as shift
shift/reduce conflict for / in state 195 resolved as shift
shift/reduce conflict for - in state 195 resolved as shift
shift/reduce conflict for + in state 195 resolved as shift
shift/reduce conflict for . in state 195 resolved as shift
shift/reduce conflict for COLON_COLON in state 195 resolved as shift
shift/reduce conflict for ^ in state 195 resolved as shift
shift/reduce conflict for [ in state 195 resolved as shift
shift/reduce conflict for ( in state 195 resolved as shift
shift/reduce conflict for $ in state 195 resolved as shift
shift/reduce conflict for ID in state 195 resolved as shift
shift/reduce conflict for ! in state 195 resolved as shift
shift/reduce conflict for ? in state 195 resolved as shift
shift/reduce conflict for HTMLSTART in state 195 resolved as shift
shift/reduce conflict for { in state 195 resolved as shift
shift/reduce conflict for STRING in state 195 resolved as shift
shift/reduce conflict for CHAR in state 195 resolved as shift
shift/reduce conflict for FALSE in state 195 resolved as shift
shift/reduce conflict for TRUE in state 195 resolved as shift
shift/reduce conflict for FLOAT in state 195 resolved as shift
shift/reduce conflict for INT in state 195 resolved as shift
shift/reduce conflict for NULL in state 195 resolved as shift
shift/reduce conflict for # in state 195 resolved as shift
shift/reduce conflict for NEW in state 195 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 195 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 195 resolved as shift
shift/reduce conflict for ] in state 196 resolved as shift
shift/reduce conflict for , in state 197 resolved as shift
shift/reduce conflict for ) in state 197 resolved as shift
shift/reduce conflict for / in state 200 resolved as shift
shift/reduce conflict for COLON_COLON in state 200 resolved as shift
shift/reduce conflict for = in state 201 resolved as shift
shift/reduce conflict for / in state 201 resolved as shift
shift/reduce conflict for COLON_COLON in state 201 resolved as shift
shift/reduce conflict for ( in state 221 resolved as shift
shift/reduce conflict for > in state 262 resolved as shift
shift/reduce conflict for < in state 262 resolved as shift
shift/reduce conflict for & in state 262 resolved as shift
shift/reduce conflict for | in state 262 resolved as shift
shift/reduce conflict for EQ_GREATER in state 262 resolved as shift
shift/reduce conflict for EQ_LESS in state 262 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 262 resolved as shift
shift/reduce conflict for EQEQ in state 262 resolved as shift
shift/reduce conflict for % in state 262 resolved as shift
shift/reduce conflict for * in state 262 resolved as shift
shift/reduce conflict for / in state 262 resolved as shift
shift/reduce conflict for - in state 262 resolved as shift
shift/reduce conflict for + in state 262 resolved as shift
shift/reduce conflict for . in state 262 resolved as shift
shift/reduce conflict for COLON_COLON in state 262 resolved as shift
shift/reduce conflict for ^ in state 262 resolved as shift
shift/reduce conflict for [ in state 262 resolved as shift
shift/reduce conflict for ( in state 262 resolved as shift
shift/reduce conflict for $ in state 262 resolved as shift
shift/reduce conflict for ID in state 262 resolved as shift
shift/reduce conflict for ! in state 262 resolved as shift
shift/reduce conflict for ? in state 262 resolved as shift
shift/reduce conflict for HTMLSTART in state 262 resolved as shift
shift/reduce conflict for { in state 262 resolved as shift
shift/reduce conflict for STRING in state 262 resolved as shift
shift/reduce conflict for CHAR in state 262 resolved as shift
shift/reduce conflict for FALSE in state 262 resolved as shift
shift/reduce conflict for TRUE in state 262 resolved as shift
shift/reduce conflict for FLOAT in state 262 resolved as shift
shift/reduce conflict for INT in state 262 resolved as shift
shift/reduce conflict for NULL in state 262 resolved as shift
shift/reduce conflict for # in state 262 resolved as shift
shift/reduce conflict for NEW in state 262 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 262 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 262 resolved as shift
shift/reduce conflict for ( in state 293 resolved as shift
shift/reduce conflict for ( in state 319 resolved as shift
shift/reduce conflict for & in state 428 resolved as shift
shift/reduce conflict for * in state 428 resolved as shift
shift/reduce conflict for - in state 428 resolved as shift
shift/reduce conflict for + in state 428 resolved as shift
shift/reduce conflict for . in state 428 resolved as shift
shift/reduce conflict for [ in state 428 resolved as shift
shift/reduce conflict for ( in state 428 resolved as shift
shift/reduce conflict for $ in state 428 resolved as shift
shift/reduce conflict for ID in state 428 resolved as shift
shift/reduce conflict for ! in state 428 resolved as shift
shift/reduce conflict for ? in state 428 resolved as shift
shift/reduce conflict for HTMLSTART in state 428 resolved as shift
shift/reduce conflict for { in state 428 resolved as shift
shift/reduce conflict for STRING in state 428 resolved as shift
shift/reduce conflict for CHAR in state 428 resolved as shift
shift/reduce conflict for FALSE in state 428 resolved as shift
shift/reduce conflict for TRUE in state 428 resolved as shift
shift/reduce conflict for FLOAT in state 428 resolved as shift
shift/reduce conflict for INT in state 428 resolved as shift
shift/reduce conflict for NULL in state 428 resolved as shift
shift/reduce conflict for # in state 428 resolved as shift
shift/reduce conflict for NEW in state 428 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 428 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 428 resolved as shift
shift/reduce conflict for & in state 441 resolved as shift
shift/reduce conflict for * in state 441 resolved as shift
shift/reduce conflict for - in state 441 resolved as shift
shift/reduce conflict for + in state 441 resolved as shift
shift/reduce conflict for . in state 441 resolved as shift
shift/reduce conflict for [ in state 441 resolved as shift
shift/reduce conflict for ( in state 441 resolved as shift
shift/reduce conflict for $ in state 441 resolved as shift
shift/reduce conflict for ID in state 441 resolved as shift
shift/reduce conflict for ! in state 441 resolved as shift
shift/reduce conflict for ? in state 441 resolved as shift
shift/reduce conflict for HTMLSTART in state 441 resolved as shift
shift/reduce conflict for { in state 441 resolved as shift
shift/reduce conflict for STRING in state 441 resolved as shift
shift/reduce conflict for CHAR in state 441 resolved as shift
shift/reduce conflict for FALSE in state 441 resolved as shift
shift/reduce conflict for TRUE in state 441 resolved as shift
shift/reduce conflict for FLOAT in state 441 resolved as shift
shift/reduce conflict for INT in state 441 resolved as shift
shift/reduce conflict for NULL in state 441 resolved as shift
shift/reduce conflict for # in state 441 resolved as shift
shift/reduce conflict for NEW in state 441 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 441 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 441 resolved as shift
shift/reduce conflict for & in state 442 resolved as shift
shift/reduce conflict for * in state 442 resolved as shift
shift/reduce conflict for - in state 442 resolved as shift
shift/reduce conflict for + in state 442 resolved as shift
shift/reduce conflict for . in state 442 resolved as shift
shift/reduce conflict for [ in state 442 resolved as shift
shift/reduce conflict for ( in state 442 resolved as shift
shift/reduce conflict for $ in state 442 resolved as shift
shift/reduce conflict for ID in state 442 resolved as shift
shift/reduce conflict for ! in state 442 resolved as shift
shift/reduce conflict for ? in state 442 resolved as shift
shift/reduce conflict for HTMLSTART in state 442 resolved as shift
shift/reduce conflict for { in state 442 resolved as shift
shift/reduce conflict for STRING in state 442 resolved as shift
shift/reduce conflict for CHAR in state 442 resolved as shift
shift/reduce conflict for FALSE in state 442 resolved as shift
shift/reduce conflict for TRUE in state 442 resolved as shift
shift/reduce conflict for FLOAT in state 442 resolved as shift
shift/reduce conflict for INT in state 442 resolved as shift
shift/reduce conflict for NULL in state 442 resolved as shift
shift/reduce conflict for # in state 442 resolved as shift
shift/reduce conflict for NEW in state 442 resolved as shift
shift/reduce conflict for PYTHON_CODE_EXEC in state 442 resolved as shift
shift/reduce conflict for PYTHON_CODE in state 442 resolved as shift
reduce/reduce conflict in state 43 resolved using rule expression -> HTMLSTART
rejected rule (empty -> <empty>  [precedence=left, level=1]) in state 43
reduce/reduce conflict in state 180 resolved using rule expression -> & ID
rejected rule (id -> ID) in state 180
reduce/reduce conflict in state 188 resolved using rule expression -> * ID
rejected rule (id -> ID) in state 188
reduce/reduce conflict in state 190 resolved using rule expression -> expression - expression  [precedence=left, level=8]
rejected rule (expression -> - expression  [precedence=right, level=10]) in state 190
reduce/reduce conflict in state 191 resolved using rule expression -> expression + expression  [precedence=left, level=8]
rejected rule (expression -> + expression  [precedence=right, level=10]) in state 191
reduce/reduce conflict in state 350 resolved using rule function_call -> NEW expression ( empty )
rejected rule (function_call -> expression ( empty )) in state 350
reduce/reduce conflict in state 389 resolved using rule function_call -> $ ID TARROW ID ( function_arguments )
rejected rule (function_call -> ID TARROW ID ( function_arguments )) in state 389
reduce/reduce conflict in state 428 resolved using rule statement -> expression
rejected rule (positional_args -> expression) in state 428